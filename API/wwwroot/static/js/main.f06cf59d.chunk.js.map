{"version":3,"sources":["app/api/agentUtil.ts","app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/forumPostStore.ts","app/stores/motofyStore.ts","app/stores/mechanicStore.ts","app/stores/brandStore.ts","app/stores/productStore.ts","app/stores/commentStore.ts","app/stores/countryStore.ts","app/stores/feedStore.ts","app/stores/peopleStore.ts","app/stores/privateMessageStore.ts","app/stores/presenceStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/modals/SearchDiaries.tsx","features/activities/dashboard/ActivityMobileInfo.tsx","features/activities/dashboard/ActivityMobileFilters.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/ErrorMessage.tsx","app/common/form/TextInput.tsx","features/user/RegisterForm.tsx","features/user/RequestResetPasswordForm.tsx","features/user/LoginForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/gallery/dashboard/GalleryListItemEmbracers.tsx","features/gallery/dashboard/GalleryListItem.tsx","features/gallery/dashboard/GalleryList.tsx","features/gallery/modals/GalleryChamps.tsx","features/gallery/dashboard/GalleryFilters.tsx","features/gallery/modals/SearchGallery.tsx","features/gallery/dashboard/GalleryMobileInfo.tsx","features/gallery/dashboard/GalleryMobileFilters.tsx","features/gallery/dashboard/GalleryListItemPlaceholder.tsx","features/gallery/dashboard/GalleryDashboard.tsx","features/mechanics/dashboard/MechanicListItem.tsx","features/mechanics/dashboard/MechanicList.tsx","features/mechanics/dashboard/MechanicFilters.tsx","features/mechanics/dashboard/MechanicListItemPlaceholder.tsx","features/mechanics/modals/SearchMechanic.tsx","features/mechanics/modals/SearchMechanicByCountry.tsx","features/mechanics/dashboard/MechanicMobileInfo.tsx","features/mechanics/dashboard/MechanicMobileFilters.tsx","features/mechanics/dashboard/MechanicDashboard.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/modals/ConfirmDeactivate.tsx","features/activities/modals/ConfirmDelete.tsx","features/activities/details/ActivityDetailedManager.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/modals/SeeDiaryEntry.tsx","features/activities/details/ActivityDetailedSidebarRight.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/modals/AllAttendeesList.tsx","features/activities/details/ActivityDetailedSidebarLeft.tsx","features/activities/details/ActivityDetails.tsx","features/profiles/forms/ContactForm.tsx","features/shop/modals/ConfirmDelete.tsx","features/shop/details/ProductDetailedInfo.tsx","features/shop/details/ProductDetailsStatistics.tsx","features/shop/details/ProductDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileMotofies.tsx","features/profiles/ProfileForumposts.tsx","features/profiles/ProfileMechanics.tsx","features/profiles/ProfileProducts.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","features/gallery/details/GaleryDetailedChat.tsx","features/gallery/modals/ConfirmDelete.tsx","features/gallery/details/GaleryDetailedHeader.tsx","features/gallery/details/GaleryDetailedRating.tsx","features/gallery/details/GaleryDetailedSidebar.tsx","features/gallery/details/GalleryDetailedInfo.tsx","features/gallery/details/GaleryDetails.tsx","features/forum/dashboard/ForumListItem.tsx","features/forum/dashboard/ForumList.tsx","app/common/options/forumCategoryOptions.ts","features/forum/dashboard/ForumFilters.tsx","features/forum/dashboard/ForumListItemPlaceholder.tsx","features/forum/modals/SearchForum.tsx","features/forum/modals/SearchForumByCategory.tsx","features/forum/dashboard/ForumMobileInfo.tsx","features/forum/dashboard/ForumMobileFilters.tsx","features/forum/dashboard/ForumDashboard.tsx","app/models/forumpost.ts","features/forum/form/ForumForm.tsx","features/forum/details/ForumDetailedChat.tsx","features/forum/details/ForumDetailedHeader.tsx","features/forum/details/ForumDetailedInfo.tsx","features/forum/modals/ConfirmDelete.tsx","features/forum/details/ForumDetailedManager.tsx","features/forum/details/ForumDetailedRating.tsx","features/forum/details/ForumDetailedSidebar.tsx","features/forum/details/ForumDetails.tsx","app/common/options/ratingOptions.ts","app/common/options/yesNoOptions.ts","features/mechanics/modals/ConfirmBecomeCustomer.tsx","features/mechanics/form/CustomerForm.tsx","features/mechanics/details/MechanicDetailedChat.tsx","features/mechanics/details/MechanicDetailedHeader.tsx","features/mechanics/details/MechanicDetailedInfo.tsx","features/mechanics/modals/ConfirmDelete.tsx","features/mechanics/details/MechanicDetailedManager.tsx","features/mechanics/modals/ShowTestimonial.tsx","features/mechanics/details/MechanicDetailedSidebar.tsx","features/mechanics/details/MechanicDetails.tsx","app/models/mechanic.ts","app/common/options/yearOptions.ts","app/common/options/motoOptions.ts","app/common/form/SelectMultiple.tsx","features/mechanics/form/MechanicForm.tsx","app/models/motofy.ts","features/gallery/form/GalleryForm.tsx","app/layout/PrivateRoute.tsx","features/shop/dashboard/ProductListItem.tsx","features/shop/dashboard/ProductList.tsx","app/common/options/productOptions.ts","features/shop/dashboard/ProductFilters.tsx","features/shop/dashboard/ProductListItemPlaceholder.tsx","features/shop/modals/SearchProducts.tsx","features/shop/modals/SearchProductsByCategory.tsx","features/shop/modals/SearchProductsByCountry.tsx","features/shop/dashboard/ProductMobileInfo.tsx","features/shop/dashboard/ProductMobileFilters.tsx","features/shop/dashboard/ProductDashboard.tsx","app/models/product.ts","features/shop/forms/ProductForm.tsx","features/feed/dashboard/FeedListItem.tsx","features/feed/dashboard/FeedList.tsx","features/feed/dashboard/FeedListItemPlaceholder.tsx","features/feed/dashboard/FeedDashboard.tsx","features/people/dashboard/PeopleListItem.tsx","features/people/dashboard/PeopleList.tsx","features/people/dashboard/PeopleListItemPlaceholder.tsx","features/people/dashboard/PeopleDashboard.tsx","app/common/options/moodOptions.ts","app/common/options/weatherOptions.ts","app/common/options/roadOptions.ts","features/activities/form/DiaryEntryForm.tsx","features/private_messages/PrivateMessageThreadList.tsx","features/private_messages/modals/ConfirmDelete.tsx","app/models/privatemessages.ts","features/private_messages/modals/EditMessage.tsx","features/private_messages/PrivateMessageThreadListItem.tsx","features/private_messages/PrivateMessageReply.tsx","features/private_messages/PrivateMessagesListItemPlaceholder.tsx","features/private_messages/PrivateMessagesDashboard.tsx","app/common/util/hooks.ts","features/user/RegisterSuccess.tsx","features/user/VerifyEmail.tsx","features/user/SendRequestResetPasswordSuccess.tsx","features/user/ResetPasswordForm.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","i18.n.js","index.tsx"],"names":["responseBody","response","data","postMotofy","url","motofy","motofyData","FormData","append","id","name","brandName","model","cubicCentimeters","file","description","yearOfProduction","datePublished","city","countryName","pricePaid","estimatedValue","numberOfKilometers","axios","post","headers","then","postProduct","product","productData","title","brand","category","price","phoneNumber","postDiaryEntry","diaryEntry","diaryEntryData","activityId","body","mood","road","weather","String","locationCountry","locationCity","postMechanic","mechanic","isCustomer","customers","isOwner","customerRecommended","mechanicData","brands","owner","yearOfStart","address","email","phone","website","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","Authorization","error","Promise","reject","undefined","message","toast","status","history","push","startsWith","removeItem","info","method","errors","hasOwnProperty","requests","get","put","delete","formData","list","params","details","create","activity","update","deactivate","attend","unattend","current","login","user","register","verifyEmail","resendVerifyEmailConfirm","handleForgottenPassword","resendPasswordRequest","resetPassword","password","embrace","unembrace","rate","rating","username","listPeople","uploadPhoto","photo","setMain","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","listMotofies","listForumposts","listMechanics","listProducts","forumpost","becomecustomer","newCustomer","recommend","mechanicRecomend","mechanicRate","addtestimonial","testimonial","markSold","toogleActivate","visitCounter","limit","page","addFeedItem","markSeenInDB","ids","createDiaryEntry","deleteDiaryEntry","detailsDiaryEntry","updateDiaryEntry","console","log","checkUnread","markRead","setActivityProps","date","Date","isGoing","attendees","some","a","userName","isHost","setMotofyProps","embraced","embracers","publisherUsername","createAttendee","displayName","image","createEmbracer","ActivityStore","observable","ref","constructor","rootStore","getActivity","this","activityRegistry","reaction","keys","clear","loadActivities","URLSearchParams","forEach","value","key","toISOString","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","activites","sortedActivities","sort","b","getTime","Object","entries","reduce","activities","split","Map","action","set","runInAction","computed","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","state","invoke","catch","on","comment","comments","stop","async","loadingInitial","activitiesEnvelope","agent","axiosParams","userStore","toJS","submitting","attendee","loading","filter","dark","dayNumber","diaryEntries","length","index","findIndex","x","splice","indexOf","setItem","appLoaded","ModalStore","shallow","open","size","modal","content","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","loadingMotofies","motofies","userMotofies","loadingForumposts","forumposts","userForumposts","loadingMechanics","mechanics","userMechanics","loadingProducts","products","userProducts","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","UserStore","setToken","modalStore","closeModal","presenceStore","createHubConnection","stopHubConnection","ForumPostStore","getForumPost","forumPostRegistry","loadForumPosts","forumPostCount","formatForumpostsDate","dateAdded","summComments","commentForumPosts","reduceCommenters","result","map","item","has","createdAt","rated","connectionArgument","commenters","forumpostId","forumpostEnvelope","forumpostCount","numberOfComents","forumpostRatings","editMode","MotofyStore","getMotofy","motofyRegistry","loadMotofies","mostEmbraced","highestRatedMotofy","motofyCount","parse","commentMotofies","motofiesEnvelope","newRating","score","newScore","motofyScores","embracer","MechanicStore","getMechanic","mechanicRegistry","loadMechanics","mechanicCount","openCustomerForm","commentMechanics","clearMechanic","mechanicsEnvelope","country","hasRecommended","customerToApi","mechanicId","customerForClient","isRecommended","rateMechanic","addRating","ratings","text","testimonialToUI","uuid","toString","BrandStore","ProductStore","getProduct","productRegistry","loadProducts","productCount","productEnvelope","viewers","isSold","isActive","productFollowed","productViewer","CommentStore","motofyId","CountryStore","countries","FeedStore","feedCount","groupFeedItemsByDate","feedRegistry","countUnseenItems","feeds","count","i","len","isSeen","sortedFeeds","dateTriggered","feed","formatDate","replace","skipNegotiation","transport","HttpTransportType","WebSockets","withAutomaticReconnect","feedMounted","idsToSend","feedEnvelope","PeopleStore","peopleRegistry","loadPeople","peopleCount","loadingPeople","peopleEnvelope","people","person","PrivateMessageStore","groupMessagesByThreadId","messageRegistry","messages","sortedMessages","dateSent","threadId","privateMessageThreadId","resetViewAfterEdit","messageToEdit","listOfMessagesInFocus","m","otherUser","otherUsername","setViewUponNewMessage","messageToDelete","setView","messageToSend","recipientUsername","messageContent","messageThreadId","senderPhotoUrl","messagesEnvelope","privateMessages","privateMessageThreadsCount","totalPages","messageThreadsCount","messagesByThreadId","dateRead","userPhotoUrl","PresenceStore","privateMessageStore","unreadItems","Set","usernames","onlineUsers","senderUsername","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","forumPostStore","motofyStore","mechanicStore","brandStore","productStore","commentStore","countryStore","feedStore","peopleStore","CommonStore","observer","useContext","logout","isLoggedIn","unreadIncomingMessages","getUnreadItems","loadFeed","unseenFeedItems","feedByDate","setInitialView","i18n","t","useTranslation","menuRef","useRef","useHistory","closeStackableMenu","actionMenu","parentNode","actionIcon","classList","remove","useEffect","onclick","e","menu","contains","add","preventDefault","i18next","changeLanguage","handleLanguageChange","handleViewUnseen","markSeen","go","Container","Menu","style","textAlign","fixed","stackable","inverted","pointing","Item","as","NavLink","exact","to","src","alt","marginRight","onClick","Link","Dropdown","className","floating","labeled","icon","Label","color","Popup","position","trigger","flag","Image","avatar","spaced","cursor","setPredicate","calendarFilter","setCalendarFilter","useState","styles","SegmentGroup","raised","vertical","width","active","Input","placeholder","onKeyDown","target","handleResultSelect","Divider","horizontal","Icon","onChange","ActivityListItemPlaceholder","Placeholder","fluid","Segment","Group","minHeight","Header","Line","Paragraph","secondary","clearing","Button","disabled","SearchDiaries","Grid","Column","toUpperCase","setInfo","openModal","handleSetInfo","next","widths","top","borderColor","borderWidth","ActivityListItemAttendees","List","header","circular","bordered","ActivityListItem","host","h","when","starting_point","destination","panels","format","join","departure","marginBottom","Content","verticalAlign","Meta","Accordion","styled","exclusive","Description","substring","activitiesByDate","group","divided","setPage","loadingNext","setLoadingNext","mobile","tablet","computer","pageStart","loadMore","hasMore","initialLoad","Sticky","Loader","ErrorMessage","Message","statusText","flat","err","TextInput","input","type","meta","touched","Form","Field","basic","RegisterForm","isValidEmail","createValidator","test","validate","combineValidators","isRequired","composeValidators","matchesPattern","confirmPassword","matchesField","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","component","RequestResetPasswordForm","autoComplete","LoginForm","setSize","marginTop","HomePage","marginLeft","ActivityFormValues","init","motorcycleBrandId","motorcycleBrandName","motorcycleBrandLogoUrl","time","countryId","assign","DiaryEntryFormValues","entryDate","photoUrl","TextAreaInput","rows","SelectInput","options","Select","search","selection","DateInput","rest","onBlur","match","createActivity","editActivity","loadActivity","loadCountriesToSelect","loadBrandsToSelect","setEditMode","hasLengthGreaterThan","setActivity","setLoading","finally","initialValues","newId","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","floated","positive","GalleryListItemEmbracers","padding","margin","display","alignItems","Row","brandLogoUrl","centered","motofiesByDate","GalleryChamps","attached","fontSize","handleOpenChamps","SearchGallery","GalleryListItemPlaceholder","mechanicImageStyle","testPositionStyles","MechanicListItem","rounded","Extra","averageRating","mechanicsByDate","clearable","MechanicListItemPlaceholder","SearchMechanic","SearchMechanicByCountry","LoadingComponent","Dimmer","addComment","border","Comment","maxWidth","Avatar","Author","Metadata","formatDistance","Text","form","reset","labelPosition","ConfirmDeactivate","deactivateActivity","ConfirmDelete","deleteActivity","attendActivity","cancelAttendance","managing","setManaging","setUsername","u","handleCancelAttendance","handleAttendActivity","ActivityDetailedInfo","whiteSpace","SeeDiaryEntry","diary","actualDiary","setActualDiary","counter","parseInt","numberDiaries","handleChange","diaryDay","addSuffix","Subheader","GridColumn","Number","handleDeleteEntry","diariesByDate","slice","day","days","relaxed","entry","handleOpenDiaryModal","animated","persons","corner","hasLengthLessThan","sendMessage","productId","deleteProduct","followProduct","unfollowProduct","setProductFollowed","viewer","minWidth","columns","sellerUsername","sellerDisplayName","handleUnfollowProduct","handleMarkSold","sub","numberSeen","inactivityExpirationDate","numberFollowed","loadProduct","NotFound","Inline","primary","Modal","onClose","dropZoneStyles","borderRadius","paddingTop","height","dropZoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","useDropzone","PhotoWidgetCropper","setImage","imagePreview","cropper","initialAspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","overflow","isCurrentUser","setMainPhoto","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","doubling","currentTarget","negative","bio","ProfileCard","extra","ProfileFollowings","loadUserActivities","panes","menuItem","pane","onTabChange","handleTabChange","objectFit","loadUserMotofies","loadUserForumposts","loadUserMechanics","loadUserProducts","pictureUrl","mobilePanes","ProfileActivities","ProfileContent","setActiveTab","menuPosition","includes","Statistic","label","followingCount","Reveal","visible","hidden","loadProfile","deleteMotofy","handleDeleteMotofy","motofyImageStyle","buttonVisitorStyle","backgroundColor","motofyImageTextStyle","right","background","embraceMotofy","unembraceMotofy","handleUnembraceMotofy","handleEmbraceMotofy","rateMotofy","setRated","userRated","setUserRated","notifyeeUsername","setNotifyeeUsername","flexDirection","justifyContent","onRate","handleRate","defaultRating","maxRating","ItemExtra","GalleryDetailedInfo","GridRow","iconStyle","loadMotofy","ForumListItem","Response","Responses","Member","Members","Rating","Ratings","forumpostsByDate","ForumListItemPlaceholder","SearchForum","SearchForumByCategory","ForumpostFormValues","createForumpost","editForumpost","loadForumPost","setForumpost","newForumpost","activityImageStyle","activityImageTextStyle","bottom","left","forumpostRating","authorPhotoUrl","toFixed","deleteForumpost","setRating","authorUsername","handleRating","commenter","ratingOptions","yesNo","ConfirmBecomeCustomer","becomeCustomer","addTestimonial","setCloseCustomerForm","CustomerForm","Checkbox","checked","mechanicImageTextStyle","publisher","logoUrl","deleteMechanic","setCustomer","setOpenCustomerForm","handleView","localMechanic","customer","ShowTestimonial","mechanicShop","handleShowTestimonial","ready","setReady","loadMechanic","MechanicFromValues","year","motoOptions","SelectMultiple","multiple","ownerOptions","createMechanic","editMechanic","random","floor","motomoto","isNumeric","setMechanic","uploaded","setUploaded","edited","setEdited","imageToUpload","setImageToUpload","previewImage","setPreviewImage","imageToSet","newMechanic","raws","MotofyFormValues","brandId","createMotofy","editMotofy","setMotofy","goForward","newMotofy","Component","props","descriptionUiShort","productsByDate","categories","ProductFilters","ProductListItemPlaceholder","SearchProducts","SearchProductsByCategory","SearchProductsByCountry","ProductFormValues","sellerId","isAdvertised","dateActivated","dateAdvertised","createProduct","editProduct","setProduct","newProduct","now","FeedListItem","Event","notifierPhotoUrl","Summary","User","notifierUsername","notifierDisplayname","setFeedMounted","setFeedUnmounted","gr","FeedListItemPlaceholder","member","displayPeople","setInput","onInput","handleSearchResults","PeopleListItemPlaceholder","cleanPeople","loadDiaryEntry","editDiaryEntry","setdiaryEntry","path","uiId","newDiaryEntry","markReadInDB","recipientPhotoUrl","senderDisplayName","fontWeight","messageId","deleteSingleMessage","PrivateMessageToEditValues","editMessage","setMessage","setOtherUser","cleanOtherUser","markReadNavbar","userStyles","senderStyles","handleStartConnection","handleStopConnection","only","EditMessage","setRecipient","setMessageThreadId","setReply","addReply","showPicker","setShowPicker","textareaRef","setValue","useLayoutEffect","max","scrollHeight","handleSetRecipient","val","alert","autoFocus","handleSendReply","event","resize","pickerStyle","onEmojiClick","emojiObject","prevInput","emoji","PrivateMessagesListItemPlaceholder","loadMessages","useQuery","useLocation","RegisterSuccess","success","VerifyEmail","Status","setStatus","handleConfirmEmailResend","getBody","SendRequestResetPasswordSuccess","ResetPasswordForm","handleResetPassword","withRouter","location","setAppLoaded","getUser","ActivityDashboard","ActivityDetails","ActivityForm","DiaryEntryForm","GalleryDashboard","GaleryDetails","GalleryForm","ForumDashboard","ForumDetails","ForumForm","MechanicDashboard","MechanicDetails","MechanicForm","ProductDashboard","ProductDetails","ProductForm","PrivateMessagesDashboard","FeedDashboard","PeopleDashboard","ProfilePage","Boolean","hostname","children","pathname","scrollTo","Backend","LanguageDetector","initReactI18next","backend","loadPath","fallbackLng","debug","ns","interpolation","escapeValue","formatSeparator","react","useSuspense","dateFnsLocalizer","createBrowserHistory","ReactDOM","fallback","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.f06cf59d.chunk.js","sourcesContent":["import { IDiaryEntry } from './../models/activity';\nimport axios, { AxiosResponse } from \"axios\";\nimport { IMechanic } from \"../models/mechanic\";\nimport { IMotofy } from \"../models/motofy\";\nimport { IProduct } from \"../models/product\";\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nexport const postMotofy = {\n  motofyForm: (url: string, motofy: IMotofy) => {\n    let motofyData = new FormData();\n    motofyData.append('Id', motofy.id!)\n    motofyData.append('Name', motofy.name)\n    motofyData.append('BrandName', motofy.brandName)\n    motofyData.append('Model', motofy.model)\n    motofyData.append('CubicCentimeters', motofy.cubicCentimeters)\n    motofyData.append('File', motofy.file);\n    motofyData.append('Description', motofy.description!)\n    motofyData.append('YearOfProduction', motofy.yearOfProduction!)\n    motofyData.append('DatePublished', motofy.datePublished!)\n    motofyData.append('City', motofy.city)\n    motofyData.append('Country', motofy.countryName)\n    motofyData.append('PricePaid', motofy.pricePaid)\n    motofyData.append('EstimatedValue', motofy.estimatedValue)\n    motofyData.append('NumberOfKilometers', motofy.numberOfKilometers)\n    return axios.post(url, motofyData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\nexport const postProduct = {\n  productForm: (url: string, product: IProduct) => {\n    let productData = new FormData();\n    productData.append('Id', product.id!)\n    productData.append('Title', product.title)\n    productData.append('Description', product.description!)\n    productData.append('brand', product.brand)\n    productData.append('Model', product.model)\n    productData.append('Category', product.category)\n    productData.append('File', product.file);\n    productData.append('Country', product.countryName)\n    productData.append('City', product.city)\n    productData.append('Price', product.price)\n    productData.append('PhoneNumber', product.phoneNumber)\n    return axios.post(url, productData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\nexport const postDiaryEntry = {\n  diaryEntryForm: (url: string, diaryEntry: IDiaryEntry) => {\n    let diaryEntryData = new FormData();\n    diaryEntryData.append('Id', diaryEntry.id!)\n    diaryEntryData.append('ActivityId', diaryEntry.activityId)\n    diaryEntryData.append('Body', diaryEntry.body)\n    diaryEntryData.append('Mood', diaryEntry.mood!)\n    diaryEntryData.append('Road', diaryEntry.road!)\n    diaryEntryData.append('Weather', diaryEntry.weather!)\n    diaryEntryData.append('NumberOfKilometers', String(diaryEntry.numberOfKilometers!))\n    diaryEntryData.append('File', diaryEntry.file) \n    diaryEntryData.append('LocationCountry', diaryEntry.locationCountry)\n    diaryEntryData.append('LocationCity', diaryEntry.locationCity)\n\n    return axios.post(url, diaryEntryData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\n\nexport const postMechanic = {\n  mechanicForm: (url: string, mechanic: IMechanic) => {\n    let isCustomer = String(mechanic.customers[0].isCustomer);\n    let isOwner = String(mechanic.customers[0].isOwner);\n    let customerRecommended = String(mechanic.customers[0].customerRecommended);\n    let mechanicData = new FormData();\n    mechanicData.append('Id', mechanic.id!)\n    mechanicData.append('MechanicBrands', mechanic.brands)\n    mechanicData.append('Name', mechanic.name)\n    mechanicData.append('Owner', mechanic.owner)\n    mechanicData.append('Description', mechanic.description!)\n    mechanicData.append('YearOfStart', mechanic.yearOfStart!)\n    mechanicData.append('Country', mechanic.countryName)\n    mechanicData.append('City', mechanic.city)\n    mechanicData.append('Address', mechanic.address)\n    mechanicData.append('Email', mechanic.email)\n    mechanicData.append('Phone', mechanic.phone)\n    mechanicData.append('Website', mechanic.website)\n    mechanicData.append('Testimonial', mechanic.description!)\n    mechanicData.append('IsCustomer', isCustomer!)\n    mechanicData.append('IsOwner', isOwner!)\n    mechanicData.append('CustomerRecommended', customerRecommended!)\n    // mechanicData.append('Customers', mechanic.customers)\n    mechanicData.append('File', mechanic.file)\n    return axios.post(url, mechanicData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\n//   export default {\n//     specialRequests,\n//     postProduct,\n//     postMechanic\n//   }","import { IProfileEnvelope } from './../models/profile';\nimport { IRateMotofy } from './../models/motofy';\nimport { IMotofy, IMotofyEnvelope } from './../models/motofy'; \nimport axios, { AxiosResponse } from 'axios';\nimport { history } from '../..';\nimport { IActivity, IActivitiesEnvelope, IDiaryEntry } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { IPhoto, IProfile } from '../models/profile';\nimport { IForumpost, IForumpostEnvelope, IRateForumpost } from '../models/forumpost';\nimport { IMechanic, IMechanicCustomerToBecome, IMechanicRate, IMechanicRecommend, IMechanicsEnvelope } from '../models/mechanic';\nimport { IBrand } from '../models/brand';\nimport { IProduct, IProductsEnvelope } from '../models/product';\nimport { ICountry } from '../models/country';\nimport { postDiaryEntry, postMotofy } from './agentUtil';\nimport { postProduct } from './agentUtil';\nimport { postMechanic } from './agentUtil';\nimport { IFeedEnvelope, IFeedsToMarkSeen } from '../models/feed';\nimport { IPrivateMessageEnvelope, IPrivateMessageToSend } from '../models/privatemessages';\n// import { resolve } from 'dns';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers!.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - API not responsive');\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push('/notfound');\n  }\n  if (status === 401\n    && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\", error_description=\"The token expired')) {\n    window.localStorage.removeItem('jwt');\n    history.push('/');\n    toast.info('Your session has expired, please login again')\n  }\n  if (\n    status === 400 &&\n    config.method === 'get' &&\n    data.errors.hasOwnProperty('id')\n  ) {\n    history.push('/notfound');\n  }\n  if ((status === 404) || (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id'))) {\n    history.push('/notfound')\n  }\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n  // console.log(error.response);\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\n// const sleep = (ms: number) => (response: AxiosResponse) =>\n//   new Promise<AxiosResponse>((resolve) =>\n//     setTimeout(() => resolve(response), ms)\n//   );\n\nconst requests = {\n  get: (url: string) =>\n    axios.get(url)\n      // .then(sleep(1000))\n      .then(responseBody),\n  post: (url: string, body: {}) =>\n    axios.post(url, body)\n      // .then(sleep(1000))\n      .then(responseBody),\n  put: (url: string, body: {}) =>\n    axios.put(url, body)\n      // .then(sleep(1000))\n      .then(responseBody),\n  delete: (url: string) =>\n    axios.delete(url)\n      // .then(sleep(1000))\n      .then(responseBody),\n\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    // console.log('photo file From agent: ', file)\n\n    return axios.post(url, formData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody)\n  }\n};\n\n\nconst Motofies = {\n  // list: (limit?: number, page?: number): Promise<IMotofyEnvelope> => \n  // requests.get(`motofies?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  //  uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/`, photo),\n\n  list: (params: URLSearchParams): Promise<IMotofyEnvelope> =>\n    axios.get('/motofies', { params: params })\n      // .then(sleep(1000))\n      .then(responseBody),\n  details: (id: string) => requests.get(`/motofies/${id}`),\n  create: (motofy: IMotofy) => postMotofy.motofyForm('/motofies', motofy),\n  update: (motofy: IMotofy) =>\n    requests.put(`/motofies/${motofy.id}`, motofy),\n  delete: (id: string) => requests.delete(`/motofies/${id}`),\n  embrace: (id: any) => requests.post(`/motofies/${id}/embrace`, {}),\n  unembrace: (id: any) => requests.delete(`/motofies/${id}/embrace`),\n  rate: (id: string, rating: IRateMotofy) => requests.put(`/motofies/${id}/rate`, rating)\n};\n\nconst Mechanics = {\n  list: (params: URLSearchParams): Promise<IMechanicsEnvelope> =>\n    axios.get('/mechanics', { params: params }).then(responseBody),//then(sleep(1000)).\n\n  details: (id: string) => requests.get(`/mechanics/${id}`),\n  create: (mechanic: IMechanic) => postMechanic.mechanicForm('/mechanics', mechanic),\n  update: (mechanic: IMechanic) => requests.put(`/mechanics/${mechanic.id}`, mechanic),\n  becomecustomer: (newCustomer: IMechanicCustomerToBecome) => requests.post('/mechanics/addcustomer', newCustomer),\n  recommend: (mechanicRecomend: IMechanicRecommend) => requests.put('/mechanics/recommend', mechanicRecomend),\n  rate: (mechanicRate: IMechanicRate) => requests.put('/mechanics/rate', mechanicRate),\n  addtestimonial: (testimonial: any) => requests.put('/mechanics/addtestimonial', testimonial),\n  delete: (id: string) => requests.delete(`/mechanics/${id}`),\n};\n\nconst Products = {\n  list: (params: URLSearchParams): Promise<IProductsEnvelope> =>\n    // requests.get(`/products?limit=${limit}&offset=${page ? limit * page : 0}`),\n    axios.get('/products', { params: params }).then(responseBody),//then(sleep(1000)).\n\n  details: (id: string) => requests.get(`/products/${id}`),\n  create: (product: IProduct) => postProduct.productForm('/products', product),\n  update: (product: IProduct) => requests.put(`/products/${product.id}`, product),\n  markSold: (id: string) => requests.put(`/products/${id}/markSold`, {}),\n  delete: (id: string) => requests.delete(`/products/${id}`),\n  follow: (id: string) => requests.put(`/products/${id}/follow`, {}),\n  unfollow: (id: string) => requests.delete(`/products/${id}/unfollow`),\n  // updatephoto: (photo: Blob, id: string): Promise<IPhoto> => requests.postForm(`/photos/${id}/updatePhoto`, photo),\n  toogleActivate: (id: string) => requests.put(`/products/${id}/toogleActivate`, {}),\n  visitCounter: (id: string) => requests.put(`/products/${id}/visitCounter`, {})\n}\n\nconst Activities = {\n\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios.get('/activities', { params: params })\n      // .then(sleep(1000))\n      .then(responseBody),\n\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post('/activities', activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete(`/activities/${id}`),\n  deactivate: (id: string) => requests.put(`/activities/${id}/deactivate`, {}),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.delete(`/activities/${id}/attend`),\n\n\n};\n\nconst DiaryEntries = {\n  createDiaryEntry: (diaryEntry: IDiaryEntry) => postDiaryEntry.diaryEntryForm('/diaryentries', diaryEntry),\n  deleteDiaryEntry: (id: string) => requests.delete(`/diaryentries/${id}`),\n  detailsDiaryEntry: (id: string) => requests.get(`/diaryentries/${id}`),\n  // updateDiaryEntry: (diaryEntry: IDiaryEntry) => requests.put(`/diaryentries/${diaryEntry.id}`, diaryEntry),\n  updateDiaryEntry: (diaryEntry: IDiaryEntry) => console.log(diaryEntry),\n\n}\n\nconst Feed = {\n  list: (limit: number, page: number): Promise<IFeedEnvelope> =>\n    requests.get(`/feeds?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  addFeedItem: (id: string, info: string, username?: string) => requests.post(`/feeds/${id}/${info}/${username}/addFeedItem`, {}),\n  markSeenInDB: (ids: IFeedsToMarkSeen) => requests.put('/feeds/markseenindb', ids)\n};\n\nconst PrivateMessages = {\n  list: (limit: number, page: number): Promise<IPrivateMessageEnvelope> =>\n    requests.get(`/privatemessages?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  create: (message: IPrivateMessageToSend) => requests.post('/privatemessages/', message),\n  // delete: (id: string) => requests.delete(`/privatemessages/${id}`),\n  checkUnread: () => requests.get('/privatemessages/checkUnread'),\n  markRead: (id: string) => requests.put(`/privatemessages/${id}/markRead`, {})\n}\n\nconst Forumposts = {\n  // list: (limit?:number, page?:number): Promise<IForumpostEnvelope> => \n  //   requests.get(`/forumposts?limit=${limit}&offset=${page ? page * limit! : 0}`),\n\n  list: (params: URLSearchParams): Promise<IForumpostEnvelope> =>\n    axios.get('/forumposts', { params: params }).then(responseBody),  //then(sleep(1000)).\n  details: (id: string) => requests.get(`/forumposts/${id}`),\n  create: (forumpost: IForumpost) => requests.post('/forumposts', forumpost),\n  update: (forumpost: IForumpost) =>\n    requests.put(`/forumposts/${forumpost.id}`, forumpost),\n  delete: (id: string) => requests.delete(`/forumposts/${id}`),\n  rate: (rate: IRateForumpost) => requests.put(`/forumposts/rate`, rate)\n}\n\n\n\nconst Brands = {\n  list: (): Promise<IBrand[]> => requests.get('brands'),\n  details: (id: string) => requests.get(`/brand/${id}`),\n  // DONT THINK IM GONNA LET USER... \n  // but i might let admin\n  //NOT finished!!!\n  create: (motofy: IBrand) => requests.post('/brands', motofy),\n  // update: (motofy: IMotofy) =>\n  //   requests.put(`/brands/${motofy.id}`, motofy),\n  // delete: (id: string) => requests.delete(`/brands/${id}`),\n};\nconst Countries = {\n  list: (): Promise<ICountry[]> => requests.get('countries'),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get('/user'),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/login`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/register`, user),\n  verifyEmail: (token: string, email: string): Promise<void> =>\n    requests.post(`/user/verifyEmail`, { token, email }),\n  resendVerifyEmailConfirm: (email: string): Promise<void> =>\n    requests.get(`/user/resendEmailVerification?email=${email}`),\n  handleForgottenPassword: (email: string): Promise<void> =>\n    requests.get(`/user/handleForgottenPassword?email=${email}`),\n  resendPasswordRequest: (email: string): Promise<void> =>\n    requests.get(`/user/resendPasswordRequest?email=${email}`),\n  resetPassword: (token: string, email: string, password: string): Promise<void> =>\n    requests.post(`/user/resetPassword`, { token, email, password })\n};\n\n\nconst Profiles = {\n  get: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  listPeople: (params: URLSearchParams): Promise<IProfileEnvelope> =>\n    axios.get('/profiles/people', { params: params }).then(responseBody),//.then(sleep(1000))\n  uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/`, photo),\n  setMain: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n  updateProfile: (profile: Partial<IProfile>) => requests.put(`/profiles`, profile),\n  follow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.delete(`/profiles/${username}/follow`),\n  //==TODO--Refactor\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\n  listMotofies: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/motofies?predicate=${predicate}`),\n  listForumposts: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/forumposts?predicate=${predicate}`),\n  listMechanics: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/mechanics?predicate=${predicate}`),\n  listProducts: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/products?predicate=${predicate}`)\n\n};\n\nexport default {\n  Activities,\n  User,\n  Motofies,\n  Profiles,\n  Forumposts,\n  Mechanics,\n  Brands,\n  Products,\n  Countries,\n  Feed,\n  DiaryEntries,\n  PrivateMessages\n};\n","import { IActivity, IAttendee } from '../../models/activity';\nimport { IEmbracer, IMotofy } from '../../models/motofy';\nimport { IUser } from '../../models/user';\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n  // const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n  // const year = date.getFullYear();\n  // const month = date.getMonth() + 1;\n  // const day = date.getDate();\n  // const dateString = `${year}-${month}-${day}`;\n\n  const dateString = date.toISOString().split('T')[0];\n  const timeString = time.toISOString().split('T')[1];\n\n  return new Date(dateString + 'T' + timeString);\n};\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n\n  activity.date = new Date(activity.date);\n  \n  activity.isGoing = activity.attendees.some(\n    (a) => a.username === user.userName\n  );\n \n  activity.isHost = activity.attendees.some(\n    (a) => \n    a.username === user.userName && a.isHost\n    \n    );\n    return activity;\n};\n\nexport const setMotofyProps = (motofy: IMotofy, user: IUser) => {\n\n  motofy.embraced = motofy.embracers.some(\n    a => a.username === user?.userName\n  )\n    motofy.embracers[0].isOwner = motofy.publisherUsername === user.userName;\n  return motofy;\n}\n\nexport const createAttendee = (user: IUser): IAttendee => {\n\n  return {\n    displayName: user.displayName,\n    isHost: false,\n    username: user.userName,\n    image: user.image!\n  }\n}\n\nexport const createEmbracer = (user: IUser): IEmbracer => {\n\n  return {\n    displayName: user.displayName,\n    isOwner: false,\n    username: user.userName,\n    image: user.image!\n  }\n}\n\n","import { IDiaryEntry } from './../models/activity';\nimport { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IActivity } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createAttendee, setActivityProps } from '../common/util/util';\nimport {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from '@microsoft/signalr';\n\n// import { withTranslation } from 'react-i18next';\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  }\n\n  \n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @observable activityCount = 0;\n  @observable page = 0;\n\n  @observable diaryEntry: IDiaryEntry | null = null;\n\n  @observable predicate = new Map();\n\n  @observable info: string = '';\n\n  @action setPredicate = (predicate: string, value: string | Date) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, value.toISOString())\n      } else {\n        params.append(key, value)\n      }\n      // console.log('params', params.keys)\n    })\n    return params;\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  // === only observing reference not going deep into every property of the class ===\n  @observable.ref hubConnection: HubConnection | null = null;\n\n  @action createHubConnection = (activityId: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', activityId);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection'));\n\n    this.hubConnection.on('RecieveComment', (comment) => {\n      runInAction(() => {\n        this.activity!.comments.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      console.log(message)\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.activity!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    values.activityId = this.activity!.id;\n    try {\n      await this.hubConnection!.invoke('SendComment', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activites: IActivity[]) {\n    const sortedActivities = activites.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split('T')[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  //   ==== async await version ====\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n\n      const { activities, activityCount } = activitiesEnvelope;\n\n      runInAction('loading activities', () => {\n\n        activities.forEach((activity) => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity);\n\n        });\n        this.activityCount = activityCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load activities error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  //   ==== example promise chaining version ====\n  //   @action loadActivities = () => {\n  //     this.loadingInitial = true;\n  //     agent.Activities.list()\n  //       .then((activities) => {\n  //         activities.forEach((activity) => {\n  //           activity.date = activity.date.split('.')[0];\n  //           this.activities.push(activity);\n  //         });\n  //       })\n  //       .catch(error => console.log(error))\n  //       .finally(() => (this.loadingInitial = false));\n  //   };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n\n    if (activity) {\n      this.activity = activity;\n      return toJS(activity);\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction('getting activity', () => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n\n        });\n        return activity;\n      } catch (error) {\n        runInAction('error get activity', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n\n  // === helper method to loadActivity ===\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n\n  @action createActivity = async (activity: IActivity) => {\n\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity)\n\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.attendees = attendees;\n      activity.comments = [];\n      activity.isHost = true;\n      runInAction('creating activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction('editing activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('edit activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n  @action deleteActivity = async (id: string) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.delete(id);\n      runInAction('editing activity', () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n      });\n      history.push('/activities');\n    } catch (error) {\n      runInAction('delete activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem deleting data!');\n      console.log(error);\n    }\n  };\n\n\n  @action deactivateActivity = async (id: string) => {\n    try {\n      await agent.Activities.deactivate(id);\n\n      runInAction('deactivating activity', () => {\n        this.activityRegistry.delete(id);\n      });\n    } catch (error) {\n      runInAction('delete error activity', () => {\n        console.log(error);\n      });\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          toast.info('You are now part of this diary');\n\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem joining the group at this time');\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            (a) => a.username !== this.rootStore.userStore.user?.userName\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          toast.dark('You are not part of this diary anymore');\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem cancelling attendance at this time');\n    }\n  };\n\n  @action createDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity) => {\n\n    diaryEntry.dayNumber = String(activity.diaryEntries.length + 1);\n    diaryEntry.activityId = activity.id;\n    activity.diaryEntries.push(diaryEntry);\n    console.log('diaryEntry', diaryEntry);\n    this.submitting = true;\n\n    try {\n\n      await agent.DiaryEntries.createDiaryEntry(diaryEntry);\n\n      runInAction('creating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n  @action editDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity) => {\n\n    let index = activity.diaryEntries.findIndex(x => x.id === diaryEntry.id);\n    activity.diaryEntries[index] = diaryEntry;\n    this.submitting = true;\n\n    try {\n      await agent.DiaryEntries.updateDiaryEntry(diaryEntry);\n\n      runInAction('updating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem updating data!');\n      console.log(error);\n    }\n  };\n\n  @action loadDiaryEntry = async (id: string) => {\n\n    this.loadingInitial = true;\n    try {\n      let diaryEntry: IDiaryEntry = await agent.DiaryEntries.detailsDiaryEntry(id);\n\n      runInAction('getting activity', () => {\n\n        this.diaryEntry = diaryEntry;\n        this.loadingInitial = false;\n\n      });\n      return this.diaryEntry;\n    } catch (error) {\n      runInAction('error get diary entry', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n\n  @action deleteDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity): Promise<void> => {\n\n    activity.diaryEntries.splice(activity.diaryEntries.indexOf(diaryEntry));\n\n    this.submitting = true;\n    try {\n      await agent.DiaryEntries.deleteDiaryEntry(diaryEntry.id);\n\n      runInAction('creating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n}\n\n","import { action, observable, reaction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class commonStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.token, // 1. what to react on\n      (token) => {      // 2. what to do when there is a change\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else {\n          window.localStorage.removeItem('jwt');\n        }\n      }\n    );\n  }\n\n  @observable token: string | null = window.localStorage.getItem('jwt');\n  @observable appLoaded = false;\n\n  @action setToken = (token: string | null) => {\n    this.token = token;\n  };\n\n  @action setAppLoaded = () => {\n    this.appLoaded = true;\n  };\n}\n","import { action, observable, runInAction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class ModalStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  //shallow 13-11, 11:00\n  @observable.shallow modal = {\n    open: false,\n    body: null,\n    size: undefined,\n  };\n  // @observable size: string | undefined;\n\n  @action setSize = (size: any) => {\n    runInAction(() => {\n      this.modal.size = size \n    })\n  }\n\n  @action openModal = (content: any) => {//, size: string\n      this.modal.open = true;\n      this.modal.body = content;\n      // this.modal.size = size;\n  }\n\n  @action closeModal = () => {\n      this.modal.open = false;\n      this.modal.body = null;\n  }\n}\n","import { action, computed, observable, reaction, runInAction } from 'mobx';\nimport { toast } from 'react-toastify';\n\nimport agent from '../api/agent';\nimport { IPhoto, IProfile, IUserActivity, IUserForumpost, IUserMechanic, IUserMotofy, IUserProduct } from '../models/profile';\nimport { RootStore } from './rootStore';\n\n\nexport default class ProfileStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.activeTab,\n      activeTab => {\n        if (activeTab === 7 || activeTab === 8) {\n          const predicate = activeTab === 7 ? 'followers' : 'following'\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    )\n  }\n\n  @observable profile: IProfile | null = null;\n  @observable loadingProfile = true;\n  @observable uploadingPhoto = false;\n  @observable loading = false;\n  @observable followings: IProfile[] = [];\n  @observable activeTab: number = 0;\n\n  @observable userActivities: IUserActivity[] = [];\n  @observable loadingActivities = false;\n\n  @observable userMotofies: IUserMotofy[] = [];\n  @observable loadingMotofies = false;\n\n  @observable userForumposts: IUserForumpost[] = [];\n  @observable loadingForumposts = false;\n\n  @observable userMechanics: IUserMechanic[] = [];\n  @observable loadingMechanics = false;\n\n  @observable userProducts: IUserProduct[] = [];\n  @observable loadingProducts = false;\n\n\n  @computed get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      return this.rootStore.userStore.user.userName === this.profile.username;\n    } else {\n      return false;\n    }\n  }\n  \n  @action loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n    if(predicate === undefined){\n      predicate = 'active';\n    }\n\n    try {\n      const activities = await agent.Profiles.listActivities(username, predicate!);\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user activities');\n      runInAction(() => {\n        this.loadingActivities = false;\n      })\n    }\n  }\n  @action loadUserMotofies = async (username: string, predicate?: string) => {\n    this.loadingMotofies = true;\n    if (predicate === undefined) {\n      predicate = 'iEmbraced'\n    }\n    try {\n      const motofies = await agent.Profiles.listMotofies(username, predicate!);\n      runInAction(() => {\n        this.userMotofies = motofies;\n        this.loadingMotofies = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user activities');\n      runInAction(() => {\n        this.loadingMotofies = false;\n      })\n    }\n  }\n\n  @action loadUserForumposts = async (username: string, predicate?: string) => {\n    this.loadingForumposts = true;\n    if (predicate === undefined) {\n      predicate = 'iAsked'\n    }\n    try {\n      const forumposts = await agent.Profiles.listForumposts(username, predicate!);\n      runInAction(() => {\n        this.userForumposts = forumposts;\n        this.loadingForumposts = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user forumposts');\n      runInAction(() => {\n        this.loadingForumposts = false;\n      })\n    }\n  }\n\n  @action loadUserMechanics = async (username: string, predicate?: string) => {\n    this.loadingMechanics = true;\n\n    if (predicate === undefined) {\n      predicate = 'iPublished'\n    }\n    try {\n      const mechanics = await agent.Profiles.listMechanics(username, predicate!);\n      runInAction(() => {\n        this.userMechanics = mechanics;\n        this.loadingMechanics = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user mechanics');\n      runInAction(() => {\n        this.loadingMechanics = false;\n      })\n    }\n  }\n  @action loadUserProducts = async (username: string, predicate?: string) => {\n    this.loadingProducts = true;\n\n    if (predicate === undefined) {\n      predicate = 'iAmSelling'\n    }\n    try {\n      const products = await agent.Profiles.listProducts(username, predicate);\n      runInAction(() => {\n        this.userProducts = products;\n        this.loadingProducts = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user products');\n      runInAction(() => {\n        this.loadingProducts = false;\n      })\n    }\n  }\n\n\n\n  @action setActiveTab = (activeIndex: number) => {\n    this.activeTab = activeIndex;\n  }\n\n  @action loadProfile = async (username: string) => {\n    this.loadingProfile = true;\n    try {\n      const profile = await agent.Profiles.get(username);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingProfile = false;\n      });\n      console.log(error);\n    }\n  };\n  @action uploadPhoto = async (file: Blob) => {\n    this.uploadingPhoto = true;\n    try {\n      const photo = await agent.Profiles.uploadPhoto(file);\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos.push(photo);\n          if (photo.isMain && this.rootStore.userStore.user) {\n            this.rootStore.userStore.user.image = photo.url;\n            this.profile.image = photo.url;\n          }\n        }\n        this.uploadingPhoto = false;\n      });\n    } catch (error) {\n      console.log(error);\n      toast.error('Problem uploading photo');\n      runInAction(() => {\n        this.uploadingPhoto = false;\n      });\n    }\n  };\n\n  @action setMainPhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.setMain(photo.id);\n      runInAction(() => {\n        this.rootStore.userStore.user!.image = photo.url;\n        this.profile!.photos.find((x) => x.isMain)!.isMain = false;\n        this.profile!.photos.find((x) => x.id === photo.id)!.isMain = true;\n        this.profile!.image = photo.url;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem setting photo as main');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action deletePhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n      runInAction(() => {\n        this.profile!.photos = this.profile!.photos.filter(\n          (a) => a.id !== photo.id\n        );\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem deleting the photo');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action updateProfile = async (profile: Partial<IProfile>) => {\n    try {\n      await agent.Profiles.updateProfile(profile);\n      runInAction(() => {\n        if (\n          profile.displayName !== this.rootStore.userStore.user!.displayName\n        ) {\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\n        }\n        this.profile = { ...this.profile!, ...profile };\n      });\n    } catch (error) {\n      toast.error('Problem updating profile');\n    }\n  };\n  @action follow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.follow(username);\n      runInAction(() => {\n        this.profile!.following = true;\n        this.profile!.followersCount++;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem following user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action unfollow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.unfollow(username);\n      runInAction(() => {\n        this.profile!.following = false;\n        this.profile!.followersCount--;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem unfollowing user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action loadFollowings = async (predicate: string) => {\n    this.loading = true;\n    try {\n      const profiles = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n      runInAction(() => {\n        this.followings = profiles;\n        this.loading = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading followings');\n      runInAction(() => {\n        this.loading = false;\n      })\n    }\n  }\n}\n","import { action, computed, observable, runInAction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { RootStore } from './rootStore';\n\n\nexport default class UserStore {\n\n\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() { return !!this.user };\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n            });\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            //==01\n            this.rootStore.presenceStore.createHubConnection();\n            history.push('/activities');\n\n        } catch (error) {\n            throw error\n        }\n    }\n    @action getUser = async () => {\n        try {\n            const user = await agent.User.current();\n            runInAction(() => {\n                this.user = user;\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        //==02\n        this.rootStore.presenceStore.stopHubConnection();\n        history.push('/')\n    }\n\n    @action register = async (values: IUserFormValues) => {\n\n        try {\n            await agent.User.register(values);\n            this.rootStore.modalStore.closeModal();\n            history.push(`/user/registerSuccess?email=${values.email}`);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    @action handleForgottenPassword = async (values: IUserFormValues) => {\n       \n        try {\n            await agent.User.handleForgottenPassword(values.email);\n            this.rootStore.modalStore.closeModal();\n            history.push(`/user/SendRequestResetPasswordSuccess?email=${values.email}`);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    @action resetPassword = async (token: string, email: string, password: string) => {\n\n        try {\n            await agent.User.resetPassword(token, email, password);\n            history.push(`/`);\n        } catch (error) {\n            throw error;\n        }\n    }\n}","import { IRateForumpost } from './../models/forumpost';\nimport { observable, action, computed, runInAction, reaction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IForumpost } from '../models/forumpost';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { IComment } from '../models/comment';\n\n// configure({ enforceActions: 'always' });\nconst LIMIT = 5;\n\nexport default class ForumPostStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    //==21.1==\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.forumPostRegistry.clear();\n        this.forumposts = [];\n        this.loadForumPosts();\n      }\n    )\n  }\n  @observable forumPostRegistry = new Map();\n  @observable forumposts: IForumpost[] = [];\n  @observable forumpost: IForumpost | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n  \n  \n  @observable rated = false;\n  @observable info: string = ''\n\n\n\n  @action setRated = async (status: boolean) => {\n    try {\n      runInAction('seting rated', () => {\n        this.rated = status;\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n\n  //delete?\n  // @observable target = '';\n  @observable.ref hubConnection: HubConnection | null = null;\n  @observable forumPostCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`)\n    this.predicate.forEach((value, key) => {\n      params.append(key, value)\n    })\n    return params;\n  }\n\n\n  @computed get totalPages() {\n    return Math.ceil(this.forumPostCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @action createHubConnection = (id: string, connectionArgument: string) => {//, motofy: IMotofy\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.forumpost!.commentForumPosts.push(comment);\n\n        this.forumpost!.commenters = this.reduceCommenters(this.forumpost!);\n\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      console.log(message)\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.forumpost!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    values.id = this.forumpost!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentForumPost', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @action setRating = async (forumpostId: string, value: string) => {\n   \n    const rate :IRateForumpost = {\n      id: forumpostId,\n      value: value,\n    }\n    try {\n      await agent.Forumposts.rate(rate);\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  @computed get forumpostsByDate() {\n    return this.formatForumpostsDate(\n      Array.from(this.forumPostRegistry.values())\n    );\n  }\n\n  formatForumpostsDate(forumposts: IForumpost[]) {\n \n    return Object.entries(\n        forumposts.reduce((forumposts, forumpost) => {\n        const date = forumpost.dateAdded.split('T')[0];\n\n        forumposts[date] = forumposts[date]\n          ? [...forumposts[date], forumpost]\n          : [forumpost];\n        return forumposts;\n      }, {} as { [key: string]: IForumpost[] })\n    );\n  }\n\n\n  summComments(forumpost: IForumpost) {\n    return forumpost.commentForumPosts.length;\n  }\n\n  reduceCommenters(forumpost: IForumpost) {\n\n\n    const result: IComment[] = [];\n    const map = new Map();\n    for (const item of forumpost.commentForumPosts) {\n      if (!map.has(item.username)) {\n        map.set(item.username, true)\n        result.push({\n          id: item.id,\n          createdAt: item.createdAt,\n          body: item.body,\n          username: item.username,\n          displayName: item.displayName,\n          image: item.image\n        })\n      }\n    }\n    return result;\n  }\n\n  @action loadForumPosts = async () => {\n    this.loadingInitial = true;\n    try {\n      const forumpostEnvelope = await agent.Forumposts.list(this.axiosParams);\n      const { forumposts, forumpostCount } = forumpostEnvelope;\n      runInAction('loading forumposts', () => {\n        forumposts.forEach((forumpost) => {\n          forumpost.numberOfComents = this.summComments(forumpost);\n          forumpost.commenters = this.reduceCommenters(forumpost);\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n          this.forumposts.push(forumpost)\n        });\n        this.forumPostCount = forumpostCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load forumposts error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadForumPost = async (id: string) => {\n    let forumpost = this.getForumPost(id);\n    if (forumpost) {\n      this.forumpost = forumpost;\n      return forumpost;\n    } else {\n      this.loadingInitial = true;\n      try {\n        forumpost = await agent.Forumposts.details(id);\n        runInAction('getting forumpost', () => {\n          forumpost.numberOfComents = this.summComments(forumpost);\n          forumpost.commenters = this.reduceCommenters(forumpost);\n          this.forumpost = forumpost;\n          //  console.log('forumpost in rating', forumpost);\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n          this.forumposts.push(forumpost);\n          this.loadingInitial = false;\n          this.forumpost = forumpost;\n        });\n      } catch (error) {\n        runInAction('get forumpost error', () => {\n          this.loadingInitial = false;\n          console.log(error);\n        });\n      }\n    }\n  };\n\n  @action clearForumPost = () => {\n    this.forumpost = null;\n  };\n\n  getForumPost = (id: string) => {\n    return this.forumPostRegistry.get(id);\n  };\n\n  @action createForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    forumpost.forumpostRatings = [];\n    try {\n      await agent.Forumposts.create(forumpost);\n      runInAction('creating forumposts', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        this.forumposts.push(forumpost);\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('create forumpost error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n  @action editForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    try {\n      await agent.Forumposts.update(forumpost);\n      runInAction('editing forumpost', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        this.forumpost = forumpost;\n        this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('edit forumpost error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action deleteForumpost = async (\n    id: string\n  ) => {\n    this.submitting = true;\n    try {\n      await agent.Forumposts.delete(id);\n      runInAction('deleting forumpost', () => {\n        this.forumPostRegistry.delete(id);\n        this.submitting = false;\n        // this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete forumpost error', () => {\n        this.submitting = false;\n        // this.target = '';\n      });\n      console.log(error);\n    }\n  };\n}\n","import { IUser } from './../models/user';\nimport { IMotofyScore, IRateMotofy } from './../models/motofy';\nimport { observable, action, runInAction, computed, reaction } from 'mobx';\nimport { IMotofy } from '../models/motofy';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createEmbracer, setMotofyProps } from '../common/util/util';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\n\n// configure({ enforceActions: 'always' });\nconst LIMIT = 2;\n\nexport default class MotofyStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.motofyRegistry.clear();\n        this.loadMotofies();\n      }\n    )\n\n  }\n\n  @observable motofyRegistry = new Map();\n\n  @observable motofy: IMotofy | null = null;\n\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @observable info: string = ''\n\n\n  @observable.ref hubConnection: HubConnection | null = null;\n  \n  @action createHubConnection = (id: string, connectionArgument: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.motofy!.commentMotofies.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      console.log(message)\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.motofy!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    console.log(values);\n    values.id = this.motofy!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentMotofy', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n\n  @observable mostEmbraced: any;\n  @computed get getMostEmbraced () {\n    return this.mostEmbraced;\n  }\n  @observable highestRatedMotofy: any;\n  @computed get getHighestRatedMotofy () {\n    return this.highestRatedMotofy;\n  }\n\n\n  // === PAGING ===\n  @observable motofyCount = 0;\n  @observable page = 0;\n\n  // === FILTERING ===\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string  ) => { \n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n\n  // === PAGING ===\n  @computed get totalPages() {\n    return Math.ceil(this.motofyCount / LIMIT);\n  }\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n\n  @computed get motofiesByDate() {\n    return Array.from(this.motofyRegistry.values()).sort(\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\n    );\n  }\n\n  @action loadMotofies = async () => {\n    this.loadingInitial = true;\n    try {\n      \n      const motofiesEnvelope = await agent.Motofies.list(this.axiosParams);\n\n      const { motofies, motofyCount, mostEmbraced, highestRatedMotofy} = motofiesEnvelope;\n      runInAction('loading motofies', () => {\n        this.mostEmbraced = mostEmbraced;\n        this.highestRatedMotofy = highestRatedMotofy;\n\n        motofies.forEach((motofy) => {\n          motofy.datePublished = motofy.datePublished?.split('T')[0];\n          // === Util Class ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofyRegistry.set(motofy.id, motofy);\n        });\n        this.motofyCount = motofyCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMotofy = async (id: string) => {\n    let motofy = this.getMotofy(id);\n    if (motofy) {\n      this.motofy = motofy;\n      // //test\n      return motofy;\n    } else {\n      this.loadingInitial = true;\n      try {\n        motofy = await agent.Motofies.details(id);\n        runInAction('getting motofy', () => {\n          // === why not using date here??? ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofy = motofy;\n          this.motofyRegistry.set(motofy.id, motofy);\n          this.loadingInitial = false;\n        });\n        return motofy;\n      } catch (error) {\n        runInAction('get motofy error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action rateMotofy = async (rating: string | number | undefined, motofy: IMotofy, user: IUser | null) => {\n    let newRating: IRateMotofy = {\n      id: motofy.id,\n      score: rating\n    }\n    let newScore: IMotofyScore = {\n      username: user?.userName,\n      displayName: user?.displayName,\n      score: rating,\n    };\n    try {\n      await agent.Motofies.rate(motofy.id, newRating)\n      runInAction('rating motofy', () => {\n        // this.motofy = motofy;\n        motofy.motofyScores.push(newScore);\n        this.motofyRegistry.set(motofy.id, motofy);\n        \n      })\n    } catch (error) {\n      runInAction('rating motofy error', () => {\n        console.log(error);\n      });\n    }\n  };\n\n  getMotofy = (id: string) => {\n    return this.motofyRegistry.get(id);\n  };\n\n  @action editMotofy = async (motofy: IMotofy) => {\n    this.submitting = true;\n    try {\n      await agent.Motofies.update(motofy);\n      runInAction('editing motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);\n        this.motofy = motofy;\n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction('edit motofy error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n  @action createMotofy = async (motofy: IMotofy) => {\n    \n    this.submitting = true;\n    try {\n      await agent.Motofies.create(motofy);\n      const embracer = createEmbracer(this.rootStore.userStore.user!);\n      embracer.isOwner = true;\n      let embracers = [];\n      embracers.push(embracer);\n      motofy.embracers = embracers;\n      motofy.isOwner = true;\n      runInAction('create motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);   \n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction(() => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n\n  @action deleteMotofy = async (id: string) => {\n      this.submitting = true;\n      console.log('this.motofyRegistry out of try', this.motofyRegistry)\n\n      try {\n      await agent.Motofies.delete(id);\n      runInAction('deleting Motofy', () => {\n        this.motofyRegistry.delete(id);\n        \n        console.log('this.motofyRegistry', this.motofyRegistry)\n\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete motofy error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action embraceMotofy = async (id: string) => {\n    const embracer = createEmbracer(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n\n      await agent.Motofies.embrace(id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers.push(embracer);\n          this.motofy.embraced = true;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n          this.loading = false;\n        }\n      });\n      \n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n  @action unembraceMotofy = async (id: string) => {\n    this.loading = true;\n    try {\n      await agent.Motofies.unembrace(id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers = this.motofy.embracers.filter(\n            (a) => a.username !== this.rootStore.userStore.user!.userName\n          );\n          this.motofy.embraced = false;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n        }\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n}\n\n","import { IMechanicCustomer, IMechanicCustomerToBecome, IMechanicRate, IMechanicRecommend, IRating } from './../models/mechanic';//IMechanicId, \nimport { action, observable, computed, runInAction, reaction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IMechanic } from '../models/mechanic';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { v4 as uuid } from \"uuid\";\n\n\n\nconst LIMIT = 3;\n\n\nexport default class MechanicStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.mechanicRegistry.clear();\n        this.loadMechanics();\n      }\n    )\n  }\n\n  @observable mechanicRegistry = new Map();\n  @observable mechanic: IMechanic | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable.ref hubConnection: HubConnection | null = null;\n\n\n  @observable mechanicCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @observable info: string = ''\n\n\n  @action setPredicate = (predicate: string, value: string  ) => { \n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n  @observable isCustomer: boolean;\n  @observable openCustomerForm: boolean = false;\n  @observable confirmCustomer: boolean = false;\n\n\n\n\n  @computed get totalPages() {\n    return Math.ceil(this.mechanicCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @action setOpenCustomerForm = () => {\n    try {\n\n      runInAction('open form', () => {\n        this.openCustomerForm = !this.openCustomerForm;\n      })\n    } catch (error) {\n\n    }\n  }\n  @action setCloseCustomerForm = () => {\n    try {\n\n      runInAction('open form', () => {\n        this.openCustomerForm = false;\n      })\n    } catch (error) {\n\n    }\n  }\n\n  @action createHubConnection = (id: string, connectionArgument: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.mechanic!.commentMechanics.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      console.log(message)\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.mechanic!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .then(() => this.clearMechanic())\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    console.log(values);\n    values.id = this.mechanic!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentMechanic', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @computed get mechanicsByDate() {\n    return Array.from(this.mechanicRegistry.values())\n  }\n\n  @action setCustomer = async (status: boolean) => {\n    try {\n      runInAction('seting customer', () => {\n        this.isCustomer = status;\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  // @action setCancelCustomer = async (status: boolean) => {\n  //   try {\n  //     runInAction('seting customer', () => {\n  //       this.hasNotCancelledCustomer = false;\n  //       this.isCustomer = false;\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  @action clearMechanic = async () => {\n    this.mechanic = null;\n  }\n\n  \n\n  @action loadMechanics = async () => {\n\n  \n    this.loadingInitial = true;\n    try {\n      const mechanicsEnvelope = await agent.Mechanics.list(this.axiosParams);\n\n      const { mechanics, mechanicCount } = mechanicsEnvelope;\n      \n\n      runInAction('loading mechanics', () => {\n        mechanics.forEach((mechanic) => {\n          mechanic.datePublished = mechanic.datePublished?.split('T')[0];\n          this.mechanicRegistry.set(mechanic.id, mechanic);\n        });\n        this.mechanicCount = mechanicCount;\n\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load mechanics error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMechanic = async (id: string) => {\n    let mechanic = this.getMechanic(id);\n    if (mechanic) {\n      this.mechanic = mechanic;\n      return mechanic;\n    } else {\n      this.loadingInitial = true;\n      try {\n        mechanic = await agent.Mechanics.details(id);\n        runInAction('getting mechanic', () => {\n          this.mechanic = mechanic;\n          this.mechanicRegistry.set(mechanic.id, mechanic);\n\n          this.loadingInitial = false;\n        });\n        return mechanic;\n      } catch (error) {\n        runInAction('get mechanic error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  getMechanic = (id: string) => {\n    return this.mechanicRegistry.get(id);\n  };\n\n  @action createMechanic = async (mechanic: IMechanic) => {\n\n    this.submitting = true;\n    try {\n      await agent.Mechanics.create(mechanic);\n      runInAction('creating mechanics', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action editMechanic = async (mechanic: IMechanic) => {\n    this.submitting = true;\n    if (mechanic.email === null) mechanic.email = 'Not assigned email';\n    if (mechanic.website === null) mechanic.website = 'Not assigned website';\n    mechanic.country = mechanic.countryName;\n    console.log(mechanic);\n\n    try {\n      await agent.Mechanics.update(mechanic);\n      runInAction('creating mechanic', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.mechanic = mechanic;\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteMechanic = async (id: string) => {\n    this.submitting = true;\n    try {\n      await agent.Mechanics.delete(id);\n      runInAction('deleting mechanic', () => {\n        this.mechanicRegistry.delete(id);\n\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete mechanic error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action becomeCustomer = async (id: string, user: any, hasRecommended: string) => {\n    let customerRecommended: boolean;\n    hasRecommended === '0' ? customerRecommended = false : customerRecommended = true;\n\n    let customerToApi: IMechanicCustomerToBecome = {\n\n      mechanicId: id,\n      isCustomer: true\n    }\n    let customerForClient: IMechanicCustomer = {\n      username: user.userName,\n      displayName: user.displayName,\n      image: user.image,\n      isCustomer: true,\n      isOwner: false,\n      customerRecommended: customerRecommended,\n    }\n    try {\n      await agent.Mechanics.becomecustomer(customerToApi);\n      runInAction('become a customer', () => {\n        this.isCustomer = true;\n        this.mechanic?.customers.push(customerForClient);\n\n\n      })\n    } catch (error) {\n      console.log('error', error);\n    }\n    toast.info(\"You became a customer of the shop!\");\n  };\n\n  @action recommend = async (mechanicId: string, username: string | undefined, isRecommended: string) => {\n\n    let mechanicRecomend: IMechanicRecommend = {\n      mechanicId: mechanicId,\n      isRecommended: isRecommended\n    }\n    try {\n      await agent.Mechanics.recommend(mechanicRecomend);\n      runInAction('recommending a mechanic', () => {\n\n        if (isRecommended === '1') {\n          this.mechanic!.customers.find(x => x.username === username)!.customerRecommended = true;\n        }\n        else {\n          this.mechanic!.customers.find(x => x.username === username)!.customerRecommended = false;\n        }\n\n\n      });\n      toast.info(\"You recommended this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  @action rate = async (id: string, score: string, user: any) => {\n    let rateMechanic: IMechanicRate = {\n      id: id,\n      score: score,\n    }\n    let addRating: IRating = {\n      username: user.userName,\n      displayName: user.displayName,\n      score: score\n    }\n    try {\n      await agent.Mechanics.rate(rateMechanic);\n      runInAction('recommending a mechanic', () => {\n        // this.hasRated = true;\n        this.mechanic?.ratings.push(addRating)\n        console.log(this.mechanic!.ratings);\n      });\n      toast.info(\"You rated this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  @action addTestimonial = async (mechanicId: string, text: string, user: any) => {\n    let testimonial = {\n      mechanicId: mechanicId,\n      text: text,\n    }\n    let testimonialToUI = {\n      id: uuid(),\n      text: text,\n      dateAdded: new Date().toString()\n    }\n    try {\n      await agent.Mechanics.addtestimonial(testimonial);\n\n      runInAction('adding a testimonial to a mechanic', () => {\n\n        this.mechanic!.customers.find(x => x.username === user.userName)!.testimonial = testimonialToUI;\n      });\n      toast.info(\"You added a testimonial this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n}\n\n","import { action, observable,  runInAction } from 'mobx';//computed,\n\nimport agent from '../api/agent';\nimport {  IBrand } from '../models/brand'; //BrandFormValues,\nimport { RootStore } from './rootStore';\n\n//==non of which is actually in use before the admin panel!!!!!!!!!==\n\nexport default class BrandStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  // @observable brandRegistry = new Map();\n\n  @observable brands: IBrand[] = [];\n  // @observable brandToSelect: BrandFormValues[] = [];\n  @observable brand: IBrand | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n\n  // @observable target = '';\n\n  @action loadBrandsToSelect = async () => {\n    this.loadingInitial = true;\n    try {\n      const brands = await agent.Brands.list();\n      runInAction('loading brands', () => {\n        this.brands = brands;\n        // console.log('brands', brands);\n      })\n    } catch (error) {\n      runInAction('load brands error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  }\n\n  //==FOLLOWING IS ONLY GOING TO BE NEEDED FOR THE ADMIN PANEL===\n  // @action loadBrands = async () => {\n  //   this.loadingInitial = true;\n  //   try {\n  //     const brands = await agent.Brands.list();\n  //     runInAction('loading brands', () => {\n  //       // brands.forEach((brand) => {\n\n  //       //   //not sure if it has T as a separator // and do I need it??\n  //       //   // brand.dateOfEstablishment = brand.dateOfEstablishment?.split('T')[1];\n  //       //   //test (still need it)\n  //       // //  console.log('brand', brand.name ); \n\n  //       // //  this.brands.push(brand); // === refactor for map\n  //       // //  this.brandRegistry.set(brand.id, brand.name);\n  //       // });\n  //       console.log('brands', brands ); \n  //       //test (still need it)\n  //       // console.log('this.brandRegistry', this.brandRegistry ); \n  //       // this.brandRegistry.forEach()\n  //       // return this.brandRegistry;\n  //       this.loadingInitial = false;\n  //       return this.brands;\n  //     });\n  //   } catch (error) {\n  //     runInAction('load brands error', () => {\n  //       this.loadingInitial = false;\n  //     });\n  //     console.log(error);\n  //   }\n  // };\n\n  //??--is really needed\n  // @action loadBrand = async (id: string) => {\n  //   let brand = this.getBrand(id);\n  //   if (brand) {\n  //     this.brand = brand;\n  //     return brand;\n  //   } else {\n  //     this.loadingInitial = true;\n  //     try {\n  //       brand = await agent.Brands.details(id);\n  //       runInAction('getting brand', () => {\n  //         this.brand = brand;\n  //         this.loadingInitial = false;\n  //       });\n  //       return brand;\n  //     } catch (error) {\n  //       runInAction('get brand error', () => {\n  //         this.loadingInitial = false;\n  //       });\n  //       console.log(error);\n  //     }\n  //   }\n  // };\n\n  // @action clearBrand = () => {\n  //   this.brand = null;\n  // }\n\n  // getBrand = (id: string) => {\n  //   return this.brandRegistry.get(id);\n  // };\n\n  // @action createBrand = async (brand: IBrand) => {\n  //   this.submitting = true;\n  //   try {\n  //     await agent.Brands.create(brand);\n  //     runInAction('creating brands', () => {\n  //       this.brandRegistry.set(brand.id, brand);\n  //       this.editMode = false;\n  //       this.submitting = false;\n  //     });\n  //     history.push(`/brands/${brand.id}`)\n  //   } catch (error) {\n  //     runInAction('create brand error', () => {\n  //       this.submitting = false;\n  //     });\n  //     toast.error('Problem submitting data');\n  //     // console.log(error.response);\n  //   }\n  // };\n\n  // //LATER!!!\n  // @action editbrand = async (brand: IBrand) => {\n  //   this.submitting = true;\n  //   try {\n  //     // console.log('brand', brand);\n  //     await agent.Brands.update(brand);\n  //     runInAction('creating brand', () => {\n  //       this.brandRegistry.set(brand.id, brand);\n  //       this.brand = brand;\n  //       this.editMode = false;\n  //       this.submitting = false;\n  //     });\n  //     history.push(`/brands/${brand.id}`)\n  //   } catch (error) {\n  //     runInAction('create brand error', () => {\n  //       this.submitting = false;\n  //     });\n  //     toast.error('Problem submitting data');\n  //     // console.log(error.response);\n  //   }\n  // };\n\n  //         //LATER!!!\n  // @action deleteBrand = async (\n  //   event: SyntheticEvent<HTMLButtonElement>,\n  //   id: string\n  // ) => {\n  //   this.submitting = true;\n  //   this.target = event.currentTarget.name;\n  //   try {\n  //     await agent.Brands.delete(id);\n  //     runInAction('deleting brand', () => {\n  //       this.brandRegistry.delete(id);\n  //       this.submitting = false;\n  //       this.target = '';\n  //     });\n  //   } catch (error) {\n  //     runInAction('delete brand error', () => {\n  //       this.submitting = false;\n  //       this.target = '';\n  //     });\n  //     console.log(error);\n  //   }\n  // };\n\n  // @action openCreateForm = () => {\n  //   this.editMode = true;\n  //   this.brand = null;\n  // };\n  // @action openEditForm = (id: string) => {\n  //   this.brand = this.brandRegistry.get(id);\n  //   // console.log(this.brand?.yearOfStart);\n  //   this.editMode = true;\n  // };\n  // @action cancelSelectedBrand = () => {\n  //   this.brand = null;\n  // };\n  // @action cancelFormOpen = () => {\n  //   this.editMode = false;\n  //   // TODO: GO BACK WHEREVER YOU WERE\n  // };\n\n  // @action selectBrand = (id: string) => {\n  //   // this.selectedbrand = this.brands.find(m => m.id === id); // === refactor for map\n  //   this.brand = this.brandRegistry.get(id);\n  //   this.editMode = false;\n  // };\n}","import { IProductViewer } from './../models/product';\nimport { IProduct } from '../models/product';\nimport { observable, action, computed, runInAction, reaction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\nconst LIMIT = 12;\n\nexport default class ProductStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.productRegistry.clear();\n        this.loadProducts();\n      }\n    )\n  }\n  //--in use--\n  @observable loadingInitial = false;\n  @observable productRegistry = new Map();\n  @observable products: IProduct[] = [];\n  @observable product: IProduct | null = null;\n\n  @observable productCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n  @observable info: string = ''\n\n  @observable productFollowed = false;\n\n\n  @action setPredicate = (predicate: string, value: string) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      params.append(key, value)\n    })\n    return params;\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.productCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n  //--probably will be--\n  @observable submitting = false;\n\n  @observable target = '';\n\n  @computed get productsByDate() {\n    return Array.from(this.productRegistry.values())\n\n  }\n\n  @action loadProducts = async () => {\n    this.loadingInitial = true;\n\n    try {\n      const productEnvelope = await agent.Products.list(this.axiosParams);\n      // console.log('loadProducts::', this.axiosParams)\n\n      const { products, productCount } = productEnvelope\n      // console.log('loadProducts::', products)\n      runInAction('loading products', () => {\n        products.forEach((product) => {\n\n          this.productRegistry.set(product.id, product);\n          // console.log('product:::', product);\n        });\n        // console.log('products', products);\n        this.productCount = productCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load products error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n\n\n  //--in use--\n  @action loadProduct = async (id: string) => {\n    let product = this.getProduct(id);\n    if (product) {\n      this.product = product;\n      return product;\n    } else {\n      this.loadingInitial = true;\n      try {\n        product = await agent.Products.details(id);\n        runInAction('getting product', () => {\n          this.product = product;\n          this.productRegistry.set(product.id, product);\n          this.loadingInitial = false;\n          this.product = product;\n          // console.log('product:::', toJS(product));\n        });\n        return product;\n      } catch (error) {\n        runInAction('get product error', () => {\n          this.loadingInitial = false;\n          console.log(error);\n        });\n      }\n    }\n  };\n\n  //--in use--\n  getProduct = (id: string) => {\n    return this.productRegistry.get(id);\n  };\n\n\n  @action createProduct = async (product: IProduct) => {\n    this.submitting = true;\n    try {\n      await agent.Products.create(product);\n      runInAction('creating product', () => {\n        product.viewers = [];\n        this.productRegistry.set(product.id, product);\n        this.submitting = false;\n      });\n      history.push(`/product/${product.id}`)\n    } catch (error) {\n      runInAction('create product error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n    }\n  };\n\n  @action editProduct = async (product: IProduct) => {\n    this.submitting = true;\n    try {\n      await agent.Products.update(product);\n      runInAction('editing product', () => {\n        this.productRegistry.set(product.id, product);\n        this.product = product;\n        this.submitting = false;\n      });\n      history.push(`/product/${product.id}`)\n    } catch (error) {\n      runInAction('create product error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteProduct = async (\n    id: string\n  ) => {\n    this.submitting = true;\n    try {\n      await agent.Products.delete(id);\n      runInAction('deleting product', () => {\n        this.productRegistry.delete(id);\n        // console.log('this.productRegistry', this.productRegistry)\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete product error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action visitCounter = async (id: string) => {\n    try {\n      await agent.Products.visitCounter(id);\n      runInAction('Increasing the number seen counter', () => {\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  @action markSold = async (id: string, product: IProduct) => {\n    try {\n      await agent.Products.markSold(id);\n      runInAction('Marking the product sold', () => {\n        product.isSold = true;\n        toast.info('This product is marked as sold!');\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  @action toogleActivate = async (id: string, product: IProduct) => {\n    try {\n      await agent.Products.toogleActivate(id);\n      runInAction('Marking the product sold', () => {\n        product.isActive = true;//!this.product?.isActive;\n        toast.info('This product is activated!');\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  @action setProductFollowed = async () => {\n    runInAction(() => {\n      this.productFollowed = !this.productFollowed;\n    })\n  }\n  @action followProduct = async (id: string, userName: string, displayName: string) => {\n    // console.log(\"id i\", id);\n\n    let product: IProduct = this.getProduct(id);\n    let productViewer: IProductViewer = {\n      username: userName,\n      displayName: displayName,\n    }\n    product.viewers.push(productViewer)\n    try {\n      await agent.Products.follow(id);\n      runInAction('following product', () => {\n        this.productRegistry.set(product.id, product);\n        this.productFollowed = true;\n      });\n    } catch (error) {\n\n      console.log(error);\n    }\n  };\n  @action unfollowProduct = async (id: string) => {\n    // console.log(\"id unfollow\", id);\n\n    let product: IProduct = this.getProduct(id);\n\n    try {\n      await agent.Products.unfollow(id);\n      runInAction('following product', () => {\n        this.productRegistry.set(product.id, product);\n        this.productFollowed = false;\n      });\n    } catch (error) {\n\n      console.log(error);\n    }\n  };\n\n}\n\n","import { observable, action, runInAction } from 'mobx';//, computed, reaction\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { IMotofy } from '../models/motofy';\nimport { toast } from 'react-toastify';\n\n//THIS IS TO BE SOLVED SO THAT IT IS GENERIC AS MUCH AS POSSIBLE!!!\n\nexport default class CommentStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n      this.rootStore = rootStore;\n    }\n    @observable motofy: IMotofy | null = null;\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @action createHubConnection = (motofyId: string, connectionArgument: string, motofy: IMotofy) => {\n        this.motofy = motofy;\n        this.hubConnection = new HubConnectionBuilder()\n          .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n            accessTokenFactory: () => this.rootStore.commonStore.token!,\n          })\n          .configureLogging(LogLevel.Information)\n          .build();\n    \n        this.hubConnection\n          .start()\n          .then(() => console.log(this.hubConnection!.state))\n          .then(() => {\n            // console.log('Attempting to join group');\n            if (this.hubConnection!.state === 'Connected') {\n              this.hubConnection?.invoke('AddToGroup', motofyId);\n            }\n          })\n          .catch((error) => console.log('Error establishing connection', error));\n    \n        this.hubConnection.on(connectionArgument, (comment) => {\n          runInAction(() => {\n            this.motofy!.commentMotofies.push(comment);\n          });\n        });\n    \n        this.hubConnection.on('Send', (message) => {\n          toast.info(message);\n        });\n      };\n    \n      @action stopHubConnection = () => {\n        this.hubConnection\n          ?.invoke('RemoveFromGroup', this.motofy!.id)\n          .then(() => {\n            this.hubConnection?.stop();\n          })\n          .then(() => console.log('Connection stopped!'))\n          .catch(error => console.log(error));\n      };\n    \n      @action addComment = async (values: any) => {\n        console.log(values);\n        values.motofyId = this.motofy!.id;\n        try {\n          await this.hubConnection!.invoke('SendCommentMotofy', values);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n}","import { action, observable, runInAction } from 'mobx';//computed,\n// import { SyntheticEvent } from 'react';\n// import { history } from '../..';\nimport agent from '../api/agent';\nimport { ICountry } from '../models/country'; //BrandFormValues,\n// import { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\n//==non of which is actually in use before the admin panel!!!!!!!!!==\n\nexport default class CountryStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n    @observable brandRegistry = new Map();\n\n    @observable countries: ICountry[] = [];\n    // @observable brandToSelect: BrandFormValues[] = [];\n    // @observable brand: ICountry | null = null;\n    @observable loadingInitial = false;\n    // @observable editMode = false;\n    // @observable submitting = false;\n\n    // @observable target = '';\n\n\n\n\n    @action loadCountriesToSelect = async () => {\n        this.loadingInitial = true;\n        try {\n            const countries = await agent.Countries.list();\n            runInAction('loading brands', () => {\n                this.countries = countries;\n                // console.log('countries', countries);\n            })\n        } catch (error) {\n            runInAction('load countries error', () => {\n                this.loadingInitial = false;\n\n            });\n            console.log(error);\n        }\n    }\n\n    // @action cleanCountries = async () => {\n    //     runInAction('cleaning countries', () => {\n    //         this.countries = [];\n    //     })\n    // }\n\n\n\n    // @action clearBrand = () => {\n    //     this.brand = null;\n    // }\n\n    // getBrand = (id: string) => {\n    //     return this.brandRegistry.get(id);\n    // };\n\n    // @action createBrand = async (brand: IBrand) => {\n    //     this.submitting = true;\n    //     try {\n    //         await agent.Brands.create(brand);\n    //         runInAction('creating brands', () => {\n    //             this.brandRegistry.set(brand.id, brand);\n    //             this.editMode = false;\n    //             this.submitting = false;\n    //         });\n    //         history.push(`/brands/${brand.id}`)\n    //     } catch (error) {\n    //         runInAction('create brand error', () => {\n    //             this.submitting = false;\n    //         });\n    //         toast.error('Problem submitting data');\n    //         // console.log(error.response);\n    //     }\n    // };\n}","import { IFeedsToMarkSeen } from './../models/feed';\nimport { action, computed, observable, runInAction } from 'mobx';\nimport { toast } from 'react-toastify';\n\n\nimport agent from '../api/agent';\nimport { IFeed } from '../models/feed';\nimport { RootStore } from './rootStore';\nimport { HttpTransportType, HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\n\nconst LIMIT = 7;\n\nexport default class FeedStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  @observable feedRegistry = new Map();\n\n  @observable feeds: IFeed[] = [];\n  @observable feedCount: number = 0;\n  @observable page: number = 0;\n\n  @observable loadingInitial = false;\n  @observable feedMounted = false;\n  // @observable key = 0;  \n\n  @observable.ref hubConnection: HubConnection | null = null;\n\n  @action createHubConnection = () => {\n    this.hubConnection = new HubConnectionBuilder()\n      // .withUrl(process.env.REACT_APP_API_FEED_URL! + '?user=' + otherUsername, {\n      .withUrl(process.env.REACT_APP_API_FEED_URL!, {\n        skipNegotiation: true,\n        transport: HttpTransportType.WebSockets,\n        accessTokenFactory: () => this.rootStore.commonStore.token!\n\n      })\n      .withAutomaticReconnect()\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .catch(error => console.log('Error establishing connection: ', error));\n\n    this.hubConnection.on('SendFeed', (feed: IFeed) => {\n      // console.log(\"feed: \", feed)\n      runInAction(() => {\n        this.feedRegistry.set(feed.id, feed);\n      });\n    })\n\n\n  }\n\n  @action stopHubConnection = () => {\n\n    this.hubConnection?.stop();\n  }\n  @action setFeedMounted = () => {\n\n    this.feedMounted = true;\n  }\n  @action setFeedUnmounted = () => {\n\n    this.feedMounted = false;\n  }\n\n\n\n  @computed get totalPages() {\n    return Math.ceil(this.feedCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @computed get feedByDate() {\n    return this.groupFeedItemsByDate(Array.from(this.feedRegistry.values()));\n  }\n\n  @computed get unseenFeedItems() {\n    return this.countUnseenItems(Array.from(this.feedRegistry.values()));\n  }\n\n  countUnseenItems(feeds: IFeed[]) {\n    let count = 0;\n    for (var i = 0, len = feeds.length; i < len; i++) {\n      if (feeds[i].isSeen === false)\n        count++;\n    }\n    return count\n  }\n\n  groupFeedItemsByDate(feeds: IFeed[]) {\n    const sortedFeeds = feeds.sort(\n      (a, b) => Date.parse(b.dateTriggered!) - Date.parse(a.dateTriggered!)\n    )\n    return Object.entries(\n      sortedFeeds.reduce((feeds, feed) => {\n        const date = feed.dateTriggered?.split('T')[0];\n        feeds[date!] = feeds[date!]\n          ? [...feeds[date!], feed]\n          : [feed];\n        return feeds;\n\n      }, {} as { [key: string]: IFeed[] }));\n  }\n\n  formatDate(feed: IFeed) {\n    const delimiter = '.';\n    feed.dateTriggered = feed.dateTriggered?.split(delimiter)[0];\n    feed.dateTriggered = feed.dateTriggered?.replace('T', ' ');\n  }\n\n  @action addFeedItem = async (id: string, info: string, username?: string) => {\n\n    try {\n      await agent.Feed.addFeedItem(id, info, username);\n      toast.info('Successfully ' + info);\n    } catch (error) {\n      console.log(error);\n      toast.error('Problem ' + info);\n\n    }\n  }\n\n\n  @action markSeenInDB = async (ids: any) => {\n    let idsToSend: IFeedsToMarkSeen = ids;\n    try {\n      await agent.Feed.markSeenInDB(idsToSend)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  @action loadFeed = async () => {\n    this.loadingInitial = true;\n    try {\n      const feedEnvelope = await agent.Feed.list(LIMIT, this.page);\n      const { feeds, feedCount } = feedEnvelope;\n      runInAction('loading feed', () => {\n        feeds.forEach((feed) => {\n          this.formatDate(feed);\n          this.feedRegistry.set(feed.id, feed);\n\n        });\n        this.feedCount = feedCount;\n        this.loadingInitial = false;\n\n      })\n    } catch (error) {\n      runInAction('load countries error', () => {\n        this.loadingInitial = false;\n\n      });\n      console.log(error);\n    }\n  }\n\n}\n","import { action, computed, observable, reaction, runInAction } from 'mobx';\n\nimport agent from '../api/agent';\nimport {  IProfile } from '../models/profile';\nimport { RootStore } from './rootStore';\nimport { v4 as uuid } from \"uuid\";\nimport { toast } from 'react-toastify';\n\nconst LIMIT = 8;\n\n\nexport default class PeopleStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n        () => this.predicate.keys(),\n        () => {\n          this.page = 0;\n          this.peopleRegistry.clear();\n          this.loadPeople();\n        }\n      )\n  }\n\n  @observable loadingPeople = false;\n  @observable people: IProfile[] = [];\n  @observable peopleCount: number;\n  @observable peopleRegistry = new Map();\n\n\n  @observable page: number = 0;\n\n  @computed get totalPages() {\n    return Math.ceil(this.peopleCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @observable predicate = new Map();\n//   @observable searchString = '';\n\n  @action setPredicate = (predicate: string, value: string  ) => { //| Date\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n \n    }\n  }\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n\n  @computed get displayPeople () {\n    return Array.from(this.peopleRegistry.values());\n  } \n\n  @action cleanPeople = async () => {\n    runInAction(() => {\n      this.peopleRegistry.clear();\n      this.page = 0;\n    })\n  }\n  @action loadPeople = async () => {\n\n    this.loadingPeople = true;\n    try {\n      const peopleEnvelope = await agent.Profiles.listPeople(this.axiosParams);\n      const { people, peopleCount } = peopleEnvelope;\n      runInAction(() => {\n        this.loadingPeople = false;\n        people.forEach(person => {\n          person.id = uuid()\n          this.peopleRegistry.set(person.id, person);\n        })\n        this.peopleCount = peopleCount;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingPeople = false;\n      })\n      toast.error('Problem loading members');\n    }\n  }\n\n}\n","import { IPrivateMessageToDelete, IPrivateMessageToEdit } from './../models/privatemessages';\nimport { HttpTransportType, HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { observable, action, computed, runInAction } from 'mobx';\nimport { history } from '../..';\n\nimport agent from '../api/agent';\nimport { RootStore } from './rootStore';\nimport { IPrivateMessage } from '../models/privatemessages';\n\n\nconst LIMIT = 10;\n\nexport default class PrivateMessageStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n    }\n\n    @observable username: string = '';\n    @observable senderPhotoUrl: string;\n\n    @observable messageRegistry = new Map();\n    @observable loadingInitial = false;\n    @observable recipientUsername: any = '';\n\n    @observable messageThreadId: string;\n    @observable messageContent: string;\n\n    @observable messageThreadsCount = 0;\n    @observable page = 0;\n    @observable totalPages = 0;\n\n\n    @observable listOfMessagesInFocus: [string, IPrivateMessage[]] | undefined = undefined;\n    @observable index: number;\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @observable otherUser: string = '';\n\n    @action setOtherUser = async (otherUser: string) => {\n        runInAction(() => {\n            this.otherUser = otherUser;\n        })\n    }\n    @action cleanOtherUser = () => {\n        runInAction(() => {\n            this.otherUser = '';\n        })\n    }\n\n    @computed get messagesByThreadId() {\n        return this.groupMessagesByThreadId(Array.from(this.messageRegistry.values()));\n    }\n\n    groupMessagesByThreadId(messages: IPrivateMessage[]) {\n        const sortedMessages = messages.sort(\n            (a, b) => Date.parse(b.dateSent) - Date.parse(a.dateSent)\n        )\n        return Object.entries(sortedMessages.reduce((messages, message) => {\n            const threadId = message.privateMessageThreadId;\n            messages[threadId] = messages[threadId] ? [...messages[threadId], message] : [message];\n            return messages;\n        }, {} as { [key: string]: IPrivateMessage[] }));\n    }\n\n    @action createHubConnection = ( otherUsername: string) => {//messageThreadId: string\n        this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_API_MESSAGE_URL! + '?user=' + otherUsername, {\n                skipNegotiation: true,\n                transport: HttpTransportType.WebSockets,\n                accessTokenFactory: () => this.rootStore.commonStore.token!\n\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        this.hubConnection\n            .start()\n            .catch(error => console.log('Error establishing connection: ', error));\n\n        this.hubConnection.on('ReceiveMessage', message => {\n\n            runInAction(() => {\n                this.messageRegistry.set(message.id, message);\n\n            });\n            this.setViewUponNewMessage(message.privateMessageThreadId)\n        })\n        this.hubConnection.on('MessageDeleted', (messageToDelete: IPrivateMessageToDelete) => {\n\n            runInAction(() => {\n                this.messageRegistry.delete(messageToDelete.id);\n            })\n            this.setView(messageToDelete.privateMessageThreadId)\n        })\n\n\n        this.hubConnection.on('MessageEdited', (messageToEdit: IPrivateMessageToEdit) => {\n\n            this.resetViewAfterEdit(messageToEdit);\n        })\n\n    }\n\n    @action stopHubConnection = () => {\n\n        this.hubConnection?.stop();\n    }\n\n    @action addReply = async () => {\n\n        let messageToSend = {\n            recipientUsername: this.recipientUsername,\n            content: this.messageContent,\n            privateMessageThreadId: this.messageThreadId,\n            username: this.username\n        }\n\n        try {\n            await this.hubConnection!.invoke('SendMessage', messageToSend);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    @action deleteSingleMessage = async (id: string, privateMessageThreadId: string, recipientUsername: string) => {\n\n        let messageToSend = {\n            id,\n            privateMessageThreadId,\n            recipientUsername\n        }\n        try {\n            await this.hubConnection!.invoke('DeleteMessage', messageToSend)\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    @action editMessage = async (id: string, privateMessageThreadId: string, content: string, recipientUsername: string, senderPhotoUrl: string) => {\n        \n        let messageToEdit = {\n            id,\n            privateMessageThreadId,\n            content,\n            recipientUsername,\n            senderPhotoUrl\n        }\n        try {\n            await this.hubConnection!.invoke('EditMessage', messageToEdit)\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    @action loadMessages = async () => {\n        this.loadingInitial = true;\n        try {\n\n            const messagesEnvelope = await agent.PrivateMessages.list(LIMIT, this.page);\n            const { privateMessages, privateMessageThreadsCount, totalPages } = messagesEnvelope;\n            runInAction('loading messages', () => {\n                privateMessages.forEach((message) => {\n                    this.formatDate(message);\n                    this.messageRegistry.set(message.id, message);\n                });\n                this.messageThreadsCount = privateMessageThreadsCount;\n\n                this.totalPages = totalPages;\n                this.loadingInitial = false;\n            });\n        } catch (error) {\n            runInAction('load messages error', () => {\n                this.loadingInitial = false;\n            });\n            console.log(error);\n        }\n    };\n    @action setPage = (page: number) => {\n        this.page = page;\n    }\n\n\n    @action setInitialView = () => {\n        runInAction(() => {\n\n            this.listOfMessagesInFocus = this.messagesByThreadId[0]\n        })\n    }\n\n    @action setView = (id?: string) => {\n\n        runInAction(() => {\n            this.index = this.messagesByThreadId.findIndex(m => m[0] === id);\n            this.listOfMessagesInFocus = this.messagesByThreadId[this.index];\n        })\n        return this.listOfMessagesInFocus;\n    }\n    @action setViewUponNewMessage = (id?: string) => {\n\n        this.index = this.messagesByThreadId.findIndex(m => m[0] === id);\n\n        runInAction(() => {\n            if(this.listOfMessagesInFocus![0] === id){\n                this.listOfMessagesInFocus = this.messagesByThreadId[this.index];\n            }\n        })\n    }\n\n\n    private resetViewAfterEdit(messageToEdit: IPrivateMessageToEdit) {\n        runInAction(() => {\n            var index = this.listOfMessagesInFocus![1].findIndex(m => m.id === messageToEdit.id);\n            this.listOfMessagesInFocus![1][index].content = messageToEdit.content;\n        });\n    }\n\n    private formatDate(message: IPrivateMessage) {\n        const delimiter = '.';\n        message.dateSent = message.dateSent?.split(delimiter)[0];\n        message.dateSent = message.dateSent.replace('T', ' ');\n    }\n\n    @action markReadInDB = async (id: string) => {\n        try {\n            await agent.PrivateMessages.markRead(id);\n            runInAction(() => {\n                this.listOfMessagesInFocus?.[1].forEach((messages: IPrivateMessage) => {\n                    if (messages.dateRead === null) {\n                        messages.dateRead = new Date().toISOString()\n                    }\n                })\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    @action setRecipient = (username: string, userPhotoUrl: any) => {\n        this.recipientUsername = username;\n    }\n    @action setMessageThreadId = (messageThreadId: string) => {\n        this.messageThreadId = messageThreadId;\n    };\n    @action setReply = (content: string) => {\n        this.messageContent = content;\n    };\n    @action setUsername = (username: string) => {\n        this.username = username;\n\n    }\n    @action sendMessage = async (messageToSend: any) => {\n\n        try {\n            await agent.PrivateMessages.create(messageToSend);\n\n            runInAction('loading message ', () => {\n                this.rootStore.modalStore.closeModal();\n            });\n            history.push('/privateMessages');\n        } catch (error) {\n            runInAction('load thread error', () => {\n            });\n            console.log(error);\n        }\n    };\n}\n\n\n\n","import {\n    HubConnection, HubConnectionBuilder, LogLevel\n} from '@microsoft/signalr';\nimport { action, computed, observable, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport PrivateMessageStore from './privateMessageStore';\nimport { RootStore } from './rootStore';\n\n\nexport default class PresenceStore {\n\n\n    rootStore: RootStore;\n    privateMessageStore: PrivateMessageStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n        this.privateMessageStore = rootStore.privateMessageStore;\n    }\n\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @observable onlineUsersSource: string[] = [];\n    @observable onlineUsers: string[] = []\n\n    @observable counterUnread: number = 0;\n\n    @observable counterUnreadItems = new Set();\n    @observable unreadItems: string[] = [];\n\n    @computed get unreadIncomingMessages() {\n        return this.unreadItems.length;\n    }\n\n\n    @action markReadNavbar = async (username: string) => {\n\n        runInAction(() => {\n            const index = this.unreadItems.indexOf(username);\n            if (index > -1) {\n                this.unreadItems.splice(index, 1);\n            }\n        })\n    }\n\n    @action getUnreadItems = async () => {\n\n        try {\n            const result = await agent.PrivateMessages.checkUnread();\n\n            runInAction(() => {\n                if (result) {\n                    this.unreadItems = result;\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    @action createHubConnection = () => {\n        this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_API_PRESENCE_URL!, {\n\n                accessTokenFactory: () => this.rootStore.commonStore.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        this.hubConnection\n            .start()\n            .catch(error => console.log('Error establishing connection: ', error));\n\n\n        this.hubConnection.on('GetOnlineUsers', (usernames: string[]) => {\n            runInAction(() => {\n                this.onlineUsers = usernames;\n\n            })\n        })\n        this.hubConnection.on('NewMessageReceived', message => {\n\n            // console.log(message.senderDisplayName + ' has sent you a new message');\n\n\n            runInAction(() => {\n                if (this.unreadItems.indexOf(message.senderUsername) === -1) {\n                    this.unreadItems.push(message.senderUsername);\n                }\n                this.privateMessageStore.messageRegistry.set(message.id, message);\n            })\n\n        })\n    }\n\n    @action stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log(error))\n    }\n\n}","import { configure } from 'mobx';\nimport { createContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './profileStore';\nimport UserStore from './userStore';\nimport ForumPostStore from './forumPostStore';\nimport MotofyStore from './motofyStore';\nimport MechanicStore from './mechanicStore';\nimport BrandStore from './brandStore';\nimport ProductStore from './productStore';\nimport CommentStore from './commentStore';\nimport CountryStore from './countryStore';\nimport FeedStore from './feedStore';\nimport PeopleStore from './peopleStore';\nimport PrivateMessageStore from './privateMessageStore';\nimport PresenceStore from './presenceStore';\n\n// === mobx === //\nconfigure({ enforceActions: 'always' });\n\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    forumPostStore: ForumPostStore;\n    motofyStore: MotofyStore;\n    mechanicStore: MechanicStore;\n    brandStore: BrandStore;\n    productStore: ProductStore;\n    commentStore: CommentStore;\n    countryStore: CountryStore;\n    feedStore: FeedStore;\n    peopleStore: PeopleStore;\n    privateMessageStore: PrivateMessageStore;\n    presenceStore: PresenceStore;\n\n\n    constructor () {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n        this.forumPostStore = new ForumPostStore(this);\n        this.motofyStore = new MotofyStore(this);\n        this.mechanicStore = new MechanicStore(this);\n        this.brandStore = new BrandStore(this);\n        this.productStore = new ProductStore(this);\n        this.commentStore = new CommentStore(this);\n        this.countryStore = new CountryStore(this);\n        this.feedStore = new FeedStore(this);\n        this.peopleStore = new PeopleStore(this);\n        this.privateMessageStore = new PrivateMessageStore(this);\n        this.presenceStore = new PresenceStore(this);\n    }\n}\n\nexport const RootStoreContext = createContext(new RootStore());","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useRef } from \"react\";//, useState\nimport \"./Navbar.css\";\nimport { useHistory } from \"react-router\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport {\n  Container,\n  Dropdown,\n  Image,\n  Label,\n  Menu,\n  Popup,\n} from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nimport { useTranslation } from \"react-i18next\";\nimport i18next from \"i18next\";\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { user, logout, isLoggedIn } = rootStore.userStore;\n  const { unreadIncomingMessages, getUnreadItems } = rootStore.presenceStore;\n  const { loadFeed, unseenFeedItems, feedByDate, markSeenInDB, feedMounted } =\n    rootStore.feedStore;\n  const { setInitialView } = rootStore.privateMessageStore;\n\n  const { createHubConnection, stopHubConnection } = rootStore.feedStore;\n\n  const { i18n, t } = useTranslation([\"navbar\"]);\n\n  const menuRef: any = useRef();\n\n\n  let history = useHistory();\n\n  const closeStackableMenu = () => {\n    var actionMenu = menuRef.current.parentNode;\n    var actionIcon = menuRef.current;\n    actionMenu.classList.remove(\"active\");\n    actionMenu.classList.remove(\"open\");\n    actionIcon.classList.remove(\"active\");\n    actionIcon.classList.remove(\"open\");\n  };\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      menuRef.current.onclick = function (e: any) {\n        var menu = menuRef.current.parentNode;\n\n        if (!this.classList.contains(\"active\")) {\n          this.classList.add(\"active\");\n          menu.classList.add(\"open\");\n        } else {\n          this.classList.remove(\"active\");\n          menu.classList.remove(\"open\");\n        }\n\n        e.preventDefault();\n      };\n      createHubConnection();\n    }\n  }, [isLoggedIn, createHubConnection]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"i18nextLng\")?.length! > 2) {\n      i18next.changeLanguage(\"en\");\n    }\n    if (isLoggedIn) {\n      getUnreadItems();\n      loadFeed();\n    }\n    return () => {\n      stopHubConnection();\n    };\n  }, [getUnreadItems, loadFeed, isLoggedIn, stopHubConnection]);\n\n  const handleLanguageChange = (e: string) => {\n    i18n.changeLanguage(e);\n    closeStackableMenu();\n  };\n\n  const handleViewUnread = () => {\n    closeStackableMenu();\n    setInitialView();\n  };\n\n  const markSeen = async () => {\n    let ids: string[] = [];\n    for (var i = 0, len = feedByDate.length; i < len; i++) {\n      if (feedByDate[i][1][0].isSeen === false)\n        ids.push(feedByDate[i][1][0].id);\n      markSeenInDB(ids);\n    }\n  };\n  const handleViewUnseen = () => {\n    closeStackableMenu();\n    markSeen();\n    if (feedMounted) {\n      history.go(0);\n    } else {\n      history.push(`/feed`);\n    }\n  };\n\n  return (\n    <>\n      <Container>\n        <Menu\n          style={{ textAlign: \"center\" }}\n          fixed='top'\n          stackable\n          inverted\n          pointing\n        >\n          <Menu.Item as={NavLink} exact to='/'>\n            <img\n              src='/assets/logo.png'\n              alt='logo'\n              style={{ marginRight: \"10\" }}\n              onClick={closeStackableMenu}\n            />\n            Motoranza\n          </Menu.Item>\n\n          {isLoggedIn && (\n            <>\n              <Menu.Item\n                exact\n                as={NavLink}\n                to='/activities'\n                onClick={closeStackableMenu}\n              >\n                {t(\"motorcycle diaries\")}\n              </Menu.Item>\n              <Menu.Item\n                exact\n                as={NavLink}\n                to='/gallery'\n                onClick={closeStackableMenu}\n              >\n                Motofy!\n              </Menu.Item>\n              <Menu.Item\n                exact\n                as={NavLink}\n                onClick={closeStackableMenu}\n                to='/forum'\n              >\n                {\" \"}\n                {t(\"forum\")}\n              </Menu.Item>\n              <Menu.Item\n                name='mechanics'\n                exact\n                as={NavLink}\n                to='/mechanics'\n                onClick={closeStackableMenu}\n              >\n                {t(\"mechanics\")}\n              </Menu.Item>\n              <Menu.Item\n                name='market'\n                value='Market'\n                as={Link}\n                to='/shop'\n                onClick={closeStackableMenu}\n              >\n                {\" \"}\n                {t(\"market\")}\n              </Menu.Item>\n              <Menu.Item>\n                <Dropdown text={t(\"social\")} className='icon' floating labeled>\n                  <Dropdown.Menu>\n                    <Dropdown.Item\n                      name='people'\n                      as={Link}\n                      onClick={closeStackableMenu}\n                      to='/people'\n                      icon='users'\n                      text={t(\"people\")}\n                    />\n                    <Dropdown.Item\n                      name='people'\n                      onClick={closeStackableMenu}\n                      as={Link}\n                      to='/privateMessages'\n                      icon='envelope outline'\n                      text={t(\"private messages\")}\n                    />\n                  </Dropdown.Menu>\n                </Dropdown>\n                {unreadIncomingMessages > 0 && (\n                  <Label\n                    as={Link}\n                    to='/privateMessages'\n                    color='orange'\n                    onClick={() => handleViewUnread()}\n                  >\n                    {unreadIncomingMessages}\n                  </Label>\n                )}\n              </Menu.Item>\n              <div className='right menu'>\n                <Menu.Item>\n                  <Dropdown text={t(\"new\")} className='icon' floating labeled>\n                    <Dropdown.Menu>\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"motorcycle diary\")}\n                            value='MotoDiary'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/createDiary'\n                          />\n                        }\n                        content={t(\"motorcycle diary pop\")}\n                      />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text='Motofy!'\n                            value='Motofy'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/galleryForm'\n                          />\n                        }\n                        content={t(\"motofy pop\")}\n                      />\n\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"mechanic shop\")}\n                            value='Mecanic'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/mechanicForm'\n                          />\n                        }\n                        content={t(\"mechanic shop pop\")}\n                      />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"forumpost\")}\n                            value='Forum'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/forumform'\n                          />\n                        }\n                        content={t(\"forumpost pop\")}\n                      />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"product to sell\")}\n                            value='Product'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/productform'\n                          />\n                        }\n                        content={t(\"product to sell pop\")}\n                      />\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Menu.Item>\n                {user && (\n                  <>\n                    <Menu.Item position='right'>\n                      <Dropdown pointing='top left' text={t(\"Select language\")}>\n                        <Dropdown.Menu>\n                          <Dropdown.Item\n                            text={t(\"English\")}\n                            onClick={() => handleLanguageChange(\"en\")}\n                            flag='uk'\n                          />\n                          <Dropdown.Item\n                            text={t(\"Italian\")}\n                            onClick={() => handleLanguageChange(\"it\")}\n                            flag='italy'\n                          />\n                          <Dropdown.Item\n                            text={t(\"German\")}\n                            onClick={() => handleLanguageChange(\"de\")}\n                            flag='germany'\n                          />\n                          <Dropdown.Item\n                            text={t(\"French\")}\n                            onClick={() => handleLanguageChange(\"fr\")}\n                            flag='france'\n                          />\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Menu.Item>\n\n                    <Menu.Item position='right'>\n                      <Image\n                        avatar\n                        spaced='right'\n                        src={user!.image || \"/assets/user.png\"}\n                      />\n                      <Dropdown pointing='top left' text={user!.displayName}>\n                        <Dropdown.Menu>\n                          <Dropdown.Item\n                            as={Link}\n                            to={`/profile/${user!.userName}`}\n                            text={t(\"my profile\")}\n                            onClick={closeStackableMenu}\n                            icon='user'\n                          />\n                          <Dropdown.Item\n                            name='feed'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/feed'\n                            icon='info'\n                            text='Feed'\n                          />\n                          <Dropdown.Item\n                            onClick={logout}\n                            text={t(\"logout\")}\n                            icon='power'\n                          />\n                        </Dropdown.Menu>\n                      </Dropdown>\n                      {unseenFeedItems > 0 && (\n                        <Label\n                          color='orange'\n                          style={{ cursor: \"pointer\" }}\n                          onClick={() => handleViewUnseen()}\n                        >\n                          {unseenFeedItems}\n                        </Label>\n                      )}\n                    </Menu.Item>\n                  </>\n                )}\n              </div>\n              <div ref={menuRef} className='hamburger '>\n                <span className='hamburger-bun'></span>\n                <span className='hamburger-patty'></span>\n                <span className='hamburger-bun'></span>\n              </div>\n            </>\n          )}\n        </Menu>\n      </Container>\n    </>\n  );\n};\nexport default observer(NavBar);\n","import React, { useContext, useState } from \"react\";\nimport { Menu, Input, Divider, Icon, SegmentGroup } from \"semantic-ui-react\";\nimport { Calendar } from \"react-widgets\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.activityStore;\n\n  const [calendarFilter, setCalendarFilter] = useState(false);\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n\n  const toggleCalendar = () => {\n    setCalendarFilter(!calendarFilter);\n  };\n  const styles = {\n    textAlign: \"center\",\n  };\n  return (\n    <SegmentGroup raised>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        {!calendarFilter && (\n          <>\n            <Menu.Item active={predicate.has(\"search\")}>\n              <Input\n                icon='search'\n                placeholder={t(\"Search all\")}\n                onKeyDown={(e: any) => handleResultSelect(e)}\n              />\n            </Menu.Item>\n            <Divider horizontal \n            content={t(\"or choose from built in filters\")}\n            />\n          </>\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.size === 0}\n            onClick={() => setPredicate(\"all\", \"true\")}\n            color={\"blue\"}\n            name={\"all\"}\n            content={t(\"Active Diaries\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isCompleted\")}\n            onClick={() => setPredicate(\"isCompleted\", \"true\")}\n            color={\"blue\"}\n            name={\"isCompleted\"}\n            content={t(\"Completed Diaries\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isHost\")}\n            onClick={() => setPredicate(\"isHost\", \"true\")}\n            color={\"blue\"}\n            name={\"host\"}\n            content={t(\"My own\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isGoing\")}\n            onClick={() => setPredicate(\"isGoing\", \"true\")}\n            color={\"blue\"}\n            name={\"username\"}\n            content={t(\"Diaries I follow\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"iFollow\")}\n            onClick={() => setPredicate(\"iFollow\", \"true\")}\n            color={\"blue\"}\n            name={\"country\"}\n            content={t(\"By people I follow\")}\n            style={styles}\n          />\n        )}\n        <Menu.Item\n          active={calendarFilter}\n          color={\"blue\"}\n          content={!calendarFilter ? t(\"Select Diaries After A Date\")\n          : <span><Icon name=\"arrow left\"/>{ t(\"Go back to built-in filters\")}</span> }\n          style={styles}\n          onClick={toggleCalendar}\n        />\n      </Menu>\n      {calendarFilter && (\n          <Calendar\n            onChange={(date) => setPredicate(\"startDate\", date!)}\n            value={predicate.get(\"startDate\") || new Date()}\n          />\n      )}\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ActivityListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst SearchDiaries = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.activityStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchDiaries;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst ActivityMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.activityStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info.toUpperCase()}</div>\n\n  );\n};\n\nexport default observer(ActivityMobileInfo);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport SearchDiaries from \"../modals/SearchDiaries\";\nimport ActivityMobileInfo from \"./ActivityMobileInfo\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.activityStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  const handleSearch = () => {\n    setPredicate(\"calendar\", \"true\");\n    openModal(<SearchDiaries />);\n  };\n\n  useEffect(()=>{\n    setInfo(t('Active diaries'))\n\n  },[setInfo, t])\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"isCompleted\":\n        setInfo(t(\"Completed diaries\"));\n        break;\n      case \"isGoing\":\n        setInfo(t(\"Diaries I Follow\"));\n        break;\n      case \"isHost\":\n        setInfo(t(\"My diaries\"));\n        break;\n      case \"calendar\":\n        setInfo(t(\"Search diaries\"));\n        break;\n      default:\n        setInfo(t(\"Active diaries\"));\n        break;\n    }\n  };\n\n\n  return (\n    <>\n      <Menu fluid widths={5} style={{ top: \"200px\" }}>\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isCompleted\")}\n          onClick={() => {\n            setPredicate(\"isCompleted\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"hourglass end\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isGoing\")}\n          onClick={() => {\n            setPredicate(\"isGoing\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isHost\")}\n          onClick={() => {\n            setPredicate(\"isHost\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"user circle\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"calendar\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n        {/* <Menu.Item style={{textAlign:\"left\"}}>\n        <DatePicker\n          onChange={(date) => setPredicate(\"startDate\", date!)}\n          withPortal\n        />\n      </Menu.Item> */}\n      </Menu>\n      <ActivityMobileInfo />\n    </>\n  );\n};\n\nexport default observer(ActivityMobileFilters);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IAttendee } from '../../../app/models/activity';\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst styles = {\n  borderColor: 'green',\n  borderWidth: 2\n}\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\n\n  return (\n    <List horizontal>\n      {attendees.map((attendee) => (\n        <List.Item key={attendee.username}>\n          <Popup\n            header={attendee.displayName}\n            trigger={\n              <Image\n                size='mini'\n                circular\n                src={attendee.image || '/assets/user.png'}\n                bordered\n                style={attendee.following ? styles : null}\n              />\n            }\n          />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ActivityListItemAttendees;\n","import React, {\n  // useEffect, // , { useContext }\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Accordion, Button, Item, Segment } from \"semantic-ui-react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport ActivityListItemAttendees from \"./ActivityListItemAttendees\";\n\nimport { useTranslation } from \"react-i18next\";\n// import i18next from \"i18next\";\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\n  const { t } = useTranslation([\"diaries\"]);\n\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n\n  const when = t(\"when\");\n  const starting_point = t(\"starting_point\");\n  const destination = t(\"destination\");\n\n  const panels = [\n    {\n      key: \"when\",\n      title: when ,\n      content: [\"On \" + format(activity.date, \"MMMM d yyyy h:mm:a\")].join(\" \"),\n    },\n    {\n      key: \"starting_point\",\n      title: starting_point,\n      content: [\"In \" + activity.city + \", \" + activity.departure].join(\" \"),\n    },\n    {\n      key: \"destination\",\n      title:destination,\n      content: [activity.destination],\n    },\n  ];\n\n  // const descriptionUiShort = activity.description.substring(0, 60);\n  // const seeMore = \"...see more\";\n\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Item.Group>\n          <Item>\n            {/* <Item.Content> */}\n            {/* <Item.Description>\n                {activity.isHost && (\n                  <Label\n                    // pointing='below'\n                    basic\n                    color='teal'\n                    content={userMessage}\n                  />\n                )}\n                {activity.isGoing && !activity.isHost && (\n                  <Label\n                    // pointing='below'\n                    basic\n                    color='green'\n                    content={namedMessage}\n                    //\n                  />\n                )}\n              </Item.Description> */}\n            <Item.Image\n              size='tiny'\n              circular\n              src={host.image || \"/assets/user.png\"}\n              style={{ marginBottom: 3 }}\n            />\n            {/* </Item.Content> */}\n            <Item.Content\n              verticalAlign='middle'\n              style={{ textAlign: \"center\" }}\n            >\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                <h2>{activity.title}</h2>\n              </Item.Header>\n              <Item.Meta>\n                by{\" \"}\n                <Link to={`/profile/${host.username}`}>\n                  {\" \"}\n                  {host.displayName}\n                </Link>\n              </Item.Meta>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        {/* <Icon name='clock' /> {format(activity.date, 'h:mm:a')}\n        <Icon name='marker' /> Starting Point: {activity.venue}, {activity.city}\n        <Icon name='marker' /> Destination: {activity.destination}  */}\n\n        <Accordion fluid panels={panels} styled exclusive={false} />\n      </Segment>\n      <Segment clearing>\n        <Item.Group>\n          <Item.Description as={Link} to={`/activities/${activity.id}`}>\n            <span>{activity.description.substring(0, 60)}</span> <span>...see more</span>\n          </Item.Description>\n        </Item.Group>\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendees attendees={activity.attendees} />\n      </Segment>\n      <Segment secondary>\n        <Button\n          as={Link}\n          to={`/activities/${activity.id}`}\n          // floated='right'\n          content={t(\"Check This Diary\")}\n          color='blue'\n          fluid\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityListItem;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nconst ActivityList = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { activitiesByDate } = rootStore.activityStore;\n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Item.Group divided>\n            {activities.map((activity) => (\n              <ActivityListItem key={activity.id} activity={activity} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityList);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\nimport ActivityMobileFilters from \"./ActivityMobileFilters\";\nimport ActivityList from \"./ActivityList\";\n\n//REFACTOR or delete!!!\n// import ActivityListItemMissedSearch from \"./ActivityListItemMissedSearch\";\n\nconst ActivityDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n    // activityHit,\n    // activityMax\n  } = rootStore.activityStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadActivities().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <ActivityMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <ActivityListItemPlaceholder />\n        ) : \n        // (\n        //   <>\n        //     {(activityHit === false && activityMax === false) ? (\n        //       <ActivityListItemMissedSearch />\n        //     ) : \n            (\n              <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && page + 1 < totalPages}\n                initialLoad={false}\n              >\n                <ActivityList />\n              </InfiniteScroll>\n            )\n          }\n          {/* </>\n        )} */}\n      </Grid.Column>\n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n          <ActivityFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column width={11}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","import { AxiosResponse } from 'axios';\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface IProps {\n  error: AxiosResponse;\n  text?: string ;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({ error, text  }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {error.data && Object.keys(error.data.errors).length > 0 && (\n          <Message.List>\n              {Object.values(error.data.errors).flat().map((err: any, i) => (\n                  <Message.Item key={i}>{err}</Message.Item>\n              ))}\n          </Message.List>\n      )}\n      {text && <Message.Content content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { Form, FormFieldProps, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\n    \nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error },\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {/* type='text' was and error */}\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n\n","import { FORM_ERROR } from \"final-form\";\nimport React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport {\n  combineValidators,\n  isRequired,\n  matchesField,\n  composeValidators,\n  createValidator,\n  matchesPattern,\n} from \"revalidate\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  \n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n\n  const regexRule = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n\n  const validate = combineValidators({\n    username: isRequired({ message: t(\"Username is required\") }),\n    displayName: isRequired({ message: t(\"Display Name is required\") }),\n    password: composeValidators(\n      isRequired({ message: t(\"Password is required\") }),\n      matchesPattern((regexRule))({message: t(\"Password requires a minimum of eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\")})\n    )(),\n    \n    email: composeValidators (\n      isRequired({ message: t(\"Email is required\") }),\n      isValidEmail({ message: t(\"Invalid email address\") }),\n    )(),\n    confirmPassword: composeValidators(\n      isRequired({ message: t(\"Confirmation of password is required\") }),\n      matchesField(\n        \"password\",\n        \"confirmPassword\"\n      )({\n        message: t(\"Passwords do not match\"),\n      })\n    )(),\n  });\n\n  return (\n    <FinalForm\n      onSubmit={(values: any) =>\n        register(values)\n          .then(() => addFeedItem(uuid(), \"Registered\", values.username))\n          .catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit,\n      }) => (\n        <Form onSubmit={handleSubmit} error={submitError}>\n          <Header\n            as='h2'\n            content={t(\"Sign up to Motoranza\")}\n            color='teal'\n            textAlign='center'\n          />\n          <Field\n            name='username'\n            component={TextInput}\n            placeholder={t(\"Username\")}\n          />\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder={t(\"Display Name\")}\n          />\n          <Field name='email' component={TextInput} placeholder={t(\"Email\")} />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder={t(\"Password\")}\n            type='password'\n          />\n          <Field\n            name='confirmPassword'\n            component={TextInput}\n            placeholder={t(\"Confirm Password\")}\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage error={submitError} />\n          )}\n\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content={t(\"Register\")}\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import { FORM_ERROR } from \"final-form\";\nimport React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  combineValidators,\n  composeValidators,\n  createValidator,\n  isRequired,\n} from \"revalidate\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst RequestResetPasswordForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { handleForgottenPassword } = rootStore.userStore;\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n  const validate = combineValidators({\n    email: composeValidators(\n      isRequired({ message: t(\"Email is required\") }),\n      isValidEmail({ message: t(\"Invalid email address\") })\n    )(),\n  });\n\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        handleForgottenPassword(values).catch((error) => ({\n          [FORM_ERROR]: error,\n        }))\n      }\n      validate={validate}\n      render={({ handleSubmit, submitting, invalid, pristine }) => (\n        <Form onSubmit={handleSubmit} autoComplete='off'>\n          <Header\n            as='h2'\n            content={t('Reset password')}\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='email' component={TextInput} placeholder={t(\"Email\")} />\n\n          <Button\n            disabled={invalid || pristine}\n            loading={submitting}\n            color='teal'\n            content={t('Send me the reset link')}\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RequestResetPasswordForm;\n","import { FORM_ERROR } from \"final-form\";\nimport React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport RegisterForm from \"./RegisterForm\";\nimport ResetPasswordForm from \"./RequestResetPasswordForm\";\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n\n  const { openModal, setSize, closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    email: isRequired({ message: t(\"Email is required\") }),\n    password: isRequired({ message: t(\"Password is required\") }),\n  });\n  return (\n    <>\n      <FinalForm\n        onSubmit={(values: IUserFormValues) =>\n          login(values).catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n        }\n        validate={validate}\n        render={({\n          handleSubmit,\n          submitting,\n          submitError,\n          invalid,\n          pristine,\n          dirtySinceLastSubmit,\n        }) => (\n          <Form onSubmit={handleSubmit} error={submitError} autoComplete='off'>\n            <Header\n              as='h2'\n              content={t(\"Login to Motoranza\")}\n              color='teal'\n              textAlign='center'\n            />\n            <Field\n              name='email'\n              component={TextInput}\n              placeholder={t(\"Email\")}\n            />\n            <Field\n              name='password'\n              component={TextInput}\n              placeholder={t(\"Password\")}\n              type='password'\n            />\n            {submitError && !dirtySinceLastSubmit && (\n              <ErrorMessage\n                error={submitError}\n                text={t(\"Invalid email address or password\")}\n              />\n            )}\n            <Button\n              disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n              loading={submitting}\n              color='teal'\n              content={t(\"Login\")}\n              fluid\n            />\n          </Form>\n        )}\n      />\n      <div className='ui two buttons' style={{marginTop:\"1rem\"}}>\n        <Button\n          basic\n          color='teal'\n          onClick={() => {\n            closeModal();\n            setSize(\"mini\");\n            openModal(<ResetPasswordForm />);\n          }}\n        >\n          {t(\"Forgot your password?\")}\n        </Button>\n        <Button color='teal' onClick={()=>{closeModal(); setSize(\"mini\"); openModal(<RegisterForm />)}}>\n          {t(\"Don't have an account yet? Sign Up!\")}\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { Fragment, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Segment } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterForm from \"../user/RegisterForm\";\nimport \"./Homepage.css\";\nimport { useTranslation } from \"react-i18next\";\n\nconst HomePage = () => {\n  const token = window.localStorage.getItem(\"jwt\");\n  const rootStore = useContext(RootStoreContext);\n  const { isLoggedIn, user } = rootStore.userStore;\n  const { openModal, setSize } = rootStore.modalStore;\n\n  const { t } = useTranslation(\"home\");\n\n  return (\n    <Segment inverted textAlign='center' vertical className='masthead'>\n      <Container textAlign='center' className=\"home-container\" style={{    marginLeft:\"auto\", marginRight:\"auto\"}}>\n        <Header as='h1' inverted style={{marginLeft:\"5rem\"}}>\n          <span style={{ color: \"#FA5\" }}>M</span>OTORANZA\n        </Header>\n        {isLoggedIn && user && token ? (\n          <Fragment>\n            <Header as='h2' inverted>\n              {t(\"welcome back to motoranza\")} {user.displayName}\n            </Header>\n            <Button\n              as={Link}\n              to='/activities'\n              size='huge'\n              inverted\n              className='btn'\n            >\n              {t(\"enter motoranza\")}\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Header as='h2' inverted content={t(\"Welcome to Motoranza\")} />\n            <Button\n              onClick={() => {\n                setSize(\"tiny\");\n                openModal(<LoginForm />);\n              }}\n              to='/login'\n              size='huge'\n              inverted\n              className=\"usr-btn\"\n            >\n              {t(\"login to enter\")}\n            </Button>\n            <Button\n              onClick={() => {\n                setSize(\"tiny\");\n                openModal(<RegisterForm />);\n              }}\n              size='huge'\n              inverted\n              className=\"usr-btn\"\n            >\n              {t(\"register to enter\")}\n            </Button>\n          </Fragment>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default HomePage;\n","import { IComment } from \"./comment\";\n\nexport interface IActivitiesEnvelope {\n  activities: IActivity[];\n  activityCount: number;\n}\n\nexport interface IActivity {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  date: Date;\n  city: string;\n  countryName: string;\n  countryId: string;\n  departure: string;\n  destination: string;\n  isGoing: boolean;\n  isHost: boolean;\n  isActive: boolean;\n  attendees: IAttendee[];\n  comments: IComment[];\n  diaryEntries: IDiaryEntry[];\n  motorcycleBrandId: string;\n  motorcycleBrandName: string;\n  motorcycleBrandLogoUrl: string;\n}\n\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n  time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  motorcycleBrandId: string = '';\n  motorcycleBrandName: string = '';\n  motorcycleBrandLogoUrl: string = '';\n  category: string = '';\n  description: string = '';\n  date?: Date = undefined;\n  time?: Date = undefined;\n  city: string = '';\n  countryName: string = '';\n  countryId: string = '';\n  departure: string = '';\n  destination: string = '';\n  //TODO:motorcycleBrandId, name etc...\n\n\n  constructor(init?: IActivityFormValues) {\n    if (init && init.date) {\n      init.time = init.date;\n    }\n    Object.assign(this, init);\n  }\n}\n\nexport interface IAttendee {\n  username: string;\n  displayName: string;\n  image: string;\n  isHost: boolean;\n  following?: boolean;\n}\nexport interface IDiaryEntry {\n  id: string;\n  body: string;\n  dayNumber: string;\n  entryDate: Date;\n  locationCity: string;\n  locationCountry: string;\n  road: string;\n  weather: string;\n  numberOfKilometers: number;\n  photoUrl: string;\n  mood: string;\n  file: any;\n  activityId: string;\n}\n\nexport class DiaryEntryFormValues {\n  id?: string = undefined;\n  mood: string = '';\n  body: string = '';\n  entryDate: Date;\n  locationCity: string = '';\n  locationCountry: string = '';\n  photoUrl: string = '';\n\n}\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n            search \n            selection\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput","export const category = [\n    { key: 'cityRidding', text: 'City Ridding', value: 'City Ridding' },\n    { key: 'outdoors', text: 'Outdoors', value: 'Outdoors' },\n    { key: 'byTheSea', text: 'By The Sea', value: 'By The Sea' },\n    { key: 'mountains', text: 'Mountains', value: 'Mountains' },\n    { key: 'cruise', text: 'Cruise', value: 'Cruise' },\n    { key: 'offRoad', text: 'Off Road', value: 'Off Road' },\n    { key: 'racing', text: 'Racing', value: 'Racing' },\n    { key: 'outToLunch', text: 'Out To Lunch', value: 'Out To Lunch' },\n    { key: 'goToPlaces', text: 'Go To Places', value: 'Go To Places' },\n    { key: 'rockAndRoll', text: 'Rock And Roll', value: 'Rock And Roll' },\n    { key: 'heavyMetal', text: 'Heavy Metal', value: 'Heavy Metal' },\n    { key: 'gang', text: 'Gang', value: 'Gang' }\n  ];","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <DateTimePicker \n            placeholder={placeholder}\n            value={input.value || null}\n            onChange={input.onChange}\n            onBlur={input.onBlur}\n            onKeyDown={(e) => e.preventDefault()}\n            date={date}\n            time={time}\n            {...rest}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default DateInput","import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Form, Grid, Label, Segment } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from 'revalidate';\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity,\n  } = rootStore.activityStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const {loadBrandsToSelect, brands } = rootStore.brandStore;\n  const [editMode, setEditMode] = useState(false);\n\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired( { message: t(\"City is required\") }),\n    departure: isRequired( { message: t(\"Place of departure is required\")}),\n    destination: isRequired( { message: t(\"Place of destination is required\")}),\n    date: isRequired({ message: t(\"Date is required\") }),\n    time: isRequired( { message: t(\"Time is required\") }),\n  });\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadBrandsToSelect();\n\n    loadCountriesToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n      setLoading(true);\n      loadActivity(match.params.id)\n      .then((activity) => setActivity(new ActivityFormValues(activity)))\n      .finally(() => setLoading(false));\n    }\n  }, [loadBrandsToSelect, loadActivity, match.params.id, loadCountriesToSelect]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    // console.log('brands in edit',toJS(brands));\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: newId,\n        isHost: true,\n        isActive: true,\n        diaryEntries: []\n      };\n      createActivity(newActivity);\n      addFeedItem(newId, 'Added Motocycle Diary')\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column \n      computer={10} mobile={16}\n      >\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                {editMode && <Label content={t('Title')}/>}\n                <Field\n                  name='title'\n                  placeholder={t('Title')}\n                  value={activity.title}\n                  component={TextInput}\n                />\n\n                  {!editMode && (\n                    <Field\n                      name='motorcycleBrandName'\n                      placeholder={t(\"Your motorcycyle brand\")} \n                      options={brands}\n                      component={SelectInput}\n                    />\n                  )} \n                  {editMode && <Label content={t('Description')}/>}\n                <Field\n                  placeholder={t('Description')}\n                  name='description'\n                  value={activity.description}\n                  rows={3}\n                  component={TextAreaInput}\n                />\n                {editMode && <Label content={t('Category')}/>}\n                <Field\n                  placeholder={t('Category')}\n                  name='category'\n                  options={category}\n                  value={activity.category}\n                  component={SelectInput}\n                />{editMode && <Label content={t('Date and Time')}/>}\n                <Form.Group widths='equal'>\n                  <Field\n                    placeholder={t('Date')}\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder={t('Time')}\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                  {editMode && <Label content={t('Country')}/>}\n                    <Field\n                      placeholder={t('Country')}\n                      name='countryName'\n                      options={countries}\n                      component={SelectInput}\n                    />\n                {editMode && <Label content={t('City')}/>}\n                <Field\n                  placeholder={t('City')}\n                  name='city'\n                  value={activity.city}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Departure/Starting Point')}/>}\n                <Field\n                  name='departure'\n                  placeholder={t('Departure/Starting Point')}\n                  value={activity.departure}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Destination')}/>}\n                <Field\n                  placeholder={t('Destination')}\n                  name='destination'\n                  value={activity.destination}\n                  component={TextInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content={t('Submit')}\n                ></Button>\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content={t('Cancel')}\n                ></Button>\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n      <Grid.Column width={3} />\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IEmbracer } from '../../../app/models/motofy';\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\nconst styles = {\n  borderColor: 'green',\n  borderWidth: 2\n}\nconst GalleryListItemEmbracers: React.FC<IProps> = ({ embracers }) => {\n  return (\n    <List horizontal>\n      {embracers.map(embracer => (\n        <List.Item key={embracer.username}>\n          \n            <Popup\n                header={embracer.displayName}\n                trigger={\n                <Image size='mini' \n                circular \n                src={embracer.image || '/assets/user.png'} \n                bordered\n                style={embracer.following ? styles : null}\n                />\n              }\n            />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default GalleryListItemEmbracers;\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Icon,\n  Item,\n  Segment,\n  Image,\n  Grid,\n  Divider,\n  Header,\n  Popup,\n} from \"semantic-ui-react\";\n\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport GalleryListItemEmbracers from \"./GalleryListItemEmbracers\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  motofy: IMotofy;\n}\n\nconst GalleryListItem: React.FC<IProps> = ({ motofy }) => {\n  const { t } = useTranslation([\"gallery\"]);\n\n  return (\n    <>\n      <Segment.Group raised>\n        <Segment>\n          <Item>\n            <Divider horizontal>\n              <Header as='h4'>\n                <Item.Meta>\n                  {\" \"}\n                  {motofy.name}, {motofy.brandName}\n                </Item.Meta>\n              </Header>\n            </Divider>\n            <Item.Group>\n              <Link to={`/gallery/${motofy.id}`}>\n                <img\n                  className='ui centered big image rounded'\n                  src={motofy.photoUrl! || \"/assets/user.pn\"}\n                  alt='Motofy!'\n                />\n              </Link>\n            </Item.Group>\n            <Divider horizontal>\n              <Header as='h4'>{t(\"Info\")}</Header>\n            </Divider>\n            <Grid\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                display: \"flex\",\n                textAlign: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Grid.Row>\n                <Grid.Column computer={4} tablet={8} mobile={8}>\n                  <Popup\n                    header={motofy.brandName}\n                    className='computer only'\n                    trigger={\n                      <Image\n                        size='tiny'\n                        src={motofy.brandLogoUrl || \"/assets/user.pn\"}\n                        centered\n                      />\n                    }\n                  />\n                </Grid.Column>\n                <Grid.Column computer={4} tablet={8} mobile={8}>\n                  <Item.Header as={Link} to={`/gallery/${motofy.id}`}>\n                    {motofy.name}\n                  </Item.Header>\n                  <Item.Meta>\n                    {motofy.city}, {motofy.countryName}\n                  </Item.Meta>\n                </Grid.Column>\n\n                <Grid.Column computer={4} tablet={8} mobile={8}>\n                  <Icon name='motorcycle' /> {motofy.model}\n                </Grid.Column>\n\n                <Grid.Column computer={4} tablet={8} mobile={8}>\n                  <Icon name='road' /> {motofy.numberOfKilometers} Km\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Item>\n\n          <Divider horizontal>\n            <Header as='h4'>{t(\"Embraced by\")}</Header>\n          </Divider>\n          <GalleryListItemEmbracers embracers={motofy.embracers} />\n        </Segment>\n        <Segment clearing>\n          <Button\n            as={Link}\n            to={`/gallery/${motofy.id}`}\n            fluid\n            content={t(\"View This \") + motofy.brandName}\n            color='blue'\n          ></Button>\n        </Segment>\n      </Segment.Group>\n    </>\n  );\n};\n\nexport default observer(GalleryListItem);\n","import React, { Fragment, useContext } from 'react';\nimport {  Item } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport GalleryListItem from './GalleryListItem';\nimport { IMotofy } from '../../../app/models/motofy';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst GalleryList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {motofiesByDate } = rootStore.motofyStore;\n\n\n  return (\n\n      <Item.Group divided>\n        {motofiesByDate.map((motofy:IMotofy) => (\n\n          <Fragment key={motofy.id}>\n            <GalleryListItem motofy={motofy} />\n          </Fragment>\n          \n        ))}\n      </Item.Group>\n   \n  );\n};\n// }\n\nexport default observer(GalleryList);\n","import React, { useContext } from \"react\";\nimport { Segment, Grid, Header, Item } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst GalleryChamps: React.FC<{ motofy: IMotofy; info: string }> = ({\n  motofy,\n  info,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { closeModal } = rootStore.modalStore;\n  const { setPredicate } = rootStore.motofyStore;\n\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Link\n          to={`/gallery/${motofy.id}`}\n          onClick={() => {\n            closeModal();\n            setPredicate(\"all\", \"true\");\n          }}\n        >\n          <Grid>\n            <Grid.Column width={16}>\n              <Header\n                content={motofy.name}\n                style={{ fontSize: \"2em\", textAlign: \"center\" }}\n              />\n            </Grid.Column>\n            <Grid.Column width={16}>\n              <img\n                className='ui centered massive image rounded'\n                src={motofy.photoUrl!}\n                alt={motofy.name!}\n              />\n              <Item.Group>\n                <Item>\n                  <Item.Content style={{ textAlign: \"center\" }}>\n                    <Item.Description>\n                      {motofy.model},\n                      <p>\n                        {motofy.brandName}, {motofy.city}, {motofy.countryName},{\" \"}\n                      </p>\n                      {motofy.yearOfProduction}\n                    </Item.Description>\n                  </Item.Content>\n                </Item>\n              </Item.Group>\n            </Grid.Column>\n          </Grid>\n        </Link>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryChamps;\n","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Input, Divider } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport GalleryChamps from \"../modals/GalleryChamps\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GalleryFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, mostEmbraced, highestRatedMotofy } =\n    rootStore.motofyStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const handleOpenChamps = (info: string) => {\n    switch (info) {\n      case 'Most Embraced':\n        openModal(<GalleryChamps motofy={mostEmbraced} info={info}/>);\n        break;\n      default:\n        openModal(<GalleryChamps motofy={highestRatedMotofy} info={info}/>);\n        break;\n    }\n  };\n\n  const styles = {\n    textAlign: \"center\",\n    cursor: \"pointer\",\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Divider horizontal content={t(\"or choose from built in filters\")} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"globe\"}\n          content={t(\"All motofies\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => setPredicate(\"bestRated\", \"true\")}\n          color={\"blue\"}\n          name={\"bestRated\"}\n          icon={\"hand spock\"}\n          content={t(\"Best Rated\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"mostEmbraced\")}\n          onClick={() => setPredicate(\"mostEmbraced\", \"true\")}\n          color={\"blue\"}\n          name={\"mostEmbraced\"}\n          icon={\"winner\"}\n          content={t(\"Most Embraced\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"iEmbraced\")}\n          onClick={() => setPredicate(\"iEmbraced\", \"true\")}\n          color={\"blue\"}\n          name={\"username\"}\n          icon={\"heart\"}\n          content={t(\"I Embraced\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          content={t(\"By people I follow\")}\n          icon={\"users\"}\n          style={styles}\n        />\n \n        <Divider horizontal content={t('champs at the moment')} />\n        <Menu.Item\n          style={styles}\n          content={t('Most Embraced')}\n          icon={\"chess queen\"}\n          onClick={() => handleOpenChamps('Most Embraced')}\n        />\n\n        <Menu.Item\n          style={styles}\n          content={t('Highest Rated')}\n          onClick={() => handleOpenChamps('Highest Rated')}\n          icon={\"chess king\"}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(GalleryFilters);\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchGallery = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.motofyStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchGallery;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst GalleryMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.motofyStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info.toUpperCase() }</div>\n  );\n};\n\nexport default observer(GalleryMobileInfo);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\"; \nimport { useTranslation } from \"react-i18next\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport GalleryChamps from \"../modals/GalleryChamps\";\nimport SearchGallery from \"../modals/SearchGallery\";\nimport GalleryMobileInfo from \"./GalleryMobileInfo\";\n\nconst GalleryMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo, mostEmbraced, highestRatedMotofy } =\n    rootStore.motofyStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  useEffect(() => {\n    setInfo(t(\"All motofies\"));\n  }, [setInfo, t]);\n\n  const handleOpenChamps = (info: string) => {\n    switch (info) {\n      case \"Most Embraced\":\n        openModal(<GalleryChamps motofy={mostEmbraced} info={info} />);\n        break;\n      default:\n        openModal(<GalleryChamps motofy={highestRatedMotofy} info={info} />);\n        break;\n    }\n  };\n\n  const handleSearch = () => {\n    setPredicate(\"calendar\", \"true\");\n    openModal(<SearchGallery />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"bestRated\":\n        setInfo(t(\"Best rated\"));\n        break;\n      case \"mostEmbraced\":\n        setInfo(t(\"Most embraced\"));\n        break;\n      case \"iEmbraced\":\n        setInfo(t(\"Motofies I embraced\"));\n        break;\n      case \"iFollow\":\n        setInfo(t(\"By people I follow\"));\n        break;\n      case \"mostEmbraces\":\n        setInfo(t(\"Most Embraces\"));\n        break;\n      case \"highestRated\":\n        setInfo(t(\"Highest Rated\"));\n        break;\n      case \"calendar\":\n        setInfo(t(\"Search motofies\"));\n        break;\n      default:\n        setInfo(t(\"All motofies\"));\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Menu fluid widths={8}>\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => {\n            setPredicate(\"bestRated\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"winner\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"mostEmbraced\")}\n          onClick={() => {\n            setPredicate(\"mostEmbraced\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"thumbs up outline\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iEmbraced\")}\n          onClick={() => {\n            setPredicate(\"iEmbraced\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"heart\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => {\n            setPredicate(\"iFollow\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"mostEmbraces\")}\n          icon={\"sun\"}\n          onClick={() => {\n            handleOpenChamps(\"Most Embraces\");\n            setPredicate(\"mostEmbraces\", \"true\");\n            handleSetInfo();\n          }}\n        />\n\n        <Menu.Item\n          active={predicate.has(\"highestRated\")}\n          icon={\"moon\"}\n          onClick={() => {\n            handleOpenChamps(t(\"Highest Rated\"));\n            setPredicate(\"highestRated\", \"true\");\n            handleSetInfo();\n          }}\n        />\n        <Menu.Item\n          active={predicate.has(\"calendar\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n      </Menu>\n      <GalleryMobileInfo />\n    </>\n  );\n};\n\nexport default observer(GalleryMobileFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst GalleryListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid \n    //   style={{ marginTop: 50 }}\n      >\n        <Segment.Group>\n          <Segment \n          style={{ minHeight: 110 }}\n          >\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default GalleryListItemPlaceholder;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Loader,\nimport GalleryList from \"./GalleryList\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport GalleryFilters from \"./GalleryFilters\";\nimport GalleryMobileFilters from \"./GalleryMobileFilters\";\nimport GalleryListItemPlaceholder from \"./GalleryListItemPlaceholder\";\n\nconst GalleryDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadMotofies, loadingInitial, setPage, page, totalPages } =\n    rootStore.motofyStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMotofies().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMotofies();\n  }, [loadMotofies]);\n\n  return (\n    <Grid>\n\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n\n        <GalleryMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <GalleryListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <GalleryList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n    \n      \n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n           <GalleryFilters />\n        </Sticky>\n      </Grid.Column>\n\n      <Grid.Column computer={11} mobile={16}>\n      <Loader active={loadingNext}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GalleryDashboard);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Item,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IMechanic } from \"../../../app/models/mechanic\";\n\nconst mechanicImageStyle = {\n  filter: \"brightness(95%) contrast(70%) drop-shadow(1px 1px 1px teal)\",\n};\n\nconst testPositionStyles = {\n  textAlign: 'center'\n}\n\nconst MechanicListItem: React.FC<{ mechanic: IMechanic }> = ({ mechanic }) => {\n  const { t } = useTranslation([\"mechanics\"]);\n  return (\n    <Segment.Group raised>\n      <Segment raised>\n        <Header as='h1' floated='right' style={{color: 'rgb(58,\t98,\t139)'}}>\n          {mechanic.name}\n        </Header>\n        <Divider clearing />\n        <Item>\n          <Item.Group>\n            <Grid>\n              <Grid.Column width={5}>\n                <Item>\n                  <Item.Image\n                    style={mechanicImageStyle}\n                    size='small'\n                    rounded\n                    src={mechanic.photoUrl}\n                  />\n                </Item>\n              </Grid.Column>\n              <Divider vertical />\n              <Grid.Column width={6}>\n                <Item style={testPositionStyles}>\n                  <Item.Content>\n                    <Item.Header as='h2'>{t(\"Customers\")}</Item.Header>\n                   { mechanic.ratings !== undefined &&<Item.Extra as='h1'>{mechanic.ratings.length}</Item.Extra>}\n                  </Item.Content>\n                </Item>\n              </Grid.Column>\n              <Divider vertical />\n              <Grid.Column width={5}>\n                <Item style={testPositionStyles}>\n                  <Item.Content>\n                    <Item.Header as='h2'>{t(\"Rating\")}</Item.Header>\n                    {mechanic.averageRating !== undefined && <Item.Extra as='h1'>\n                      {mechanic.averageRating}\n                    </Item.Extra>}\n                  </Item.Content>\n                </Item>\n              </Grid.Column>\n            </Grid>\n          </Item.Group>\n        </Item>\n      </Segment>\n      <Segment>\n        <Grid>\n          <Grid.Column width={5}>\n            <Icon name='history' /> {t(\"In business since\")} {mechanic.yearOfStart}\n          </Grid.Column>\n          <Grid.Column width={6} style={testPositionStyles}>\n            <Icon name='envelope outline' /> {mechanic.city},{\" \"}\n            {mechanic.countryName}, {mechanic.address}\n          </Grid.Column>\n          <Grid.Column width={5} style={testPositionStyles}>\n            <Icon name='mail' /> {mechanic.email || 'email N/A'}\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment clearing>\n        <Button\n          as={Link}\n          to={`/mechanics/${mechanic.id}`}\n          fluid\n          content={t('View')}\n          color='instagram'\n        ></Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default MechanicListItem;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Item } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport MechanicListItem from './MechanicListItem';\n\nconst MechanicList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { mechanicsByDate } = rootStore.mechanicStore;\n\n  return (\n      <Item.Group divided>\n        {mechanicsByDate.map((mechanic) => (\n          <MechanicListItem mechanic={mechanic} key={mechanic.id} />\n        ))}\n      </Item.Group>\n  );\n};\n\nexport default observer(MechanicList);\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Menu, Dropdown, Input, Divider } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\nconst MechanicFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.mechanicStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const { t } = useTranslation([\"mechanics\"]);\n\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\n  const styles = {\n    textAlign: \"center\"\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n\n        <Menu.Item>\n          <Dropdown\n            placeholder={t('Search by country')}\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"arrows alternate\"}\n          content={t(\"All\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"isCustomer\")}\n          onClick={() => setPredicate(\"isCustomer\", \"true\")}\n          color={\"blue\"}\n          name={\"isCustomer\"}\n          icon={\"info\"}\n          content={t(\"My Shops (customer)\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"mostRecommended\")}\n          onClick={() => setPredicate(\"mostRecommended\", \"true\")}\n          color={\"blue\"}\n          name={\"mostRecommended\"}\n          icon={\"heart outline\"}\n          content={t(\"Most Recommended\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => setPredicate(\"bestRated\", \"true\")}\n          color={\"blue\"}\n          name={\"bestRated\"}\n          icon={\"heart\"}\n          content={t(\"Best Rated\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          content={t(\"By people I follow\")}\n          style={ styles }\n          icon={\"users\"}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(MechanicFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst MechanicListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default MechanicListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchMechanic = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.mechanicStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder='Search all...'\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchMechanic;\n","import React, { useContext, useEffect } from \"react\";\nimport {  Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchMechanicByCountry = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.mechanicStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n  const { closeModal } = rootStore.modalStore;\n\n  //!!Warning Mem Leak\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\nconst handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n           <Dropdown\n            placeholder='Filter by country'\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchMechanicByCountry;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst MechanicMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.mechanicStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info.toUpperCase()}</div>\n  );\n};\n\nexport default observer(MechanicMobileInfo);","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport SearchMechanic from \"../modals/SearchMechanic\";\nimport SearchMechanicByCountry from \"../modals/SearchMechanicByCountry\";\nimport MechanicMobileInfo from \"./MechanicMobileInfo\";\n\nconst MechanicMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.mechanicStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  \n  useEffect(()=>{\n    setInfo(t('All mechanics'))\n  },[setInfo, t])\n\n  const { openModal } = rootStore.modalStore;\n\n  const handleSearch = () => {\n    setPredicate(\"search\", \"true\");\n    openModal(<SearchMechanic />);\n  };\n  const handleSearchByCountry = () => {\n    // setPredicate(\"all\", \"true\");\n    setPredicate(\"country\", \"true\");\n    openModal(<SearchMechanicByCountry />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"isCustomer\":\n        setInfo(t(\"I am customer\"));\n        break;\n      case \"mostRecommended\":\n        setInfo(t(\"Most recommended\"));\n        break;\n      case \"bestRated\":\n        setInfo(t(\"Best rated\"));\n        break;\n      case \"iFollow\":\n        setInfo(t(\"Mechanics I follow\"));\n        break;\n      case \"country\":\n        setInfo(t(\"Search by country\"));\n        break;\n      case \"search\":\n        setInfo(t(\"Search all\"));\n        break;\n      default:\n        setInfo(t(\"All mechanics\"));\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Menu fluid widths={7} >\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isCustomer\")}\n          onClick={() => {\n            setPredicate(\"isCustomer\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"heart outline\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"mostRecommended\")}\n          onClick={() => {\n            setPredicate(\"mostRecommended\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"chess king\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => {\n            setPredicate(\"bestRated\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"winner\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => {\n            setPredicate(\"iFollow\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"country\")}\n          onClick={() => {\n            handleSearchByCountry();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"globe\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"search\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n      </Menu>\n      <MechanicMobileInfo />\n    </>\n  );\n};\n\nexport default observer(MechanicMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Rail,\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport MechanicList from \"./MechanicList\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport MechanicFilters from \"./MechanicFilters\";\nimport MechanicListItemPlaceholder from \"./MechanicListItemPlaceholder\";\nimport MechanicMobileFilters from \"./MechanicMobileFilters\";\n\nconst MechanicDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadMechanics, loadingInitial, setPage, page, totalPages } =\n    rootStore.mechanicStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMechanics().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMechanics();\n  }, [loadMechanics]);\n\n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <MechanicMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <MechanicListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <MechanicList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n          <MechanicFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDashboard);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content,\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Link } from 'react-router-dom';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport { observer } from 'mobx-react-lite';\nimport { formatDistance } from 'date-fns';\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createHubConnection,\n    stopHubConnection,\n    addComment,\n    activity,\n  } = rootStore.activityStore;\n\n  const { t } = useTranslation([\"comments\"]);\n\n\n  useEffect(() => {\n    createHubConnection(activity!.id);\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, activity]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>{t(\"Comment This Diary\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{maxWidth:'none'}}>\n          {activity &&\n            activity.comments &&\n            activity.comments.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                  <div>\n                      {formatDistance(\n                        new Date(comment.createdAt),\n                        new Date()\n                      )}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field \n                name='body'\n                component={TextAreaInput}\n                rows={2}\n                placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  fluid\n                  color='instagram'\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailedChat);\n","import React, { Fragment, useContext } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activityId: string;\n}\nconst ConfirmDeactivate: React.FC<IProps> = ({ activityId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deactivateActivity } = rootStore.activityStore;\n  const {\n    addFeedItem,\n  } = rootStore.feedStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeactivateActivity = (id: string) => {\n    deactivateActivity(id)\n      .then(() => addFeedItem(id, \"Completed Motocycle Diary\"))\n      .then(() => closeModal())\n      .finally(() => history.push(`/activities`));\n  };\n\n  const cancelDeactivateActivity = () => {\n    closeModal();\n  };\n\n  let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeactivateActivity(activityId)}\n            color='teal'\n            content={t('Yes, I finished my trip!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeactivateActivity()}\n            content={t('No, keep it active')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDeactivate;\n","import React, { Fragment, useContext } from \"react\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activityId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ activityId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteActivity } = rootStore.activityStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteActivity = (id: string) => {\n    deleteActivity(id)\n      .then(() => closeModal());\n  };\n\n  const cancelDeleteActivity = () => {\n    closeModal();\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this? You cannot go back...')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteActivity(activityId)}\n            color='teal'\n            content={t('Yes, delete it')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteActivity()}\n            content={t(\"No, don't delete\")}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  Button,\n} from \"semantic-ui-react\"; \nimport { IActivity } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport ConfirmDeactivate from \"../modals/ConfirmDeactivate\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\nimport { useTranslation } from \"react-i18next\";\n// import { toJS } from \"mobx\";\n\n\nconst ActivityDetailedManager: React.FC<{ activity: IActivity }> = ({activity}) => {\n\n  const rootStore = useContext(RootStoreContext);\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const { openModal } = rootStore.modalStore;\n\n  const [username, setUsername] = useState('');\n  \n  \n  useEffect(()=> {\n    let user = activity.attendees.filter(u => u.isHost);\n    setUsername(user[0].username)\n \n  },[activity.attendees])\n\n  const handleCompleteActivity = (id: string) => {\n    openModal(<ConfirmDeactivate activityId={id} />);\n    setManaging(false);\n  };\n  const handleDeleteActivity = (id: string) => {\n    openModal(<ConfirmDelete activityId={id} />);\n    setManaging(false);\n  };\n  const handleCancelAttendance = (id: string) => {\n    cancelAttendance();\n    console.log(username)\n    addFeedItem(id, \"Left Motorcycle Diary\", username);\n    setManaging(false);\n  };\n  const handleAttendActivity = (id: string) => {\n    attendActivity();\n    console.log(username)\n    addFeedItem(id, \"Joined Motorcycle Diary\", username);\n    setManaging(false);\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n  return (\n    <Segment.Group raised>\n        <Segment clearing attached='bottom'>\n          {activity.isHost ? (\n            <Fragment>\n              {!managing ? (\n                <Button onClick={toggleManaging} color='instagram' fluid>\n                  {t(\"Manage your diary\")}\n                </Button>\n              ) : (\n                <div className='ui five buttons'>\n                 \n                      <Button\n                        as={Link}\n                        to={`/createDiaryEntry/${activity.id}`}\n                        color='yellow'\n                        basic\n                      >\n                       {t(\"New Day\")}\n                      </Button>\n                   \n                      <Button\n                        as={Link}\n                        to={`/manage/${activity.id}`}\n                        color='pink'\n                        basic\n                      >\n                        {t(\"Edit\")}\n                      </Button>\n                  \n                      <Button\n                        onClick={() => {\n                          handleDeleteActivity(activity.id!);\n                        }}\n                        color='google plus'\n                      >\n                        {t(\"Delete\")}\n                      </Button>\n\n                      <Button\n                        onClick={() => {\n                          handleCompleteActivity(activity.id!);\n                        }}\n                        color='vk'\n                      >\n                        {t(\"Complete\")}\n                      </Button>\n  \n                      <Button\n                        onClick={() => {\n                          setManaging(false);\n                        }}\n                      >\n                        {t(\"Cancel\")}\n                      </Button>\n                   \n                </div>\n              )}\n            </Fragment>\n          ) : activity.isGoing \n          ? (\n            <Button\n              loading={loading}\n              onClick={() => handleCancelAttendance(activity.id)}\n            >\n              {t(\"Stop following this diary\")}\n            </Button>\n          ) : (\n            <Button\n              loading={loading}\n              onClick={() => handleAttendActivity(activity.id)}\n              color='teal'\n            >\n              {t(\"Become a part of it\")}\n            </Button>\n          )}\n        </Segment>\n      {/* )} */}\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityDetailedManager);\n","import React from \"react\";\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityDetailedInfo: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const { t } = useTranslation([\"diaries\"]);\n\n  return (\n    <Segment.Group raised>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='pencil alternate' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p style={{ whiteSpace: \"pre-wrap\" }}>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            \n            {t(\"Started in:\")}\n            <span>\n              {activity.city}, {activity.departure}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='map pin' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"Going to:\")} <span>{activity.destination}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='globe' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"In country:\")}\n            <span>{activity.countryName}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='gem outline' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"In category:\")}\n            <span>{activity.category}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='motorcycle' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"You are driving:\")}\n            <span>{activity.motorcycleBrandName}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityDetailedInfo;\n","import { formatDistance } from \"date-fns\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Grid,\n  GridColumn,\n  Header,\n  Image,\n  Label,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IActivity, IDiaryEntry } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  diary: IDiaryEntry;\n  activity: IActivity;\n}\nconst SeeDiaryEntry: React.FC<IProps> = ({ diary, activity }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { closeModal } = rootStore.modalStore;\n  const { deleteDiaryEntry } = rootStore.activityStore;\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n\n  const { diaryEntries } = activity;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const [actualDiary, setActualDiary] = useState(diary);\n\n  const counter = parseInt(actualDiary.dayNumber);\n  const numberDiaries = activity.diaryEntries.length;\n\n  const handleChange = async (diaryDay: number) => {\n    var diary: IDiaryEntry = diaryEntries.find(\n      (diary) => parseInt(diary.dayNumber) === diaryDay\n    )!;\n    setActualDiary(diary);\n  };\n\n  const handleDeleteEntry = async (id: string) => {\n    deleteDiaryEntry(diary, activity);\n  };\n\n  return (\n    <Fragment>\n      <Container text>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          <Grid>\n            <Grid.Column width={3}>\n              <Image src={host.image} size='tiny' circular />\n              <p>{t(\"You are driving:\")} {activity.motorcycleBrandName}</p>\n            </Grid.Column>\n            <Grid.Column width={10}>\n              <Header as='h2' color='pink'>\n                {t(\"Day\")} {actualDiary.dayNumber} {t(\"of\")} {activity.title}\n              </Header>\n              <p>\n                {\" \"}\n                {t(\"Published\")}{\" \"}\n                {formatDistance(new Date(actualDiary.entryDate), new Date(), {\n                  addSuffix: true,\n                })}\n              </p>\n              <Header.Subheader color='pink'>\n                <Link\n                  to={`/profile/${host.username}`}\n                  onClick={() => closeModal()}\n                >\n                  {t(\"by\")} {host.displayName}\n                </Link>\n                <p>\n                  {\" \"}\n                  {t(\"Started in\")} {activity.city}, {activity.countryName}\n                </p>\n                <p>\n                  {\" \"}\n                  {t(\"At the moment in\")} {actualDiary.locationCity},{\" \"}\n                  {actualDiary.locationCountry}\n                </p>\n              </Header.Subheader>\n            </Grid.Column>\n            <Grid.Column width={3} style={{ color: \"red\" }}>\n              <Grid.Row>\n                <Image\n                  src={activity.motorcycleBrandLogoUrl}\n                  size='tiny'\n                  circular\n                />\n              </Grid.Row>\n              {activity.isHost && (\n                <Grid.Row>\n                  <GridColumn width={8}>\n                    <Button\n                      circular\n                      icon='edit outline'\n                      as={Link}\n                      to={`/manageDiaryEntry/${actualDiary.id}/${activity.id}`}\n                      onClick={() => closeModal()}\n                    />\n                  </GridColumn>\n                  <GridColumn width={8}>\n                    {Number(actualDiary.dayNumber) === numberDiaries && (\n                      <Button\n                        circular\n                        icon='delete'\n                        onClick={() => {\n                          handleDeleteEntry(actualDiary.id);\n                          closeModal();\n                        }}\n                      />\n                    )}\n                  </GridColumn>\n                </Grid.Row>\n              )}\n            </Grid.Column>\n          </Grid>\n        </Segment>\n        <Segment>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column computer={9} mobile={16}>\n                <Image src={actualDiary.photoUrl} size='large' floated='left' />\n              </Grid.Column>\n              <Grid.Column computer={7} mobile={16}>\n                <Segment attached>\n                  <p>{t(\"At the moment in\")} {actualDiary.locationCity}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Feeling\")} {actualDiary.mood}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Road was\")} {actualDiary.road}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Weather was\")} {actualDiary.road}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Made\")} {actualDiary.numberOfKilometers} {t(\"kilometers\")} </p>\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Segment attached>\n                <Label content={t(\"What happened today?\")}/>\n                <p style={{ whiteSpace: \"pre-wrap\" }}>{actualDiary.body}</p>\n              </Segment>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column width={5}>\n                <Button\n                  className='mobile hidden'\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) - 1)\n                  }\n                  content={t('Previous day')}\n                  icon='angle left'\n                  disabled={counter === 1}\n                />\n                <Button\n                  className='mobile only'\n                  circular\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) - 1)\n                  }\n                  icon='angle left'\n                  disabled={counter === 1}\n                />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <Button fluid onClick={() => closeModal()} content={t('Quit')} />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <Button\n                  className='mobile hidden'\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) + 1)\n                  }\n                  content={t(\"Next day\")}\n                  icon='angle right'\n                  disabled={counter === numberDiaries}\n                />\n                <Button\n                  className='mobile only'\n                  fluid\n                  circular\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) + 1)\n                  }\n                  icon='angle right'\n                  disabled={counter === numberDiaries}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default SeeDiaryEntry;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport {\n  Segment,\n  List,\n  Item,\n  Divider,\n  SegmentGroup,\n} from \"semantic-ui-react\";\nimport { IActivity, IDiaryEntry } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SeeDiaryEntry from \"../modals/SeeDiaryEntry\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activity: IActivity;\n}\nconst ActivityDetailedSidebarRight: React.FC<IProps> = ({ activity }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  const { diaryEntries } = activity;\n\n  const handleOpenDiaryModal = (diary: IDiaryEntry) => {\n    openModal(<SeeDiaryEntry diary={diary} activity={activity} />);\n  };\n  //mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()`\n  // to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())`\n  //to sort & update in place\n  const diariesByDate = diaryEntries\n    .slice()\n    .sort((a, b) => parseInt(b.dayNumber) - parseInt(a.dayNumber));\n\n    const day = t(\"Day\");\n    const days = t(\"Days\");\n\n  return (\n    <SegmentGroup raised>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {diaryEntries.length} {diaryEntries.length === 1 ? day : days}{\" \"}\n        {t(\"passed\")}\n      </Segment>\n      <Segment attached textAlign='center'>\n        <List relaxed divided>\n          {diariesByDate.map((entry) => (\n            <div key={entry.id}>\n              <Item\n                as='h4'\n                onClick={() => handleOpenDiaryModal(entry)}\n                style={{ cursor: \"pointer\" }}\n              >\n                {t(\"Day number \")}\n                {entry.dayNumber}\n                {/* <Image\n                  size='small'\n                  src={entry.photoUrl || \"/assets/user.png\"}\n                /> */}\n                <div className='ui segment'>\n                  <img\n                    className='ui centered medium image'\n                    src={entry.photoUrl || \"/assets/user.png\"}\n                    alt='DayPhoto'\n                  />\n                </div>\n              </Item>\n              <Divider horizontal />\n            </div>\n          ))}\n        </List>\n      </Segment>\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityDetailedSidebarRight);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\"; // , { Fragment, useContext }\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header } from \"semantic-ui-react\"; //, Image\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n  const { t } = useTranslation([\"diaries\"]);\n\n  return (\n    <Segment style={{ padding: \"0\" }} raised>\n      <Segment textAlign='center'>\n        <Header as='h2'>\n          {activity.title}\n          <Header.Subheader>\n            <span>\n              {t(\"Hosted by\")}{\" \"}\n              <Link to={`/profile/${host.username}`}>\n                <strong>{host.displayName}</strong>\n              </Link>\n            </span>\n            <span>\n              {\", \"} on {format(activity.date, \"eeee do MMMM\")}{\" \"}\n            </span>\n          </Header.Subheader>\n        </Header>\n      </Segment>\n    </Segment>\n  );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  List,\n  Image,\n} from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\n// import { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst AllAttendeesList: React.FC<IProps> = ({ attendees }) => {\n  // const rootStore = useContext(RootStoreContext);\n\n  // const { closeModal } = rootStore.modalStore;\n\n  return (\n\n        <List animated relaxed verticalAlign='middle' >\n          {attendees.map((attendee) => (\n            <List.Item key={attendee.username} style={{ position: \"relative\" }}>\n       \n              \n              <Image avatar size='mini' src={attendee.image || \"/assets/user.png\"} />\n\n              <List.Content verticalAlign='middle'>\n                <List.Header as='h4'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </List.Header>\n                {attendee.following && (\n                  <List.Description style={{ color: \"green\" }}>Following</List.Description>\n                )}\n              </List.Content>\n            </List.Item>\n          ))}\n        </List>\n  );\n};\n\n\nexport default observer(AllAttendeesList);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  List,\n  Item,\n  Label,\n  Image,\n  SegmentGroup,\n} from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport AllAttendeesList from \"../modals/AllAttendeesList\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst ActivityDetailedSidebarLeft: React.FC<IProps> = ({ attendees }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal, setSize } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const handleShowAll = () => {\n    setSize(\"mini\");\n    openModal(<AllAttendeesList attendees={attendees} />);\n  };\n\n  const person = t(\"Person\");\n  const persons = t(\"People\");\n  return (\n    <SegmentGroup raised>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {attendees.length} {attendees.length === 1 ? person : persons }{\" \"}\n        {t(\"following\")}\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.slice(0, 10).map((attendee) => (\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\n              {attendee.isHost && (\n                <Label\n                  style={{ position: \"absolute\" }}\n                  color='teal'\n                  corner='right'\n                >\n                  {t(\"Host\")}\n                </Label>\n              )}\n\n              <Image size='mini' src={attendee.image || \"/assets/user.png\"} />\n\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h4'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && (\n                  <Item.Extra style={{ color: \"green\" }}>{t(\"Following\")}</Item.Extra>\n                )}\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n        {attendees.length > 10 && (\n          <span style={{ cursor: \"pointer\" }} onClick={handleShowAll}>\n            {t(\"and\")} {attendees.length - 10} {t(\"more\")}\n          </span>\n        )}\n      </Segment>\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityDetailedSidebarLeft);\n","import { observer } from \"mobx-react-lite\";\nimport React, {useContext, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedManager from \"./ActivityDetailedManager\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebarRight \nfrom \"./ActivityDetailedSidebarRight\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedSidebarLeft \nfrom \"./ActivityDetailedSidebarLeft\";\nimport { useTranslation } from \"react-i18next\";\n\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadActivity, activity, loadingInitial} = rootStore.activityStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  useEffect(() => {\n    loadActivity(match.params.id);\n  }, [loadActivity, match.params.id, history]);\n\n  if (loadingInitial || !activity ) return <LoadingComponent content={t('Loading activity...')} />;\n\n\n  return (\n    <Grid>\n      <Grid.Column computer={3} mobile={16} className={'mobile hidden'}>\n      <ActivityDetailedSidebarLeft attendees={activity!.attendees} />\n      </Grid.Column>\n      <Grid.Column computer={10} mobile={16}>\n \n          <ActivityDetailedHeader activity={activity!} />\n          <ActivityDetailedInfo activity={activity!} />\n          <ActivityDetailedManager activity={activity!} />\n          <ActivityDetailedChat />\n\n      </Grid.Column>\n      <Grid.Column computer={3} mobile={16} className={'hideScroll'} >\n          <ActivityDetailedSidebarRight activity={activity!} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form, Grid, Header } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  hasLengthLessThan,\n  isRequired,\n} from \"revalidate\";\n\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst validate = combineValidators({\n  content: composeValidators(\n    isRequired(\"Body\"),\n    hasLengthGreaterThan(1)({\n      message: \"Body needs to be at least 2 characters\",\n    }),\n    hasLengthLessThan(255)({\n      message: \"Maximum number of characters is 500\",\n    })\n  )(),\n});\n\ninterface IProps {\n  recipientUsername: string;\n  username: string;\n}\n\nconst ContactForm: React.FC<IProps> = ({ recipientUsername, username }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { sendMessage } = rootStore.privateMessageStore;\n  const { closeModal } = rootStore.modalStore;\n\n  const [loading] = useState(false);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let messageToSend = {\n      recipientUsername: recipientUsername,\n      username: username,\n      content: values.content,\n    };\n    sendMessage(messageToSend);\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <FinalForm\n          validate={validate}\n          onSubmit={handleFinalFormSubmit}\n          render={({ handleSubmit, invalid, pristine }) => (\n            <Form onSubmit={handleSubmit} loading={loading}>\n              <Header\n                as='h2'\n                content='Send message'\n                color='teal'\n                textAlign='center'\n              />\n              <Field\n                name='content'\n                rows={4}\n                placeholder='content'\n                component={TextAreaInput}\n              />\n              <Button\n                disabled={invalid || pristine}\n                floated='right'\n                color='teal'\n                type='submit'\n                content='submit'\n              />\n              <Button\n                floated='right'\n                disabled={loading}\n                type='button'\n                content='cancel'\n                onClick={() => closeModal()}\n              />\n            </Form>\n          )}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ContactForm);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    productId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ productId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteProduct } = rootStore.productStore;\n  const { closeModal } = rootStore.modalStore;\n\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteProduct = (id: string) => {\n    deleteProduct(id);\n    closeModal();\n    history.push('/shop');\n  };\n\n  const cancelDeleteProduct = () => {\n    closeModal();\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteProduct(productId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteProduct()}\n            content={t('No, cancel')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Grid, Icon, Image, Button, Label } from \"semantic-ui-react\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ContactForm from \"../../profiles/forms/ContactForm\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst ProductDetailedInfo: React.FC<{ product: IProduct }> = ({ product }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal, setSize } = rootStore.modalStore;\n  const {\n    followProduct,\n    productFollowed,\n    unfollowProduct,\n    setProductFollowed,\n    markSold,\n  } = rootStore.productStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { user } = rootStore.userStore;\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    product.viewers.forEach((viewer) => {\n      if (viewer.username === user?.userName) {\n        setProductFollowed();\n      }\n    });\n  }, [setProductFollowed, product.viewers, user]);\n\n  const handleDeleteProduct = (id: string) => {\n    setSize(\"mini\")\n    openModal(<ConfirmDelete productId={id} />);\n  };\n  const handleFollowProduct = (id: string) => {\n    followProduct(id, user!.userName, user!.displayName);\n    addFeedItem(id, \"Added to favorites\", product.sellerUsername);\n  };\n  const handleMarkSold = (id: string) => {\n    markSold(id, product);\n    addFeedItem(id, \"Marked Sold\");\n  };\n  const handleUnfollowProduct = (id: string) => {\n    unfollowProduct(id);\n    addFeedItem(id, \"Removed from favorites\", product.sellerUsername);\n  };\n  const styles = { minWidth: \"10em\" };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Grid stackable columns={2}>\n      <Grid.Column width={8}>\n        <Segment raised>\n          <Grid>\n            <Grid.Column width={2}>\n              <Icon size='large' color='grey' name='info' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Title\")}{\" \"}\n              </Label>\n              {product.title}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='monero' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Price\")}{\" \"}\n              </Label>\n              {product.price} €\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='calendar' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Published\")}{\" \"}\n              </Label>\n              {formatDistance(new Date(product.datePublished), new Date(), {\n                addSuffix: true,\n              })}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='certificate' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Category\")}{\" \"}\n              </Label>\n              {product.category}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='copyright' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Brand\")}{\" \"}\n              </Label>\n              {product.brand}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='id badge outline' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Model\")}{\" \"}\n              </Label>\n              {product.model}\n            </Grid.Column>\n          </Grid>\n          {product.sellerUsername !== user?.userName && (\n            <>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='location arrow' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"City\")}{\" \"}\n                  </Label>\n                  {product.city}\n                </Grid.Column>\n              </Grid>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='map marker alternate' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"Country\")}{\" \"}\n                  </Label>\n                  {product.countryName}\n                </Grid.Column>\n              </Grid>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='user' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"Seller\")}{\" \"}\n                  </Label>\n                  <Link to={`/profile/${product.sellerUsername}`}>\n                    {\" \"}\n                    {product.sellerDisplayName}\n                  </Link>\n                </Grid.Column>\n              </Grid>\n              {product.phoneNumber && (\n                <Grid verticalAlign='middle'>\n                  <Grid.Column width={2}>\n                    <Icon name='phone' size='large' color='grey' />\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                    <Label color='yellow' horizontal>\n                      {t(\"Contact number\")}{\" \"}\n                    </Label>\n                    {product.phoneNumber}\n                  </Grid.Column>\n                </Grid>\n              )}\n              {product.description && (\n                <Grid verticalAlign='middle'>\n                  <Grid.Column width={2}>\n                    <Icon name='info circle' size='large' color='grey' />\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                    <Label style={styles} color='yellow' horizontal>\n                      {t(\"Description\")}{\" \"}\n                    </Label>\n                    {product.description}\n                  </Grid.Column>\n                </Grid>\n              )}\n            </>\n          )}\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={16}>\n              {product.sellerUsername !== user?.userName ? (\n                <div className='ui two buttons'>\n                  <Button\n                    basic\n                    content={t(\"Contact the seller\")}\n                    color='blue'\n                    onClick={() => {\n                      setSize(\"small\")\n                      openModal(\n                        <ContactForm\n                          recipientUsername={product.sellerUsername}\n                          username={user?.userName!}\n                        />\n                      );\n                    }}\n                  />\n                  <Button\n                    color='instagram'\n                    content={\n                      productFollowed === true\n                        ? t(\"Unfollow this product\")\n                        : t(\"Follow this product\")\n                    }\n                    onClick={() => {\n                      if (!productFollowed) {\n                        handleFollowProduct(product.id);\n                      } else {\n                        handleUnfollowProduct(product.id);\n                      }\n                    }}\n                  />\n                </div>\n              ) : (\n                <Fragment>\n                  {!managing ? (\n                    <Button onClick={toggleManaging} color='instagram' fluid>\n                      {t(\"Manage\")}\n                    </Button>\n                  ) : (\n                    <div className='ui four buttons'>\n                      <Button\n                        basic\n                        color='olive'\n                        content={t(\"Mark sold\")}\n                        disabled={product.isSold}\n                        onClick={() => handleMarkSold(product.id!)}\n                      />\n                      <Button\n                        as={Link}\n                        to={`/manageProduct/${product.id}`}\n                        color='pink'\n                        basic\n                      >\n                        {t(\"Edit\")}\n                      </Button>\n\n                      <Button\n                        onClick={() => {\n                          handleDeleteProduct(product.id!);\n                        }}\n                        color='red'\n                      >\n                        {t(\"Delete\")}\n                      </Button>\n\n                      <Button\n                        onClick={() => {\n                          setManaging(false);\n                        }}\n                      >\n                        {t(\"Cancel\")}\n                      </Button>\n                    </div>\n                  )}\n                </Fragment>\n              )}\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </Grid.Column>\n\n      <Grid.Column width={8}>\n        <Segment raised>\n          {product.isSold && (\n            <Label style={{ position: \"absolute\" }} color='red' corner='right'>\n              SOLD\n            </Label>\n          )}\n          <Image src={product.photoUrl} fluid />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductDetailedInfo);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ProductDetailsStatistics: React.FC<{ product: IProduct }> = ({\n  product,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n\n    loadingInitial,\n    visitCounter,\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    visitCounter(product.id);\n  }, [product, visitCounter]);\n\n  if (loadingInitial || !product)\n    return <LoadingComponent content={t('Loading product details...')} />;\n\n  return (\n    <Segment raised>\n      <Header as='h2' icon textAlign='center'>\n        <Icon name='shopping basket' circular />\n        <Header.Content>{product.title}</Header.Content>\n        <Header sub>\n          {t(\"The\")} {product.title} {t(\"is published\")}{\" \"}\n          {formatDistance(new Date(product.datePublished), new Date(), {\n            addSuffix: true,\n          })}\n          , {t(\"seen\")} {product.numberSeen} {t(\"times and expires\")} {\" \"} \n          {formatDistance(new Date(product.inactivityExpirationDate), new Date(), {\n            addSuffix: true,\n          })}\n           \n        </Header>\n\n        <Header.Subheader>\n          {product.numberFollowed !== 0 &&\n            t(\"The\") +\n              product.title +\n              t(\"is in favorites of\") +\n              (product.numberFollowed > 1\n                ? product.numberFollowed + t(\"people\")\n                : product.numberFollowed + t(\"person\"))}\n        </Header.Subheader>\n      </Header>\n    </Segment>\n  );\n};\n\nexport default observer(ProductDetailsStatistics);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductDetailedInfo from \"./ProductDetailedInfo\";\nimport ProductDetailsStatistics from \"./ProductDetailsStatistics\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ProductDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    product,\n    loadProduct,\n    loadingInitial,\n    visitCounter\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    loadProduct(match.params.id); \n    visitCounter(match.params.id);\n  }, [loadProduct, match.params.id, visitCounter]); \n\n  if (loadingInitial || !product )\n    return <LoadingComponent content={t('Loading product details...')} />;\n\n  return (\n    <Grid>\n      <Grid.Row>\n          <Grid.Column width={16}>\n         \n          <ProductDetailsStatistics product={product}/>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n\n      <Grid.Column width={16}>\n        <ProductDetailedInfo product={product} />\n      </Grid.Column>\n      </Grid.Row>\n      \n      \n    </Grid>\n  );\n};\n\nexport default observer(ProductDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to the main page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../stores/rootStore';\n\nconst ModalContainer = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {modal: {open, body, size}, closeModal } = rootStore.modalStore;\n  return (\n    <Modal open={open} onClose={closeModal} size={size}>\n      <Modal.Content>{body}</Modal.Content>\n     \n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useTranslation } from 'react-i18next';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface IProps {\n  setFiles: (files: object[]) => void;\n}\n\nconst dropZoneStyles = {\n  border: 'dashed 3px',\n  borderColor: '#eee',\n  borderRadius: '5px',\n  paddingTop: '30px',\n  textAlign: 'center' as 'center',\n  height: '200px',\n};\n\nconst dropZoneActive = {\n  borderColor: 'green',\n};\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    setFiles(\n      acceptedFiles.map((file: any) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n    );\n  }, [setFiles]);\n  const { t } = useTranslation([\"widget\"]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style={\n        isDragActive ? { ...dropZoneStyles, ...dropZoneActive } : dropZoneStyles\n      }\n    >\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge'/>\n      <Header content={t('Drop image here or click to select file')}/>\n    </div>\n  );\n};\n\nexport default PhotoWidgetDropzone;\n","import React, { useRef } from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n  setImage: (file: Blob) => void;\n  imagePreview: string;\n}\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\n  const cropper = useRef<Cropper>(null);\n\n  const cropImage = () => {\n    if (\n      cropper.current &&\n      typeof cropper.current.getCroppedCanvas() === 'undefined'\n    ) {\n      return;\n    }\n    cropper &&\n      cropper.current &&\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n        setImage(blob);\n      }, 'image/jpeg');\n  };\n  return (\n    <Cropper\n      ref={cropper}\n      src={imagePreview}\n      style={{ height: 200, width: '100%' }}\n      // Cropper.js options\n      initialAspectRatio={1 / 1}\n      preview='.img-preview'\n      guides={false}\n      viewMode={1}\n      dragMode='move'\n      scalable={true}\n      cropBoxMovable={true}\n      cropBoxResizable={true}\n      crop={cropImage}\n      //   ref={cropperRef}\n    />\n  );\n};\n\nexport default PhotoWidgetCropper;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { Header, Grid, Button } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\nimport { useTranslation } from \"react-i18next\";\n// import { RootStoreContext } from \"../../stores/rootStore\";\n\ninterface IProps {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n  const [files, setFiles] = useState<any[]>([]);\n  const [image, setImage] = useState<Blob | null>(null);\n\n  const { t } = useTranslation([\"widget\"]);\n\n\n  // == this is to clean up the uploaded file from memory ==\n  useEffect(() => {\n \n      return () => {\n        files.forEach((file) => URL.revokeObjectURL(file.preview));\n    };\n  });\n\n  return (\n    <Fragment>\n      <Grid>\n     \n\n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header color='teal' sub content={t('Step 1 - Add Photo')} />\n          <PhotoWidgetDropzone setFiles={setFiles} />\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header sub color='teal' content={t('Step 2 - Resize image')} />\n          {files.length > 0 && (\n            <PhotoWidgetCropper\n              setImage={setImage}\n              imagePreview={files[0].preview}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={1} />\n       \n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header sub color='teal' content={t('Step 3 - Preview & Upload')} />\n          {files.length > 0 && (\n            <Fragment>\n              <div\n                className='img-preview'\n                style={{ minHeight: '200px', overflow: 'hidden' }}\n              />\n              <Button.Group widths={2}>\n                <Button\n                  positive\n                  icon='check'\n                  loading={loading}\n                  onClick={() => uploadPhoto(image!)}\n                />\n                <Button \n                icon='close'\n                disabled={loading}\n                onClick={() => setFiles([])}\n                />\n              </Button.Group>\n            </Fragment>\n          )}\n        </Grid.Column>       \n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PhotoUploadWidget);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst ProfilePhotos = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    isCurrentUser,\n    uploadPhoto,\n    uploadingPhoto,\n    setMainPhoto,\n    loading,\n    deletePhoto,\n  } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\n  const [target, setTarget] = useState<string | undefined>(undefined);\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\n    undefined\n  );\n  const handleUplaodImage = (photo: Blob) => {\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\n  };\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n          <Header floated='left' icon='image' content={t('Photos')} />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={addPhotoMode ? t('Cancel') : t('Add Photo')}\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handleUplaodImage}\n              loading={uploadingPhoto}\n            />\n          ) : (\n            <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n              {profile &&\n                profile.photos.map((photo) => (\n                  <Card key={photo.id}>\n                    <Image src={photo.url} />\n                    {isCurrentUser && (\n                      <Button.Group fluid widths={2}>\n                        <Button\n                          name={photo.id}\n                          basic\n                          positive\n                          content={t('Main')}\n                          onClick={(e) => {\n                            setMainPhoto(photo);\n                            setTarget(e.currentTarget.name);\n                          }}\n                          disabled={photo.isMain}\n                          loading={loading && target === photo.id}\n                        />\n                        <Button\n                          name={photo.id}\n                          disabled={photo.isMain}\n                          onClick={(e) => {\n                            deletePhoto(photo);\n                            setDeleteTarget(e.currentTarget.name)\n                          }}\n                          loading={loading && deleteTarget === photo.id}\n                          basic\n                          negative\n                          icon='trash'\n                        />\n                      </Button.Group>\n                    )}\n                  </Card>\n                ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfilePhotos);\n","import React from 'react';\nimport { IProfile } from '../../app/models/profile';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { observer } from 'mobx-react-lite';\nimport { combineValidators, isRequired } from 'revalidate';\nimport { Form, Button } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport TextAreaInput from '../../app/common/form/TextAreaInput';\nimport { useTranslation } from 'react-i18next';\n\n\ninterface IProps {\n  updateProfile: (profile: Partial<IProfile>) => void;\n  profile: IProfile;\n}\n\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    displayName: isRequired({ message: t(\"Display Name is required\") })\n  });\n  \n  return (\n    <FinalForm\n      onSubmit={updateProfile}\n      validate={validate}\n      initialValues={profile!}\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder={t('Display Name')}\n            value={profile!.displayName}\n          />\n          <Field\n            name='bio'\n            component={TextAreaInput}\n            rows={3}\n            placeholder={t('Bio')}\n            value={profile!.bio}\n          />\n          <Button \n            loading={submitting}\n            floated='right'\n            disabled={invalid || pristine}\n            positive\n            content={t('Update profile')}\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default observer(ProfileEditForm);","import React, { useContext, useState } from 'react';\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileEditForm from './ProfileEditForm';\nimport { observer } from 'mobx-react-lite';\nimport { useTranslation } from 'react-i18next';\n\nconst ProfileDescription = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  const [editMode, setEditMode] = useState(false);\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={t(\"About\") + \" \" + profile!.displayName}\n          />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={editMode ? t('Cancel') : t('Edit Profile')}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\n          ) : (\n            <span>{profile!.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileDescription);","import React from 'react';\nimport { Card, Image, Icon} from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IProfile } from '../../app/models/profile';\nimport { useTranslation } from 'react-i18next';\n\ninterface IProps{\n    profile: IProfile\n}\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\n  const { t } = useTranslation([\"social\"]);\n\n  return (\n    <Card as={Link} to={`/profile/${profile.username}`}>\n      <Image src={profile.image || '/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName || 'display name'}</Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div>\n          <Icon name='user' />\n          {profile.followersCount} {t(\"Followers\")}\n        </div>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default ProfileCard;\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    followings,\n    loading,\n    activeTab\n  } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  return (\n    <Tab.Pane loading={loading}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user circle'\n            content={\n              activeTab === 7\n                ? t(\"People following\") +' '+ profile!.displayName \n                : t(\"People\") + ' ' + profile!.displayName + \" \" + t(\"is following\")\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n              {followings.map((profile) => (\n                  <ProfileCard key={profile.username} profile={profile}/>\n              ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default ProfileFollowings;\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { useTranslation } from 'react-i18next';\n\n\nconst ProfileEvents = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserActivities,\n    profile,\n    loadingActivities,\n    userActivities\n  } = rootStore.profileStore!;\n\n  const { t } = useTranslation([\"social\"]);\n  const panes = [\n    { menuItem: t('Active'), pane: { key: 'active' } },\n    { menuItem: t('Completed'), pane: { key: 'completed' } },\n    { menuItem: t('In future'), pane: { key: 'in future' } },\n  ];\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 0:\n        predicate = 'active';\n        break;\n      case 1:\n        predicate = 'completed';\n        break;\n      case 2:\n        predicate = 'in future';\n        break;\n      default:\n        break;\n    }\n    loadUserActivities(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='blogger' content={t('Motorcycle Diaries')} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userActivities.map((activity: IUserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.id}`}\n                key={activity.id}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileEvents);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { IUserMotofy } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ProfileMotofies = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserMotofies, profile, loadingMotofies, userMotofies } =\n    rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n  const panes = [\n    { menuItem: t(\"Embraced\"), pane: { key: \"iEmbraced\" } },\n    { menuItem: t(\"Published\"), pane: { key: \"iPublished\" } },\n    { menuItem: t(\"Rated\"), pane: { key: \"iRated\" } },\n  ];\n\n  useEffect(() => {\n    loadUserMotofies(profile!.username);\n  }, [loadUserMotofies, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iPublished\";\n        break;\n      case 2:\n        predicate = \"iRated\";\n        break;\n      default:\n        predicate = \"iEmbraced\";\n        break;\n    }\n    loadUserMotofies(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingMotofies}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='motorcycle' content={\"Motofies\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userMotofies.map((motofy: IUserMotofy) => (\n              <Card as={Link} to={`/gallery/${motofy.id}`} key={motofy.id}>\n                <Image\n                  src={motofy.photoUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{motofy.name}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(motofy.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(motofy.yearOfProduction), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileMotofies);\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport {  IUserForumpost } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { useTranslation } from 'react-i18next';\n\n\nconst ProfileForumposts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserForumposts,\n    profile,\n    loadingForumposts,\n    userForumposts\n  } = rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t('Asked'), pane: { key: 'iAsked' } },\n    { menuItem: t('Rated'), pane: { key: 'iRated' } },\n  ];\n  useEffect(() => {\n    loadUserForumposts(profile!.username);\n  }, [loadUserForumposts, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'iRated';\n        break;\n      default:\n        predicate = 'iAsked';\n        break;\n    }\n    loadUserForumposts(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingForumposts}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='question circle' content={'Forumposts'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userForumposts.map((forumpost: IUserForumpost) => (\n              <Card\n                as={Link}\n                to={`/forum/${forumpost.id}`}\n                key={forumpost.id}\n              >\n                <Image\n                  src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{forumpost.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(forumpost.dateAdded), 'do LLL')}</div>\n                    <div>{format(new Date(forumpost.dateAdded), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileForumposts);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { IUserMechanic } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ProfileMechanics = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserMechanics, profile, loadingMechanics, userMechanics } =\n  rootStore.profileStore!;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t(\"Published\"), pane: { key: \"iPublished\" } },\n    { menuItem: t(\"Rated\"), pane: { key: \"iRated\" } },\n    { menuItem: t(\"Recommended\"), pane: { key: \"iRecommend\" } },\n  ];\n\n  useEffect(() => {\n    loadUserMechanics(profile!.username);\n  }, [loadUserMechanics, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    // let predicate = undefined ?? 'iEmbraced';\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iRated\";\n        break;\n      case 2:\n        predicate = \"iRecommend\";\n        break;\n      default:\n        predicate = \"iPublished\";\n        break;\n    }\n    loadUserMechanics(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingMechanics}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='servicestack' content={\"Mechanics\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userMechanics.map((mechanic: IUserMechanic) => (\n              <Card\n                as={Link}\n                to={`/mechanics/${mechanic.id}`}\n                key={mechanic.id}\n              >\n                <Image\n                  src={mechanic.photoUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{mechanic.name}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(mechanic.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(mechanic.datePublished), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileMechanics);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport {  IUserProduct } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ProfileProducts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserProducts, profile, loadingProducts, userProducts } =\n  rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t(\"I am selling\"), pane: { key: \"iAmSelling\" } },\n    { menuItem: t(\"I sold\"), pane: { key: \"iSold\" } },\n  ];\n  useEffect(() => {\n    loadUserProducts(profile!.username);\n  }, [loadUserProducts, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iSold\";\n        break;\n      case 2:\n        predicate = \"iAmSelling\";\n        break;\n      default:\n       \n        break;\n    }\n    loadUserProducts(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingProducts}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='calendar' content={\"Products\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userProducts.map((product: IUserProduct) => (\n              <Card\n                as={Link}\n                to={`/product/${product.id}`}\n                key={product.id}\n              >\n                <Image\n                  src={product.pictureUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{product.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(product.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(product.datePublished), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileProducts);\n","import React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport ProfilePhotos from \"./ProfilePhotos\";\nimport ProfileDescription from \"./ProfileDescription\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileMotofies from \"./ProfileMotofies\";\nimport ProfileForumposts from \"./ProfileForumposts\";\nimport ProfileMechanics from \"./ProfileMechanics\";\nimport ProfileProducts from \"./ProfileProducts\";\nimport { useTranslation } from \"react-i18next\";\n\n// const panes = [\n//   { menuItem: \"About\", render: () => <ProfileDescription /> },\n//   { menuItem: \"Photos\", render: () => <ProfilePhotos /> },\n//   {\n//     menuItem: \"Motofies!\",\n//     render: () => <ProfileMotofies />,\n//   },\n//   {\n//     menuItem: \"Motorcycle Diaries\",\n//     render: () => <ProfileActivities />,\n//   },\n//   {\n//     menuItem: \"Forumposts\",\n//     render: () => <ProfileForumposts />,\n//   },\n//   {\n//     menuItem: \"Mechanics\",\n//     render: () => <ProfileMechanics />,\n//   },\n//   {\n//     menuItem: \"Products\",\n//     render: () => <ProfileProducts />,\n//   },\n//   {\n//     menuItem: \"Followers\",\n//     render: () => <ProfileFollowings />,\n//   },\n//   {\n//     menuItem: \"Followings\",\n//     render: () => <ProfileFollowings />,\n//   },\n// ];\nconst mobilePanes = [\n  {\n    menuItem: { key: \"About\", icon: \"user\" },\n    render: () => <ProfileDescription />,\n  },\n  {\n    menuItem: { key: \"Photos\", icon: \"image\" },\n    render: () => <ProfilePhotos />,\n  },\n  {\n    menuItem: { key: \"Motofies!\", icon: \"motorcycle\" },\n    render: () => <ProfileMotofies />,\n  },\n  {\n    menuItem: { key: \"Motorcycle Diaries\", icon: \"blogger\" },\n    render: () => <ProfileActivities />,\n  },\n  {\n    menuItem: { key: \"Forumposts\", icon: \"question circle\" },\n    render: () => <ProfileForumposts />,\n  },\n  {\n    menuItem: { key: \"Mechanics\", icon: \"servicestack\" },\n    render: () => <ProfileMechanics />,\n  },\n  {\n    menuItem: { key: \"Products\", icon: \"shopping bag\" },\n    render: () => <ProfileProducts />,\n  },\n  {\n    menuItem: { key: \"Followers\", icon: \"user circle\" },\n    render: () => <ProfileFollowings />,\n  },\n  {\n    menuItem: { key: \"Followings\", icon: \"users\" },\n    render: () => <ProfileFollowings />,\n  },\n];\n\ninterface IProps {\n  setActiveTab: (activeIndex: any) => void;\n}\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\n\n  const { t } = useTranslation([\"social\"]);\n\n\n  const panes = [\n    { menuItem: t(\"About\"), render: () => <ProfileDescription /> },\n    { menuItem: t(\"Photos\"), render: () => <ProfilePhotos /> },\n    {\n      menuItem: \"Motofies!\",\n      render: () => <ProfileMotofies />,\n    },\n    {\n      menuItem: t(\"Motorcycle Diaries\"),\n      render: () => <ProfileActivities />,\n    },\n    {\n      menuItem: t(\"Forumposts\"),\n      render: () => <ProfileForumposts />,\n    },\n    {\n      menuItem: t(\"Mechanics\"),\n      render: () => <ProfileMechanics />,\n    },\n    {\n      menuItem: t(\"Products\"),\n      render: () => <ProfileProducts />,\n    },\n    {\n      menuItem: t(\"Followers\"),\n      render: () => <ProfileFollowings />,\n    },\n    {\n      menuItem: t(\"Followings\"),\n      render: () => <ProfileFollowings />,\n    },\n  ];\n  return (\n    <>\n      <Tab\n        className='mobile hidden'\n        menu={{ fluid: true, vertical: true }}\n        menuPosition='right'\n        panes={panes}\n        onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n      />\n      {/* , style:{width: '0.9em' */}\n      <Tab\n        className='mobile only'\n        menu={{ fluid: true, style:{fontSize: '0.85em'} }}\n        panes={mobilePanes}\n        onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n      />\n    </>\n  );\n};\n// == so that the switching is disabled ==\n// activeIndex={1}\n\nexport default ProfileContent;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport {\n  Segment,\n  Item,\n  Header,\n  Button,\n  Grid,\n  Statistic,\n  Divider,\n  Reveal,\n  Icon,\n} from \"semantic-ui-react\";\nimport { IProfile } from \"../../app/models/profile\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport ContactForm from \"./forms/ContactForm\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  profile: IProfile;\n  loading: boolean;\n  isCurrentUser: boolean;\n  follow: (username: string) => void;\n  unfollow: (username: string) => void;\n}\nconst ProfileHeader: React.FC<IProps> = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { onlineUsers } = rootStore.presenceStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const handleSendMessage = () => {\n    openModal(\n      <ContactForm\n        recipientUsername={profile.username}\n        username={user!.userName}\n      />\n    );\n  };\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column computer={12} mobile={16}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size='tiny'\n                src={profile.image || \"/assets/user.png\"}\n              />\n              <Item.Content verticalAlign='middle'>\n                <Header as='h1'>\n                {onlineUsers.includes(profile.username) && (\n                  <Icon\n                    name='check circle'\n                    className='isOnline'\n                    bordered\n                    circular\n                    size='small'\n                  />\n                )}\n                  {profile.displayName}\n                \n                </Header>\n              </Item.Content>\n              {user?.userName !== profile.username && (\n                <Button\n                  circular\n                  content={t(\"Send Message\")}\n                  onClick={handleSendMessage}\n                />\n              )}\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column computer={4} mobile={16}>\n          <Statistic.Group widths={2}>\n            <Statistic label={t(\"Followers\")} value={profile.followersCount} />\n            <Statistic label={t(\"Following\")} value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          {!isCurrentUser && (\n            <Reveal animated='move'>\n              <Reveal.Content visible style={{ width: \"100%\" }}>\n                <Button\n                  fluid\n                  color='instagram'\n                  content={\n                    profile.following ? t(\"Following\") : t(\"Not following\")\n                  }\n                />\n              </Reveal.Content>\n              <Reveal.Content hidden>\n                <Button\n                  loading={loading}\n                  fluid\n                  basic\n                  color={profile.following ? \"red\" : \"instagram\"}\n                  content={profile.following ? t(\"Unfollow\") : t(\"Follow\")}\n                  onClick={\n                    profile.following\n                      ? () => [\n                          unfollow(profile.username),\n                          addFeedItem(\n                            uuid(),\n                            \"Unfollows You\",\n                            profile.username\n                          ),\n                        ]\n                      : () => [\n                          follow(profile.username),\n                          addFeedItem(\n                            uuid(),\n                            \"Started Following You\",\n                            profile.username\n                          ),\n                        ]\n                  }\n                />\n              </Reveal.Content>\n            </Reveal>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(ProfileHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\ninterface RouteParams {\n  username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {}\n\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    loadingProfile,\n    loadProfile,\n    follow,\n    unfollow,\n    isCurrentUser,\n    loading,\n    setActiveTab,\n  } = rootStore.profileStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  useEffect(() => {\n    loadProfile(match.params.username);\n  }, [loadProfile, match]);\n\n  if (loadingProfile) return <LoadingComponent content={t('Loading profile...')} />;\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <ProfileHeader\n          // username={user?.userName!}\n          profile={profile!}\n          isCurrentUser={isCurrentUser}\n          follow={follow}\n          unfollow={unfollow}\n          loading={loading}\n        />\n        <ProfileContent setActiveTab={setActiveTab} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProfilePage);\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Link } from \"react-router-dom\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { observer } from \"mobx-react-lite\";\nimport { formatDistance } from \"date-fns\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst GaleryDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, motofy } =\n    rootStore.motofyStore;\n\n  const connectionArgument = \"RecieveMotofyComment\";\n\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n\n    createHubConnection(motofy!.id, connectionArgument); \n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, motofy]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Comment this motofy\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{maxWidth:'none'}}>\n          {motofy &&\n            motofy.commentMotofies &&\n            motofy.commentMotofies.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  fluid\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    \n    </Fragment>\n  );\n};\n\nexport default observer(GaleryDetailedChat);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  motofyId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ motofyId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteMotofy } = rootStore.motofyStore;\n  const { closeModal } = rootStore.modalStore;\n  const {addFeedItem} = rootStore.feedStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteMotofy = (id: string) => {\n    addFeedItem(id, 'Deleted Motofy');\n    deleteMotofy(id);\n    closeModal();\n    history.push(`/gallery`);\n  };\n\n  const cancelDeleteMotofy = () => {\n    closeModal();\n  };\n\n  let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteMotofy(motofyId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteMotofy()}\n            content={t('No, keep it')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Button, Image, Icon } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst motofyImageStyle = {\n  filter: \"brightness(90%)\",\n  border: \"white solid 1px\",\n  borderRadius: \"5px\",\n};\nconst buttonVisitorStyle = {\n  borderRadius: \"7px\",\n  backgroundColor: \"rgb(29, 115, 152)\",\n};\n\nconst motofyImageTextStyle = {\n  position: \"absolute\",\n  top: \"1%\",\n  right: \"4%\",\n  fontSize: \"1.6vw\",\n  padding: '.7vw',\n  color: \"#FA5\",\n  background: \"rgba(51, 170, 51, .1)\",\n  borderRadius: \"30%\",\n};\n\ninterface IProps {\n  motofy: IMotofy;\n}\nconst GaleryDetailedHeader: React.FC<IProps> = ({ motofy }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const { embraceMotofy, unembraceMotofy, loading } = rootStore.motofyStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  const [username, setUsername] = useState('');\n\n  useEffect(()=> {\n    let user = motofy.publisherUsername;\n    setUsername(user)\n   \n  },[motofy])\n\n  const handleDeleteMotofy = (id: string) => {\n    openModal(<ConfirmDelete motofyId={id} />);\n  };\n  const handleEmbraceMotofy = (id: string) => {\n    embraceMotofy(id);\n    addFeedItem(id, \"Embraced Motofy\", username);\n  };\n  const handleUnembraceMotofy = (id: string) => {\n    unembraceMotofy(id);\n    addFeedItem(id, \"Unembraced Motofy\", username);\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={motofy!.photoUrl || `/assets/placeholder.png`}\n          fluid\n          style={motofyImageStyle}\n        />\n        <Segment basic style={motofyImageTextStyle}>\n                <Header\n                  size='large'\n                  content={motofy.name}\n                  style={{ color: \"#FA5\" }}\n                />\n        </Segment>\n      </Segment>\n      <Segment clearing attached='bottom'>\n        {motofy.publisherUsername === user!.userName ? (\n          <Fragment>\n            {!managing ? (\n              <Button onClick={toggleManaging} color='instagram' fluid>\n                {t(\"Manage\")}\n              </Button>\n            ) : (\n              <div className='ui three buttons'>\n                <Button\n                  as={Link}\n                  to={`/manageGallery/${motofy.id}`}\n                  color='pink'\n                  basic\n                >\n                  {t(\"Edit\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    handleDeleteMotofy(motofy.id!);\n                  }}\n                  color='google plus'\n                \n                >\n                  {t(\"Delete\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    setManaging(false);\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </div>\n            )}\n          </Fragment>\n        ) : motofy.embraced ? (\n          <Button\n            style={buttonVisitorStyle}\n            negative\n            loading={loading}\n            fluid\n            onClick={() => handleUnembraceMotofy(motofy.id!)}\n          >\n            {t(\"Embraced\")}\n          </Button>\n        ) : (\n          <Button\n            style={buttonVisitorStyle}\n            loading={loading}\n            fluid\n            onClick={() => handleEmbraceMotofy(motofy.id)}\n            color='teal'\n          >\n            <Icon name='heart' />\n            {t(\"Embrace\")}\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GaleryDetailedHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { Item, ItemExtra, Rating, RatingProps, Segment } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface IProps {\n  motofy: IMotofy;\n}\nconst GaleryDetailedRating: React.FC<IProps> = ({ motofy }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { rateMotofy } = rootStore.motofyStore;\n  const { user } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  let username = user?.userName;\n  const [rated, setRated] = useState(false);\n  const [userRated, setUserRated] = useState<string | number | undefined>();\n  \n  const [notifyeeUsername, setNotifyeeUsername] = useState('');\n\n\n  useEffect(() => {\n    setNotifyeeUsername(motofy.publisherUsername);\n\n    if(motofy.motofyScores.length > 0) {\n\n      if (motofy.motofyScores.some((x) => x.username === username)) {\n        setUserRated(\n          motofy.motofyScores.find((x) => x.username === username).score\n        );\n        setRated(true);\n      } \n     \n    }\n\n\n  }, [motofy.motofyScores, username, motofy.publisherUsername]); \n\n\n  const handleRate = (e: any, rating: RatingProps) => {\n\n    rateMotofy(rating.rating, motofy, user);\n    setUserRated(rating.rating);\n    e.preventDefault();\n    setRated(true);\n    addFeedItem(motofy.id, 'Rated Motofy', notifyeeUsername)\n\n  };\n  return (\n    <Segment.Group>\n      <Segment style={{\n          display: 'flex', \n          flexDirection: 'column', \n          textAlign: 'center', \n          justifyContent: 'space-around'}}>\n        <Item.Group>\n\n        <Item.Header>{t(\"Average Rating:\")} {motofy.averageRating}</Item.Header>\n        {motofy.publisherUsername !== user!.userName ? (\n          <Fragment>\n            <Rating\n              icon='star'\n              size='large'\n              onRate={(e, rating) => {\n                handleRate(e, rating);\n              }}\n              defaultRating={motofy.averageRating}\n              maxRating={5}\n              disabled={rated}\n            />\n            {userRated ? (\n              <ItemExtra>{t(\"You Gave This Motofy \")} {userRated} {t(\"Stars\")}</ItemExtra>\n            ) : (\n              <ItemExtra>{t(\"You Have Not Rated Yet\")}</ItemExtra>\n            )}\n          </Fragment>\n        ) : (\n          <Fragment>{t(\"NB: You cannot rate your own motofy\")}</Fragment>\n        )}\n        </Item.Group>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GaleryDetailedRating);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, List, Item, Label, Image, Grid } from \"semantic-ui-react\";\nimport { IEmbracer } from \"../../../app/models/motofy\";\nimport { useTranslation } from \"react-i18next\";\n\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\n\nconst GaleryDetailedSidebar: React.FC<IProps> = ({ embracers }) => {\n  const { t } = useTranslation([\"gallery\"]);\n  \n  const person = t(\"Person\");\n  const persons = t(\"People\");\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {embracers.length} {embracers.length === 1 ? person : persons}{\" \"}\n        {t(\"embraced\")}\n      </Segment>\n      <>\n        <List divided>\n          <Item.Group divided>\n            {embracers.map((embracer) => (\n              <Segment key={embracer.username} style={{ position: \"relative\" }}>\n                <Grid>\n                  <Grid.Column width={4}>\n                    <Image\n                      size='mini'\n                      circular\n                      src={embracer.image || \"/assets/user.png\"}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={12}>\n                        <Link to={`/profile/${embracer.username}`}>\n                          <Item.Extra as='h5'>\n                            {embracer.displayName}\n                           \n                          </Item.Extra>\n\n                          {embracer.isOwner && (\n                            <Label\n                              style={{ position: \"top\" }}\n                              color='teal'\n                              corner='right'\n                            >\n                              Pub\n                            </Label>\n                          )}\n                        </Link>\n                      </Grid.Column>\n                </Grid>\n              </Segment>\n            ))}\n          </Item.Group>\n        </List>\n      </>\n    </Fragment>\n  );\n};\n\nexport default observer(GaleryDetailedSidebar);\n","import React from \"react\";\nimport { Segment, Grid, Icon, Image, GridRow } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GalleryDetailedInfo: React.FC<{ motofy: IMotofy }> = ({ motofy }) => {\n  const iconStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: \"right\",\n    justifyContent: \"center\",\n  };\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  return (\n    <Segment.Group>\n      <Segment\n        attached='top'\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          textAlign: \"left\",\n          justifyContent: \"center\",\n          // color: 'red'\n        }}\n      >\n        <Grid verticalAlign='middle'>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Image size='mini' src={motofy.brandLogoUrl} />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <p>\n                <strong>{motofy.brandName} - </strong> {motofy.model}\n              </p>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Icon\n                size='large'\n                color='teal'\n                name='info'\n                style={{ iconStyle }}\n              />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <p style={{ whiteSpace: \"pre-wrap\" }}>{motofy.description}</p>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Icon name='calendar' size='large' color='teal' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <span>{t(\"Made\")} {motofy.yearOfProduction}</span>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {t(\"In\")} {motofy.city}, {motofy.countryName}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='motorcycle' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {\" \"}\n              {t(\"Engine\")} {motofy.cubicCentimeters}{t(\"cc\")}, {t(\"done\")}{\" \"}\n              {motofy.numberOfKilometers} {t(\"kilometers\")}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='euro sign' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {\" \"}\n              {t(\"Price paid\")} {motofy.pricePaid} {t(\"Euro\")}, {t(\" present value\")}{\" \"}\n              {motofy.estimatedValue} Euro\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryDetailedInfo;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport GaleryDetailedChat from \"./GaleryDetailedChat\";\nimport GaleryDetailedHeader from \"./GaleryDetailedHeader\";\nimport GaleryDetailedRating from \"./GaleryDetailedRating\";\nimport GaleryDetailedSidebar from \"./GaleryDetailedSidebar\";\nimport GalleryDetailedInfo from \"./GalleryDetailedInfo\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DetailParams {\n  id: string;\n}\nconst GaleryDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { motofy, loadMotofy, loadingInitial } = rootStore.motofyStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  useEffect(() => {\n    loadMotofy(match.params.id);\n  }, [loadMotofy, match.params.id]);\n\n  if (loadingInitial || !motofy)\n    return <LoadingComponent content={t('Loading motofies...')} />;\n\n  return (\n    <Grid>     \n      <Grid.Column computer={12} mobile={16} >\n        <GaleryDetailedHeader motofy={motofy} />\n        <GaleryDetailedRating motofy={motofy}/>\n        <GalleryDetailedInfo motofy={motofy} />\n\n        <GaleryDetailedChat />\n      </Grid.Column>\n     \n      <Grid.Column computer={4} mobile={16} >\n        <GaleryDetailedSidebar embracers={motofy.embracers} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GaleryDetails);\n","import { formatDistance } from \"date-fns\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Divider,\n  Header,\n  Icon,\n  Item,\n  Label,\n  Segment,\n} from \"semantic-ui-react\";\nimport HeaderSubHeader from \"semantic-ui-react/dist/commonjs/elements/Header/HeaderSubheader\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumListItem: React.FC<{ forumpost: IForumpost }> = ({ forumpost }) => {\n  const { t } = useTranslation([\"forum\"]);\n\n  const Response = \" \" + t(\"Response\");\n  const Responses = \" \" + t(\"Responses\");\n  const Member = \" \" + t(\"Member\");\n  const Members = \" \" + t(\"Members\");\n  const Rating = \" \" + t(\"Rating\");\n  const Ratings = \" \" + t(\"Ratings\");\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Header as='h1' floated='right'>\n          {forumpost.title}\n          <HeaderSubHeader></HeaderSubHeader>\n        </Header>\n        <HeaderSubHeader floated='right'>\n          <Label pointing='below' content={forumpost.category} />\n\n          {/* <p>\n          Posted by{\" \"}\n          <Link to={`/profile/${forumpost.userName}`}>\n            {forumpost.displayName}\n          </Link>\n          </p> */}\n        </HeaderSubHeader>\n\n        <Divider clearing />\n        <Item>\n          <Item.Image\n            size='tiny'\n            // circular\n            src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n            floated='left'\n          />\n          <Item.Content>\n            <Item.Description>\n              <>{forumpost.body}</>\n            </Item.Description>\n\n            <Item.Extra></Item.Extra>\n          </Item.Content>\n        </Item>\n      </Segment>\n\n      <Segment>\n        <Icon name='clock' /> {t(\"Posted\")}{\" \"}\n        {formatDistance(new Date(forumpost.dateAdded), new Date())} {t(\"ago by\")}{\" \"}\n        <Link to={`/profile/${forumpost.userName}`}>\n          {forumpost.displayName}\n        </Link>\n        {forumpost.commenters?.length! > 0 && (\n          <Segment>\n            {forumpost.numberOfComents! > 1\n              ? forumpost.numberOfComents + Response\n              : forumpost.numberOfComents + Responses}{\" \"}\n            {t(\"from\")}{\" \"}\n            {forumpost.commenters?.length! > 1\n              ? forumpost.commenters?.length + Members\n              : forumpost.commenters?.length + Member}\n          </Segment>\n        )}\n        {forumpost.forumpostRatings?.length! > 0 && (\n          <Segment>\n            {forumpost.forumpostRatings!.length > 1\n              ? forumpost.forumpostRatings?.length + Ratings\n              : forumpost.forumpostRatings?.length + Rating}{\" \"}\n            {t(\"from\")}{\" \"}\n            {forumpost.forumpostRatings?.length! > 1\n              ? forumpost.forumpostRatings?.length + Members\n              : forumpost.forumpostRatings?.length + Member}\n          </Segment>\n        )}\n      </Segment>\n      <Segment>\n        <Button\n          as={Link}\n          to={`/forum/${forumpost.id}`}\n          fluid\n          content={t('View')}\n          color='instagram'\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ForumListItem;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ForumListItem from \"./ForumListItem\";\n\nconst ForumList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { forumpostsByDate } = rootStore.forumPostStore; //forumposts,\n\n  return (\n    <Fragment>\n      {forumpostsByDate.map(([group, forumposts]) => (\n        <Fragment key={group}>\n          <Item.Group divided>\n            {forumposts.map((forumpost) => (\n              <ForumListItem forumpost={forumpost} key={forumpost.id} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ForumList);\n","export const category = [\n    { key: 'Offer information', text: 'Offer information', value: 'Offer information' },\n    { key: 'Ask for assistance', text: 'Ask for assistance', value: 'Ask for assistance' },\n    { key: 'Ask for advice', text: 'Ask for advice', value: 'Ask for advice' },\n  ];","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Dropdown, Input, Divider } from \"semantic-ui-react\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.forumPostStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const styles = {\n    textAlign: \"center\"\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Menu.Item>\n          <Dropdown\n            placeholder={t('Filter by category')}\n            selection\n            fluid\n            search\n            options={category}\n            onChange={handleOnChange}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"arrows alternate\"}\n          content={t(\"All Posts\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iAsked\")}\n          onClick={() => setPredicate(\"iAsked\", \"true\")}\n          color={\"blue\"}\n          name={\"iAsked\"}\n          icon={\"question circle outline\"}\n          content={t(\"I Asked\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iRated\")}\n          onClick={() => setPredicate(\"iRated\", \"true\")}\n          color={\"blue\"}\n          name={\"iRated\"}\n          icon={\"heart outline\"}\n          content={t(\"I rated\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"trending\")}\n          onClick={() => setPredicate(\"trending\", \"true\")}\n          color={\"blue\"}\n          name={\"trending\"}\n          icon={\"globe\"}\n          content={t(\"Trending\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          icon={\"users\"}\n          content={t(\"By people I follow\")}\n          style={ styles }\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ForumListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n      {/* style={{ marginTop: 50 }} */}\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ForumListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchForum = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.forumPostStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchForum;\n","import React, { useContext } from \"react\";\nimport { Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst SearchForumByCategory = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.forumPostStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Dropdown\n          placeholder={t('Filter by category')}\n          selection\n          fluid\n          search\n          options={category}\n          onChange={handleOnChange}\n          clearable\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchForumByCategory;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst ForumMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.forumPostStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info.toUpperCase()}</div>\n  );\n};\n\nexport default observer(ForumMobileInfo);","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SearchForum from \"../modals/SearchForum\";\nimport SearchForumByCategory from \"../modals/SearchForumByCategory\";\nimport ForumMobileInfo from \"./ForumMobileInfo\";\n\nconst ForumMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.forumPostStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  \n  useEffect(()=>{\n    setInfo(t('All posts'))\n  },[setInfo, t])\n\n  const handleSearch = () => {\n    setPredicate(\"search\", \"true\");\n    openModal(<SearchForum />);\n  };\n  const handleSearchByCategory = () => {\n    setPredicate(\"category\", \"true\");\n    openModal(<SearchForumByCategory />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"iAsked\":\n        setInfo(t(\"My posts\"));\n        break;\n      case \"iRated\":\n        setInfo(t(\"Posts I rated\"));\n        break;\n      case \"trending\":\n        setInfo(t(\"Trending\"));\n        break;\n      case \"iFollow\":\n        setInfo(t(\"Posts I follow\"));\n        break;\n      case \"category\":\n        setInfo(t(\"Search by category\"));\n        break;\n      case \"search\":\n        setInfo(t(\"Search all\"));\n        break;\n      default:\n        setInfo(t(\"All posts\"));\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Menu fluid widths={7}>\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iAsked\")}\n          onClick={() => {\n            setPredicate(\"iAsked\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"user circle\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iRated\")}\n          onClick={() => {\n            setPredicate(\"iRated\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"heart outline\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"trending\")}\n          onClick={() => {\n            setPredicate(\"trending\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"diamond\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => {\n            setPredicate(\"iFollow\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"category\")}\n          onClick={() => {\n            handleSearchByCategory();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"filter\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"search\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n      </Menu>\n      <ForumMobileInfo />\n    </>\n  );\n};\n\nexport default observer(ForumMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Button,\nimport ForumList from \"./ForumList\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ForumFilters from \"./ForumFilters\";\nimport ForumListItemPlaceholder from \"./ForumListItemPlaceholder\";\nimport ForumMobileFilters from \"./ForumMobileFilters\";\n\nconst ForumDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadForumPosts, loadingInitial, setPage, page, totalPages } =\n    rootStore.forumPostStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadForumPosts().then(() => setLoadingNext(false));\n  };\n  useEffect(() => {\n    loadForumPosts();\n  }, [loadForumPosts]);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column mobile={16} tablet={16} className='mobile only'>\n          <ForumMobileFilters />\n        </Grid.Column>\n        <Grid.Column computer={11} mobile={16}>\n          {loadingInitial && page === 0 ? (\n            <ForumListItemPlaceholder />\n          ) : (\n            <InfiniteScroll\n              pageStart={0}\n              loadMore={handleGetNext}\n              hasMore={!loadingNext && page + 1 < totalPages}\n              initialLoad={false}\n            >\n              <ForumList />\n            </InfiniteScroll>\n          )}\n        </Grid.Column>\n        <Grid.Column width={5} className='mobile hidden'>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <ForumFilters />\n          </Sticky>\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default observer(ForumDashboard);\n","import { IComment } from \"./comment\";\n\nexport interface IForumpostEnvelope {\n  forumposts: IForumpost[];\n  forumpostCount: number\n\n}\n\nexport interface IForumpost {\n  id: string;\n  title: string;\n  body: string;\n  dateAdded: string;\n  displayName: string;\n  userName: string;\n  authorPhotoUrl: string;\n  category: string;\n  commentForumPosts: IComment[];\n  numberOfComents?: number;\n  commenters?: IComment [];\n  forumpostRatings?: any [];\n  forumpostRating: number;\n}\n\nexport class ForumpostFormValues {\n  id?: string;\n  title: string = '';\n  body: string = '';\n  dateAdded: string = '';\n  category: string = '';\n\n  constructor(init?: ForumpostFormValues) {\n    if (init)\n      Object.assign(this, init);\n  }\n}\n\nexport interface IRateForumpost {\n  id: string;\n  value: string;\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button, Form, Grid, Label, Segment } from \"semantic-ui-react\";\nimport { ForumpostFormValues } from \"../../../app/models/forumpost\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n}\nconst ForumForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createForumpost, editForumpost, submitting, loadForumPost } =\n    rootStore.forumPostStore;\n\n  const { user } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [editMode, setEditMode] = useState(false);\n\n  const [forumpost, setForumpost] = useState(new ForumpostFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    body: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n  });\n\n  useEffect(() => {\n    if (match.params.id) {\n      setEditMode(true);\n\n      setLoading(true);\n      loadForumPost(match.params.id)\n        .then((forumpost) => setForumpost(new ForumpostFormValues(forumpost)))\n        .finally(() => setLoading(false));\n    }\n  }, [loadForumPost, match.params.id, setEditMode]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const { ...forumpost } = values;\n    if (!forumpost.id) {\n      let newForumpost = {\n        ...forumpost,\n        id: newId,\n        dateAdded: new Date().toISOString(),\n        displayName: user?.displayName,\n        userName: user?.userName,\n      };\n      createForumpost(newForumpost);\n      addFeedItem(newId, \"Added Forumpost\");\n    } else {\n      editForumpost(forumpost);\n    }\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column \n      computer={10} mobile={16}\n      >\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={forumpost}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                {editMode && <Label content={t('Title')} />}\n\n                <Field\n                  placeholder={t('Title')}\n                  name='title'\n                  value={forumpost.title}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Body')} />}\n\n                <Field\n                  placeholder={t('Body')}\n                  name='body'\n                  rows={4}\n                  value={forumpost.body}\n                  component={TextAreaInput}\n                />\n                {editMode && <Label content={t('Category')} />}\n\n                <Field\n                  placeholder={t('Category')}\n                  name='category'\n                  options={category}\n                  value={forumpost.category}\n                  component={SelectInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content={t('Submit')}\n                />\n                <Button\n                  floated='right'\n                  disabled={loading}\n                  type='button'\n                  content={t('Cancel')}\n                  onClick={\n                    forumpost.id\n                      ? () => history.push(`/forum/${forumpost.id}`)\n                      : () => history.push(\"/forum\")\n                  }\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumForm);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, forumpost } =\n    rootStore.forumPostStore;\n\n  const connectionArgument = \"RecieveForumPostComment\";\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n    createHubConnection(forumpost!.id, connectionArgument); //, mechanic!\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, forumpost]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Comments\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{ maxWidth: \"none\" }}>\n          {forumpost &&\n            forumpost.commentForumPosts &&\n            forumpost.commentForumPosts.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumDetailedChat);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Segment, Image, Item } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\n\nconst activityImageStyle = {\n  filter: \"brightness(90%)\",\n};\n\nconst activityImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"15%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\nconst ForumDetailedHeader: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n \n  return (\n    <Segment.Group raised>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment basic style={activityImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <p>{forumpost.category}</p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      \n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedHeader);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Grid, Icon, Divider, Rating } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ForumDetailedInfo: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { rated } = rootStore.forumPostStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n\n  return (\n    <Segment.Group>\n      <Segment attached='top' textAlign='center'>\n        <Grid>\n          <Grid.Column width={8}>\n            <Grid.Row>\n              <h1>{forumpost.title}</h1>\n              {forumpost.forumpostRating > 0 && (\n                <Rating\n                  icon='star'\n                  size='large'\n                  defaultRating={forumpost.forumpostRating}\n                  maxRating={5}\n                />\n              )}\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Link to={`/profile/${forumpost.userName}`}>\n              <img\n                className='ui centered circular tiny image'\n                src={forumpost.authorPhotoUrl || \"/assets/user.png\"}\n                alt='user'\n              />\n            </Link>\n          </Grid.Column>\n        </Grid>\n        <Divider vertical>{t(\"By\")} {forumpost.displayName}</Divider>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='info' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <i>\n              <span>\n                {t(\"Posted\")}{\" \"}\n                {formatDistance(new Date(forumpost.dateAdded), new Date())}\n              </span>{\" \"}\n              {t(\"ago in\")} <span>'{forumpost.category}' {t(\"category\")} </span>\n              {forumpost.numberOfComents! > 0 && (\n                <span>, {t(\"so far with\")} {forumpost.numberOfComents} {t(\"comments\")} </span>\n              )}\n              {forumpost.forumpostRating > 0 && (\n                <span>\n                  , {t(\"rated\")} {forumpost.forumpostRating.toFixed(2)}\n                </span>\n              )}\n              {rated && <span>, {t(\"you already rated\")} </span>}\n            </i>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={16}>\n            <span style={{ whiteSpace: \"pre-wrap\" }}>{forumpost.body}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedInfo);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n// import { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  forumpostId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ forumpostId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {deleteForumpost } = rootStore.forumPostStore;\n \n  const { closeModal } = rootStore.modalStore;\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteForumpost = (id: string) => {\n    deleteForumpost(id)\n      .then(() => closeModal())\n      .finally(() => history.push(`/forum`));\n  };\n\n  const cancelDeleteForumpost = () => {\n    closeModal();\n  };\n\n  // let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Irreversible action! Are you sure you want to do this?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteForumpost(forumpostId)}\n            color='teal'\n            content={t('Yes, delete it')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteForumpost()}\n            content={t(\"No, don't delete\")}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Button } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst ForumDetailedManager: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n  const [managing, setManaging] = useState(false);\n\n  const handleDeleteForumpost = () => {\n    openModal(<ConfirmDelete forumpostId={forumpost.id} />);\n    setManaging(false);\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <>\n      <Segment clearing attached='bottom'>\n        <>\n          {!managing ? (\n            <Button onClick={toggleManaging} color='instagram' fluid>\n              {t(\"Manage your post\")}\n            </Button>\n          ) : (\n            <div className='ui three buttons'>\n\n          \n                <Button\n                  as={Link}\n                  to={`/manageForum/${forumpost.id}`}\n                  color='pink'\n                  basic\n                >\n                  {t(\"Edit\")}\n                </Button>\n           \n                <Button\n                  onClick={handleDeleteForumpost}\n                  color='google plus'\n                  // fluid\n                >\n                  {t(\"Delete\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    setManaging(false);\n                  }}\n                  // color='grey'\n                  // fluid\n                >\n                  {t(\"Cancel\")}\n                </Button>\n            </div>\n          )}\n        </>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(ForumDetailedManager);\n","import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Segment, Grid, Button } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ForumDetailedRating: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n  const { setRating } = rootStore.forumPostStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [rated, setRated] = useState(false);\n  const { t } = useTranslation([\"forum\"]);\n\n  const [username, setUsername] = useState('');\n\n\n  useEffect(() => {\n\n    setUsername(forumpost.userName)\n\n    if (forumpost.forumpostRatings!.length > 0) {\n      \n      forumpost.forumpostRatings?.forEach((rating) => {\n        if (rating.authorUsername === user?.userName) {\n          setRated(true);\n        } \n      });\n    }\n    console.log(toJS(username));\n\n  }, [forumpost, user, username]);\n\n  const handleRating = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    data: any\n  ) => {\n    setRated(true);\n    setRating(forumpost.id, data.value);\n    addFeedItem(forumpost.id, 'Rated Forumpost', username)\n  };\n\n  return (\n    <>\n    {user?.userName !== forumpost.userName && !rated && (\n        \n        <Segment attached>\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Interesting')}\n                value={'3'}\n              />\n            </Grid.Column>\n\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Usefull')}\n                value={'4'}\n              />\n            </Grid.Column>\n\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Helping')}\n                value={'5'}\n              />\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      )}\n    </>\n  );\n};\n\nexport default observer(ForumDetailedRating);\n","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, List, Item, Image, Grid } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\n\nconst ForumDetailedSidebar: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const { t } = useTranslation([\"forum\"]);\n  const person = \" \" + t(\"person\");\n  const people = \" \" + t(\"people\");\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {forumpost.commenters?.length !== undefined &&\n\n        forumpost.commenters?.length > 1 ? forumpost.commenters?.length  + people : forumpost.commenters?.length+ person \n        }\n          {\" \"}{t(\"participating\")}\n      </Segment>\n\n      <Segment attached>\n        <List relaxed divided>\n          <Item.Group divided>\n            {forumpost.commenters?.map((commenter) => (\n              <Segment key={commenter.id}>\n                <Grid>\n                  <Grid.Column width={6}>\n                    <Image size='mini' circular src={commenter.image} />\n                  </Grid.Column>\n                  <Grid.Column width={10}>\n                    <Link to={`/profile/${commenter.username}`}>\n                      <Item.Header as='h3'>{commenter.displayName}</Item.Header>\n                    </Link>\n                  </Grid.Column>\n                </Grid>\n              </Segment>\n            ))}\n          </Item.Group>\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumDetailedSidebar);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ForumDetailedChat from \"./ForumDetailedChat\";\nimport ForumDetailedHeader from \"./ForumDetailedHeader\";\nimport ForumDetailedInfo from \"./ForumDetailedInfo\";\nimport ForumDetailedManager from \"./ForumDetailedManager\";\nimport ForumDetailedRating from \"./ForumDetailedRating\";\nimport ForumDetailedSidebar from \"./ForumDetailedSidebar\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ForumDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { forumpost, loadForumPost, loadingInitial, rated } =\n    rootStore.forumPostStore;\n\n  const { user } = rootStore.userStore;\n  const { t } = useTranslation([\"forum\"]);\n\n\n  useEffect(() => {\n    loadForumPost(match.params.id);\n  }, [loadForumPost, match.params.id]);\n\n  if (loadingInitial || !forumpost)\n    return <LoadingComponent content={t('Loading forum post details...')} />;\n\n  return (\n    <Grid>\n      <Grid.Column computer={11} mobile={16}>\n        <ForumDetailedInfo forumpost={forumpost} />\n        {user?.userName !== forumpost.userName && !rated && (\n          <ForumDetailedRating forumpost={forumpost} />\n        )}\n\n        {/* {forumpost.userName === formattedUser.username && ( */}\n        {forumpost.userName === user?.userName && (\n          <ForumDetailedManager forumpost={forumpost} />\n        )}\n        <ForumDetailedChat />\n      </Grid.Column>\n      <Grid.Column computer={5} mobile={16}>\n        <Grid.Row className='mobile hidden'>\n          <ForumDetailedHeader forumpost={forumpost} />\n        </Grid.Row>\n        <ForumDetailedSidebar forumpost={forumpost} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumDetails);\n","export const ratingOptions = [\n    {\n      key: \"1\",\n      text: \"Not satisfied at all\",\n      value: \"1\",\n    },\n    {\n      key: \"2\",\n      text: \"It could be better, but ok\",\n      value: \"2\",\n    },\n    { key: \"3\", text: \"Satified\", value: \"3\" },\n    { key: \"4\", text: \"Very satisfied\", value: \"4\" },\n    {\n      key: \"5\",\n      text: \"Totally happy\",\n      value: \"5\",\n    },\n  ];\n","export const yesNo = [\n    { key: \"Yes\", text: \"Yes\", value: \"1\" },\n    { key: \"No\", text: \"No\", value: \"0\" },\n  ];","import React, { Fragment, useContext } from \"react\";\n// import { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { IUser } from \"../../../app/models/user\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    mechanicId: string;\n    username: string | undefined;\n    rating: string;\n    testimonial: string;\n    user: IUser | null;\n    hasRecommended: string;\n}\nconst ConfirmBecomeCustomer: React.FC<IProps> = ({ hasRecommended, mechanicId, rating, testimonial, user}) => {\n// const ConfirmBecomeCustomer = () => {\n  const rootStore = useContext(RootStoreContext);\n  // const { user } = rootStore.userStore;\n\n  const { \n    // becomeCustomer, \n    becomeCustomer, recommend, rate, addTestimonial,\n    setCloseCustomerForm } = rootStore.mechanicStore;//, setHasBecomeCustomer\n  const { closeModal } = rootStore.modalStore;\n\n  const handleBecomeCustomer = (id: string) => {\n\n    setCloseCustomerForm();\n\n    becomeCustomer(mechanicId, user, hasRecommended)\n    .then(() => recommend(mechanicId, user?.userName, hasRecommended))\n    .then(() => rate(mechanicId, rating, user))\n    .then(() => addTestimonial(mechanicId, testimonial, user))\n    .catch(error => console.log(error));\n\n    closeModal();\n  };\n\n  const cancelBecomeCustomer = () => {\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content='Become a customer of this moto shop?'\n          color='teal'\n          textAlign='center'\n        />\n        <Fragment>\n          <Button\n            // fluid\n            onClick={() => handleBecomeCustomer('id')}\n            color='teal'\n            content='Yes, gladly!'\n            floated='left'\n          />\n          <Button\n            // fluid\n            onClick={() => cancelBecomeCustomer()}\n            content='No, cancel'\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmBecomeCustomer;\n","import React, { useContext} from \"react\";//, useState \n// import { Field } from \"react-final-form\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\n\n// import { useHistory } from \"react-router\";\nimport {\n  Header,\n  Button,\n  Grid,\n  Form,\n  Segment,\n  Checkbox,\n  Label,\n} from \"semantic-ui-react\";\n// import { IUser } from \"../../../app/models/user\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nimport { ratingOptions } from \"../../../app/common/options/ratingOptions\";\nimport { yesNo}   from '../../../app/common/options/yesNoOptions';\n\nimport {\n  combineValidators,\n    composeValidators,\n    hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport ConfirmBecomeCustomer from \"../modals/ConfirmBecomeCustomer\";\nimport { useTranslation } from \"react-i18next\";\n\nconst validate = combineValidators({\n  recommend: isRequired(\"recommend\"),\n  rating: isRequired(\"rating\"),\n    testimonial: composeValidators(\n      isRequired(\"Testimonial\"),\n      hasLengthGreaterThan(4)({\n        message: \"Testimonial needs to be at least 25 characters\",\n      })\n    )(),\n});\n\n\n\ninterface IProps {\n  mechanicId: string;\n}\nconst CustomerForm: React.FC<IProps> = ({ mechanicId }) => {\n  const rootStore = useContext(RootStoreContext);\n    const { user } = rootStore.userStore;\n    const { openModal } = rootStore.modalStore;\n\n    const { t } = useTranslation([\"forms\"]);\n\n\n    const { \n      setCloseCustomerForm , \n      } = rootStore.mechanicStore;\n\n  const handleFinalFormSubmit = (values: any) => {\n    \n    let username = user?.userName;\n    let rating = values.rating;\n    let hasRecommended = values.recommend;\n    let testimonial = values.testimonial;\n\n    openModal(<ConfirmBecomeCustomer mechanicId={mechanicId} \n        username={username} \n        rating={rating}\n        hasRecommended={hasRecommended}\n        testimonial={testimonial}\n        user={user}\n        />);\n    \n\n  };\n\n  const handleChange = (key: any, value: any) => {\n    \n    if (value.checked === true){\n        // setAgreeTermsAndServices(value.checked);\n    } else {\n        // setAgreeTermsAndServices(value.checked);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Segment clearing>\n          <Header\n            as='h2'\n            content={t('Register as a customer of this mechanic is enabling you to review, evaluate, comment and more...')}\n            color='teal'\n            textAlign='center'\n          />\n          <FinalForm\n            validate={validate}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit}>\n                <Field\n                  name='rating'\n                  placeholder={t('How would you evaluate this shop?')}\n                  options={ratingOptions}\n                  component={SelectInput}\n                />\n                <Field\n                  name='recommend'\n                  placeholder={t('Would you recommend this shop?')}\n                  options={yesNo}\n                  component={SelectInput}\n                />\n                <Field\n                  name='testimonial'\n                  rows={4}\n                  placeholder={t('Please write a couple of words about your experience with this mechanic shop')}\n                  component={TextAreaInput}\n                />\n                <Checkbox\n                  name='checkForUpdates'\n                  onChange={(e, data) => handleChange(e, data)}\n                  />\n                <Label onClick={()=> console.log('open modal')} content={t('I have read and understood the rules of a portal')}/>\n\n                <Button\n                  floated='right'\n                  type='button'\n                  content={t(\"No, don't register me\")}\n                  onClick={() => setCloseCustomerForm()}\n                />\n                <Button\n                  floated='right'\n                  disabled={invalid || pristine}\n                  positive\n                  type='submit'\n                  content={t('Yes, register me as a customer')}\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default CustomerForm;\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { useTranslation } from \"react-i18next\";\n\nconst MechanicDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, mechanic } =\n    rootStore.mechanicStore;\n\n  const connectionArgument = \"RecieveMechanicComment\";\n\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n    createHubConnection(mechanic!.id, connectionArgument); //, mechanic!\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, mechanic]);\n  \n\n  // const handleTest = (event: FormEvent<HTMLTextAreaElement>) => {\n\n  //   const {name, value} = event.currentTarget;\n\n  // }\n\n\n  return (\n    <>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Chat about this mechanic\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{ maxWidth: \"none\" }}>\n          {mechanic &&\n            mechanic.commentMechanics &&\n            mechanic.commentMechanics.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>{\" \"}\n                    {t(\"ago\")}\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                  // onChange={handleTest}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  loading={submitting}\n                  fluid\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(MechanicDetailedChat);\n","import { observer } from \"mobx-react-lite\";\nimport React\n// , { \n//   Fragment, \n//   useCallback, \n//   useContext, \n//   useEffect \n// } \nfrom \"react\"; //useCallback,\nimport { useTranslation } from \"react-i18next\";\n// import { Link } from \"react-router-dom\";\nimport { Segment, Item, Header, \n  // Button, \n  Image } from \"semantic-ui-react\";\nimport { IMechanic\n  // , IMechanicCustomer \n} from \"../../../app/models/mechanic\";\n// import { RootStoreContext } from \"../../../app/stores/rootStore\";\n// import ConfirmDelete from \"../modals/ConfirmDelete\";\n\n// import LoadingComponent from '../../../app/layout/LoadingComponent';\n\nconst mechanicImageStyle = {\n  filter: \"brightness(90%) contrast(50%) drop-shadow(4px 4px 8px teal)\",\n};\n\nconst mechanicImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"5%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\nconst MechanicDetailedHeader: React.FC<{ mechanic: IMechanic }> = ({mechanic}) => {\n  const { t } = useTranslation([\"mechanics\"]);\n\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={mechanic.photoUrl || `/assets/placeholder.png`}\n          fluid\n          style={mechanicImageStyle}\n          rounded\n        />\n        <Segment basic style={mechanicImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='huge'\n                  content={mechanic.name}\n                  style={{ color: \"white\" }}\n                />\n                <p>{t(\"In business since\")} {mechanic.yearOfStart}</p>\n                <p>\n                  {t(\"Posted by\")} <strong>{mechanic.publisher}</strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedHeader);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Segment, Grid, Icon, List, Popup, Image, Label } from \"semantic-ui-react\";\nimport { IMechanic } from \"../../../app/models/mechanic\";\n\nconst MechanicDetailedInfo: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const { t } = useTranslation([\"mechanics\"]);\n\n  return (\n    <Segment.Group raised>\n      {mechanic.brands.length>0 && <Segment attached='top'>\n        <Label pointing='below'> <Icon name='trademark' />\n        {/* <img src={mechanic.photoUrl!} alt='Mechanic'/> */}\n        {' '} {t(\"Specialized in\")} {' '} {mechanic.brands.length} {' '} {t(\"brands\")}</Label>\n        <Grid>\n          <>\n            <Grid.Column width={1}>\n              <Icon size='large' color='teal' name='trademark' />\n            </Grid.Column>\n            <Grid.Column width={15}>\n              <List horizontal>\n                {mechanic.brands.map((brand: any) => (\n                  <List.Item key={brand.name}>\n                    <Popup\n                      header={brand.name}\n                      trigger={\n                        <Image\n                          size='mini'\n                          circular\n                          src={brand.logoUrl || \"/assets/user.png\"}\n                          bordered\n                        />\n                      }\n                    />\n                  </List.Item>\n                ))}\n              </List>\n            </Grid.Column>\n          </>\n        </Grid>\n      </Segment>}\n      <Segment attached>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{mechanic.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{t(\"In business since\")}: {mechanic.yearOfStart}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='address card' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {mechanic.city}, {mechanic.countryName}, {mechanic.address}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='tty' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{t(\"Phone number\")}: {mechanic.phone || t(\"Phone not available\")}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='envelope open' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {t(\"Email address\")}: {mechanic.email || t(\"Email address not available\")}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='internet explorer' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{t(\"Website\")}: {mechanic.website || t(\"Website not available\")}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n\n      <Segment attached='bottom'>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar check outline' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {t(\"Published\")}:{\" \"} \n              {formatDistance(new Date(mechanic.datePublished), new Date())}\n            </span>{\" \"}\n            {t(\"ago\")}\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedInfo);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    mechanicId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ mechanicId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteMechanic } = rootStore.mechanicStore;\n  const { closeModal } = rootStore.modalStore;\n\n  const handleDeleteMechanic = (id: string) => {\n    deleteMechanic(id);\n    closeModal();\n    history.push(`/mechanics`);\n  };\n\n  const cancelDeleteMechanic = () => {\n    closeModal();\n  };\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteMechanic(mechanicId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteMechanic()}\n            content={t('No, cancel')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, {\n  Fragment,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Button, Item} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst MechanicDetailedManager: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n  const { user } = rootStore.userStore;\n\n  const { t } = useTranslation([\"mechanics\"]);\n\n  const [managing, setManaging] = useState(false);\n\n  const {\n    isCustomer,\n    setCustomer,\n    setOpenCustomerForm,\n    openCustomerForm,\n    setCloseCustomerForm,\n  } = rootStore.mechanicStore;\n\n  const handleView = useCallback(\n    (localMechanic: any) => {\n      localMechanic.customers.forEach((customer: IMechanicCustomer) => {\n        if (user!.userName === customer.username) setCustomer(true);\n      });\n    },\n    [setCustomer, user]\n  );\n\n  useEffect(() => {\n    handleView(mechanic);\n    return () => {\n      setCustomer(false);\n      setCloseCustomerForm();\n    };\n  }, [handleView, mechanic, setCustomer, setCloseCustomerForm]);\n\n  const handleDeleteMechanic = (id: string) => {\n    openModal(<ConfirmDelete mechanicId={id} />);\n  };\n  const handleBecomeCustomer = () => {\n    setOpenCustomerForm();\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Segment.Group>\n      <Segment clearing raised>\n        <Item>{mechanic.name}</Item>\n        {mechanic.publisherUsername !== user?.userName && (\n          <Fragment>\n            {!isCustomer && !openCustomerForm && (\n              <Button\n                onClick={() => {\n                  handleBecomeCustomer();\n                }}\n                color='instagram'\n                fluid\n              >\n                {t(\"Register As Customer\")}\n              </Button>\n            )}\n          </Fragment>\n        )}\n        {mechanic.publisherUsername === user?.userName &&\n          (!managing ? (\n            <Button onClick={toggleManaging} color='instagram' fluid>\n              {t(\"Manage mechanic\")}\n            </Button>\n          ) : (\n            <div className='ui three buttons'>\n              <Button\n                as={Link}\n                to={`/manageMechanic/${mechanic.id}`}\n                color='pink'\n                basic\n              >\n                {t(\"Edit\")}\n              </Button>\n\n              <Button\n                onClick={() => {\n                  handleDeleteMechanic(mechanic.id!);\n                }}\n                color='red'\n              >\n                {t(\"Delete\")}\n              </Button>\n\n              <Button\n                onClick={() => {\n                  setManaging(false);\n                }}\n              >\n                {t(\"Cancel\")}\n              </Button>\n            </div>\n          ))}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedManager);\n","import { formatDistance } from \"date-fns\";\n// import { toJS } from \"mobx\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Image,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n \n    customer: IMechanicCustomer\n    mechanic:IMechanic\n}\nconst ShowTestimonial: React.FC<IProps> = ({  customer, mechanic }) => {\n  const rootStore = useContext(RootStoreContext);\n\n//   console.log('customer', customer)\n//   console.log('mechanic', toJS(mechanic))\n\n  const { closeModal } = rootStore.modalStore;\n\n  return (\n    <Fragment>\n      <Container text>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          <Grid>\n           \n            <Grid.Column width={10}>\n           \n              <p>\n               \n                Published {\" \"}\n                {formatDistance(\n                  new Date(customer.testimonial?.dateAdded!),\n                  new Date()\n                )}{\" \"}\n                ago{\" \"}\n              </p>\n              <Header.Subheader as='h2' color='pink'>\n                <Link\n                  to={`/profile/${customer.username}`}\n                  onClick={() => closeModal()}\n                >\n                  by {customer.displayName}\n                </Link>\n              \n              </Header.Subheader>\n            </Grid.Column>\n            <Grid.Column width={3}>\n             \n              <Image src={mechanic.photoUrl} size='small' floated=\"left\"/>\n            </Grid.Column>\n           \n          </Grid>\n        </Segment>\n        <Segment>\n              <Image src={customer.image} size='tiny' circular floated=\"left\"/>\n         \n          \n              <p style={{ whiteSpace: 'pre-wrap' }}>{customer.testimonial?.text}</p>\n             \n         \n              <Button fluid onClick={() => closeModal()} content='Close' />\n         \n        </Segment>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default ShowTestimonial;\n","import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  List,\n  Item,\n  Image,\n  Grid,\n  Label,\n  Button,\n  Popup,\n} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ShowTestimonial from \"../modals/ShowTestimonial\";\n\n\nconst MechanicDetailedSidebar: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const mechanicShop = toJS(mechanic);\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mechanics\"]);\n\n\n  const handleShowTestimonial = (customer: IMechanicCustomer, mechanic:IMechanic) => {\n    openModal(<ShowTestimonial customer={customer} mechanic={mechanic}/>);\n  };\n  return (\n    <>\n      <Fragment>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          {mechanicShop.customers && mechanicShop.customers.length > 1 \n          ? mechanicShop.customers.length + t(\"People are customers\") : mechanicShop.customers.length + t(\"Person is customer\")}  \n           {t(\"of this shop\")}\n        </Segment>\n        <>\n          <List divided>\n            <Item.Group divided>\n              {mechanicShop.customers &&\n                mechanicShop.customers.map((customer) => (\n                  <Segment key={customer.username}>\n                    <Grid>\n                      <Grid.Column width={4}>\n                        <Image\n                          size='mini'\n                          circular\n                          src={customer.image || \"/assets/user.png\"}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={10}>\n                        <Link to={`/profile/${customer.username}`}>\n                          <Item.Extra as='h5'>\n                            {customer.displayName}\n                            {customer.customerRecommended && (\n                              <p style={{ color: \"green\" }}>{t(\"Recommending\")}</p>\n                            )}\n                          </Item.Extra>\n\n                          {customer.isOwner && (\n                            <Label\n                              style={{ position: \"top\" }}\n                              color='teal'\n                              corner='right'\n                            >\n                              {t(\"Owner\")}\n                            </Label>\n                          )}\n                        </Link>\n                      </Grid.Column>\n                      <Grid.Column width={2}>\n                        {customer.testimonial && (\n                        <Popup \n                          content={customer.displayName + t(\"'s testimony about\") + mechanic.name} \n                          className='computer large screen only'\n                          trigger={\n                            <Button\n                              circular\n                              icon='comment alternate'\n                              color='instagram'\n                              // className='hidePopup'\n                              onClick={() => \n                                handleShowTestimonial(customer, mechanic) \n                              }\n                            />\n                          }\n                        />\n                        )}\n                      </Grid.Column>\n                    </Grid>\n                  </Segment>\n                ))}\n            </Item.Group>\n          </List>\n        </>\n      </Fragment>\n    </>\n  );\n};\n\nexport default observer(MechanicDetailedSidebar);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport CustomerForm from \"../form/CustomerForm\";\nimport MechanicDetailedChat from \"./MechanicDetailedChat\";\nimport MechanicDetailedHeader from \"./MechanicDetailedHeader\";\nimport MechanicDetailedInfo from \"./MechanicDetailedInfo\";\nimport MechanicDetailedManager from \"./MechanicDetailedManager\";\nimport MechanicDetailedSidebar from \"./MechanicDetailedSidebar\";\n\ninterface DetailParams {\n  id: string;\n}\nconst MechanicDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { t } = useTranslation([\"mechanics\"]);\n\n  const [ready, setReady] = useState(false);\n\n  const {\n    mechanic,\n    loadMechanic,\n    loadingInitial,\n    openCustomerForm,\n    isCustomer,\n  } = rootStore.mechanicStore;\n\n  useEffect(() => {\n      loadMechanic(match.params.id);  \n      setReady(true)   \n  }, [loadMechanic, match.params.id]); \n\n  if (loadingInitial || !mechanic || !ready)\n    return <LoadingComponent content={t('Loading mechanic shop...')} />;\n\n  return (\n    <Grid>\n    \n      <Grid.Column computer={11} mobile={16} >\n        <MechanicDetailedHeader mechanic={mechanic} />\n        <MechanicDetailedManager mechanic={mechanic}/>\n         { openCustomerForm && <CustomerForm mechanicId={mechanic.id} />}\n        <MechanicDetailedInfo mechanic={mechanic} />\n       {isCustomer  && <MechanicDetailedChat />}\n      </Grid.Column>\n     \n      <Grid.Column computer={4} mobile={16} >\n        <MechanicDetailedSidebar mechanic={mechanic} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDetails);\n","import { IComment } from \"./comment\";\n\nexport interface IMechanicsEnvelope {\n    mechanics: IMechanic[];\n    mechanicCount: number;\n}\nexport interface IMechanic {\n    id: string;\n    // author: string | null;\n    photoUrl: string | null;\n    name: string;\n    publisher: string;\n    publisherUsername: string;\n    owner: string;\n    description: string;\n    yearOfStart: string;//Date;\n    datePublished: string;// Date | undefined;\n    country: string;\n    countryName: string;\n    countryId: string;\n    city: string;\n    address: string;\n    email: string;\n    phone: string;\n    website: string;\n    commentMechanics: IComment[];\n    file: Blob;\n    customers: IMechanicCustomer[];\n    averageRating: string;\n    ratings: IRating[];\n    brands: any;\n\n}\n\nexport interface IRating {\n    username: string;\n    displayName: string;\n    score: string;\n}\n\nexport interface IMechanicCustomer {\n    username: string;\n    displayName: string;\n    image: string;\n    isOwner: boolean;\n    isCustomer: boolean;\n    customerRecommended: boolean;\n    testimonial?: IMechanicTestimonial;             \n}\nexport interface IMechanicCustomerToBecome {\n    mechanicId: string;\n    isCustomer: boolean;             \n}\n\nexport interface IMechanicTestimonial {\n    id: string;\n    text: string;\n    dateAdded: string;\n}\n\nexport interface IMechanicRate {\n    id: string;\n    score: string;\n}\nexport interface IMechanicRecommend {\n    mechanicId: string;\n    isRecommended: string;\n}\n\n\nexport class MechanicFromValues {\n    id?: string;\n    photoUrl: string = '';\n    name: string = '';\n    owner: string = '';\n    description: string = '';\n    yearOfStart: string = '';\n    datePublished: string = '';\n    country: string = '';\n    countryName: string= '';\n    countryId: string= '';\n    city: string = '';\n    address: string = '';\n    email: string= '';\n    phone: string= '';\n    website: string= '';\n    customers: IMechanicCustomer[];\n    file: Blob;\n    brands = [] ;\n\n\n\n    constructor(init?: MechanicFromValues ) {\n        if (init)\n        Object.assign(this, init);\n    }\n}","export const year = [\n    { key: '1990', text: '1990', value: '1990' },\n    { key: '1991', text: '1991', value: '1991' },\n    { key: '1992', text: '1992', value: '1992' },\n    { key: '1993', text: '1993', value: '1993' },\n    { key: '1994', text: '1994', value: '1994' },\n    { key: '1995', text: '1995', value: '1995' },\n    { key: '1996', text: '1996', value: '1996' },\n    { key: '1997', text: '1997', value: '1997' },\n    { key: '1998', text: '1998', value: '1998' },\n    { key: '1999', text: '1999', value: '1999' },\n    { key: '2000', text: '2000', value: '2000' },\n    { key: '2001', text: '2001', value: '2001' },\n    { key: '2002', text: '2002', value: '2002' },\n    { key: '2003', text: '2003', value: '2003' },\n    { key: '2004', text: '2004', value: '2004' },\n    { key: '2005', text: '2005', value: '2005' },\n    { key: '2006', text: '2006', value: '2006' },\n    { key: '2007', text: '2007', value: '2007' },\n    { key: '2008', text: '2008', value: '2008' },\n    { key: '2009', text: '2009', value: '2009' },\n    { key: '2010', text: '2010', value: '2010' },\n    { key: '2011', text: '2011', value: '2011' },\n    { key: '2012', text: '2012', value: '2012' },\n    { key: '2013', text: '2013', value: '2013' },\n    { key: '2014', text: '2014', value: '2014' },\n    { key: '2015', text: '2015', value: '2015' },\n    { key: '2016', text: '2016', value: '2016' },\n    { key: '2017', text: '2017', value: '2017' },\n    { key: '2018', text: '2018', value: '2018' },\n    { key: '2019', text: '2019', value: '2019' },\n    { key: '2020', text: '2020', value: '2020' },\n    { key: '2021', text: '2021', value: '2021' },\n    { key: '2022', text: '2022', value: '2022' },\n  ];","export const motoOptions = [\n    'Love & peace and safe riding' ,\n    'Take care of yourself and others' ,\n    'Drinking and riding - do in only never!' ,\n    'With a good wind in your face' ,\n    'Wave your hand to brothers and sisters <3' ,\n  ];","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectMultiple: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    multiple,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value || []}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n            search \n            selection\n            multiple={true}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectMultiple","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n  Label,\n} from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { MechanicFromValues } from \"../../../app/models/mechanic\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport { year } from \"../../../app/common/options/yearOptions\";\n\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n  createValidator,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport SelectMultiple from \"../../../app/common/form/SelectMultiple\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ownerOptions = [\n  { key: \"Owner\", text: \"Owner\", value: \"Owner\" },\n  { key: \"Customer\", text: \"Customer\", value: \"Customer\" },\n];\ninterface DetailParams {\n  id: string;\n}\nconst MechanicForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  history,\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createMechanic, editMechanic, submitting, loadMechanic } =\n    rootStore.mechanicStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n  const validate = combineValidators({\n    name: isRequired({ message: \"Name is required\" }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    // photoUrl: isRequired(\"Photo\"),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired( { message: t(\"City is required\") }),\n    address: isRequired( { message: t(\"Address is required\") }),\n    phone: composeValidators(\n      isNumeric({ message: t(\"Phone must be numeric value\") }),\n      isRequired({ message: t(\"Phone is required\") }),\n      hasLengthGreaterThan(8)({\n        message: t(\"Phone needs to be at least 9 characters\"),\n      })\n    )(),\n    email: isValidEmail(),\n    yearOfStart: isRequired({ message: t(\"Year of start is required\") }),\n    brands: isRequired({ message: t(\"Brand is required\") }),\n  });\n\n  const { user } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const { loadBrandsToSelect, brands } = rootStore.brandStore;\n\n  const [mechanic, setMechanic] = useState(new MechanicFromValues());\n  const [loading, setLoading] = useState(false);\n\n  const [uploaded, setUploaded] = useState(false);\n\n  const [edited, setEdited] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n    loadBrandsToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n\n      setLoading(true);\n      setUploaded(true);\n      setEdited(true);\n\n      loadMechanic(match.params.id)\n        .then((mechanic) => {\n          setMechanic(new MechanicFromValues(mechanic));\n        })\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [\n    loadCountriesToSelect,\n    loadMechanic,\n    match.params.id,\n    loadBrandsToSelect,\n  ]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const { ...mechanic } = values;\n    let owner: boolean = values.owner === \"Owner\" ? true : false;\n    let customer = {\n      username: user?.userName,\n      displayName: user?.displayName,\n      image: user?.image,\n      isOwner: owner,\n      isCustomer: !owner,\n      customerRecommended: !owner,\n      testimonial: values.description,\n    };\n    if (!mechanic.id) {\n      let newMechanic = {\n        ...mechanic,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        publisherUsername: user?.userName,\n        customers: [customer],\n      };\n      createMechanic(newMechanic);\n      addFeedItem(newId, \"Added Mechanic\");\n    } else {\n      editMechanic(mechanic);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n\n  if (!ready) return <LoadingComponent content={t(\"Loading values...\")} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column\n          // width={10}\n          computer={10}\n          mobile={16}\n        >\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={mechanic}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  {editMode && <Label content={t(\"Name\")} />}\n\n                  <Field\n                    placeholder={t(\"Name\")}\n                    name='name'\n                    value={mechanic.name}\n                    component={TextInput}\n                  />\n\n                  {!editMode && (\n                    <Field\n                      name='owner'\n                      placeholder={t(\"Are you owner or customer of this shop?\")}\n                      options={ownerOptions}\n                      value={mechanic.owner}\n                      component={SelectInput}\n                    />\n                  )}\n                  {!editMode && (\n                    <Field\n                      name='brands'\n                      placeholder={t(\"What brands are you specialized in *\")}\n                      options={brands}\n                      multiple\n                      component={SelectMultiple}\n                    />\n                  )}\n\n                  {!editMode && (\n                    <Field\n                      name='countryName'\n                      placeholder={t(\"Country\")} //\n                      options={countries}\n                      component={SelectInput}\n                    />\n                  )}\n\n                  {!editMode && (\n                    <Field\n                      name='city'\n                      placeholder={t(\"City\")}\n                      value={mechanic.city}\n                      component={TextInput}\n                    />\n                  )}\n                  {editMode && <Label content={t(\"Address *\")} />}\n\n                  <Field\n                    placeholder={t(\"Address *\")}\n                    name='address'\n                    value={mechanic.address}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Phone *\")} />}\n\n                  <Field\n                    placeholder={t(\"Phone *\")}\n                    name='phone'\n                    value={mechanic.phone}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content='Email' />}\n\n                  <Field\n                    placeholder={t(\"Email\")}\n                    name='email'\n                    value={mechanic.email}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Website\")} />}\n\n                  <Field\n                    placeholder={t(\"Website\")}\n                    name='website'\n                    value={mechanic.website}\n                    component={TextInput}\n                  />\n                  {!editMode && (\n                    <Field\n                      name='yearOfStart'\n                      placeholder={t(\"Year of Start *\")}\n                      value={mechanic.yearOfStart}\n                      options={year}\n                      component={SelectInput}\n                    />\n                  )}\n                  {editMode && <Label content={t(\"Description\")} />}\n\n                  <Field\n                    name='description'\n                    raws={3}\n                    placeholder={t(\"Description\")}\n                    value={mechanic.description}\n                    component={TextAreaInput}\n                  />\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    positive\n                    floated='right'\n                    type='submit'\n                    content={t(\"Submit\")}\n                  />\n                  <Button\n                    onClick={\n                      mechanic.id\n                        ? () => history.push(`/mechanics/${mechanic.id}`)\n                        : () => history.push(\"/mechanicForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t(\"Cancel\")}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{mechanic.name}</Header>\n              <Image size='large' bordered src={mechanic.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(MechanicForm);\n","import { IComment } from \"./comment\";\n\nexport interface IMotofyEnvelope {\n    motofies: IMotofy[];\n    motofyCount: number;\n    mostEmbraced: IMotofy;\n    highestRatedMotofy: IMotofy;\n}\nexport interface IMotofy {\n    id: string;\n    name: string;\n    publisherUsername: string;\n    publisherDisplayName: string;\n    brandId: string;\n    brandName: string;\n    brandLogoUrl: string;\n    model: string;\n    cubicCentimeters: string;\n    photoUrl?: string | null;\n    description?: string;\n    yearOfProduction?: string;// Date;\n    datePublished?: string;\n    city: string;\n\n    countryName: string;\n    countryId: string;\n\n    pricePaid: string;\n    estimatedValue: string;\n    numberOfKilometers: string; \n    embraced: boolean;\n    isOwner: boolean;\n    embracers: IEmbracer[];\n    commentMotofies: IComment[];\n    file: Blob;\n\n    motofyScores: any[];\n    averageRating: string;\n}\n\nexport interface IMotofyFormValues extends Partial<IMotofy>{//, Partial<IBrand> \n\n}\n\nexport class MotofyFormValues implements IMotofyFormValues {\n    id?: string = '';\n    name: string = '';\n    // brand: string= '';\n    brandId: string= '';\n    brandName: string= '';\n    model: string= '';\n    cubicCentimeters: string= '';\n    photoUrl: string  = '';\n    description: string= '';\n    yearOfProduction: string= '';\n    // datePublished?: Date = undefined;\n    datePublished?: string= '';\n    city: string= '';\n    countryName: string= '';\n    countryId: string= '';\n    pricePaid: string= '';\n    estimatedValue: string= '';\n    numberOfKilometers: string= '';\n    // file: IPhoto;\n    // brands?: IBrand[];\n\n    constructor(init?: MotofyFormValues ) {//, brandsToSelect?: IBrand[]\n        if (init ) {//&& brandsToSelect\n            // init.brands = brandsToSelect;\n        }\n        Object.assign(this, init);\n    }\n} \n\nexport interface IEmbracer {\n    username: string;\n    displayName: string;\n    image: string;\n    isOwner: boolean;\n    following?: boolean;\n}\n\nexport interface IRateMotofy {\n    id: string;\n    score: string | number | undefined;\n}\n\nexport interface IMotofyScore {\n    username: string | undefined;\n    displayName: string | undefined;\n    score: string | number | undefined;\n}\n\n","import React, { useContext, useEffect, useState } from \"react\"; \nimport {\n  Button,\n  Form,\n  Grid,\n  Segment,\n  Image,\n  Sticky,\n  Header,\n  Label,\n} from \"semantic-ui-react\";\nimport { MotofyFormValues } from \"../../../app/models/motofy\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nimport { year } from \"../../../app/common/options/yearOptions\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\n\n\nimport { toast } from \"react-toastify\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { useTranslation } from \"react-i18next\";\n\n\n\n\ninterface DetailParams {\n  id: string;\n}\nconst GalleryForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const {\n    createMotofy,\n    editMotofy,\n    submitting,\n    loadMotofy,\n  } = rootStore.motofyStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n  const motomoto = motoOptions[random];\n\n  const { loadBrandsToSelect, brands } = rootStore.brandStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    name: isRequired({ message: \"Name is required\" }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    city: isRequired( { message: t(\"City is required\") }),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    model: isRequired( { message: t(\"Model is required\") }),\n    // pricePaid: composeValidators(\n    //   isNumeric(\"Price paid\"),\n    //   isRequired(\"Price paid\")\n    // )(),\n    cubicCentimeters: composeValidators(\n      isNumeric({ message: t(\"Power of engine must be numeric value\") }),\n      isRequired( { message: t(\"Power of engine is required\") })\n    )(),\n    yearOfProduction: isRequired({ message: t(\"Year of production is required\") }),\n    numberOfKilometers: composeValidators(\n      isNumeric({ message: t(\"Number of kilometers must be numeric value\") }),\n      isRequired({ message: t(\"Number of kilometers is required\") })\n    )(),\n    // estimatedValue: composeValidators(\n    //   isNumeric(\"Estimated valude\"),\n    //   isRequired(\"Estimated valude\")\n    // )(),\n  });\n\n  const [motofy, setMotofy] = useState(new MotofyFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n\n\n  const [uploaded, setUploaded] = useState(false);\n\n  const [edited, setEdited] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  //==proposal for AA001 bug==\n  useEffect(() => {\n    return () => {\n      history.goForward();\n    };\n  }, [history]);\n\n  useEffect(() => {\n    loadBrandsToSelect();\n    loadCountriesToSelect();\n    if (match.params.id) {\n      setEditMode(true);\n\n      setUploaded(true);\n      setLoading(true);\n      setEdited(true);\n      loadMotofy(match.params.id)\n        .then((motofy) => setMotofy(new MotofyFormValues(motofy)))\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [loadBrandsToSelect, loadCountriesToSelect, loadMotofy, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const { ...motofy } = values;\n    let newId = uuid();\n    if (!motofy.id) {\n      let newMotofy = {\n        ...motofy,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        isOwner: true,\n        motofyScores: [],\n      };\n\n      createMotofy(newMotofy); \n      addFeedItem(newId, \"Added Motofy\");\n    } else {\n      editMotofy(motofy);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n  \n  if (!ready) return <LoadingComponent content={t('Loading values...')} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded &&  (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={motofy}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                 {editMode && <Label content={t('Motorcycle name')}/>}\n                  <Field\n                    name='name'\n                    placeholder={t('Motorcycle name')}\n                    value={motofy.name}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Description')}/>}\n                  <Field\n                    placeholder={t('Description')}\n                    name='description'\n                    rows={3}\n                    value={motofy.description}\n                    component={TextAreaInput}\n                  />\n                    {editMode && <Label content={t('City')}/>}\n                  <Field\n                    placeholder={t('City')}\n                    name='city'\n                    value={motofy.city}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Country\")}/>}\n                  <Field\n                    placeholder={t(\"Country\")}\n                    name='countryName'\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  {!editMode && (\n                    <>\n                      <Field\n                        name='brandName'\n                        placeholder={t(\"Brand\")} //\n                        options={brands}\n                        component={SelectInput}\n                      />\n\n                      <Field\n                        name='model'\n                        placeholder={t('Model')}\n                        value={motofy.model}\n                        component={TextInput}\n                      />\n                      <Field\n                        name='cubicCentimeters'\n                        placeholder={t('Cubics')}\n                        value={motofy.cubicCentimeters}\n                        component={TextInput}\n                      />\n                      <Field\n                        name='yearOfProduction'\n                        placeholder={t('Year of production')}\n                        options={year}\n                        value={motofy.yearOfProduction}\n                        component={SelectInput}\n                      />\n                    </>\n                  )}\n                    {editMode && <Label content={t('Number of kilometers')}/>}\n                  <Field\n                    placeholder={t('Number of kilometers')}\n                    name='numberOfKilometers'\n                    value={motofy.numberOfKilometers}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Price paid')}/>}\n                  <Field\n                    placeholder={t('Price paid')}\n                    name='pricePaid'\n                    value={motofy.pricePaid}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Estimated value')}/>}\n                  <Field\n                    placeholder={t('Estimated value')}\n                    name='estimatedValue'\n                    value={motofy.estimatedValue}\n                    component={TextInput}\n                  />\n                  {edited && (\n                    <Button\n                      loading={submitting}\n                      disabled={loading || invalid}\n                      positive\n                      floated='right'\n                      type='submit'\n                      content={t('Submit')}\n                    />\n                  )}\n                  {!edited && (\n                    <Button\n                      loading={submitting}\n                      disabled={loading || invalid || pristine}\n                      positive\n                      floated='right'\n                      type='submit'\n                      content={t('Submit')}\n                    />\n                  )}\n                  <Button\n                    onClick={\n                      motofy.id\n                        ? () => history.push(`/gallery/${motofy.id}`)\n                        : () => history.push(\"/galleryForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t('Cancel')}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motofy.name}</Header>\n              <Image size='large' bordered src={motofy.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(GalleryForm);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react'\nimport { RouteComponentProps, RouteProps, Route, Redirect } from 'react-router'\nimport { RootStoreContext } from '../stores/rootStore'\n\ninterface IProps extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>>\n\n}\n\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {isLoggedIn} = rootStore.userStore;\n\n    return (\n\n        <Route \n        {...rest}\n        render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to={'/'}/>}\n        />\n    )\n}\n\nexport default observer(PrivateRoute);","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Card, Label } from \"semantic-ui-react\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ProductListItem: React.FC<{ product: IProduct }> = ({ product }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    toogleActivate\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  const handleToogleActivate = () => {\n    toogleActivate(product.id, product)\n  }\n  \n  let descriptionUiShort;\n  if (product.description) {\n    descriptionUiShort = product.description.substring(0, 20);\n  }\n  // const productTitleUiShort = product.title.substring(0, 15);\n\n  const threeDots = \"...\";\n  return (\n    <Card raised>\n      <Card.Content>\n        <Card.Header style={{ textAlign: \"center\" }}>\n          {product.title.substring(0, 15)}\n        </Card.Header>\n        {product.isSold && (\n          <Label style={{ position: \"absolute\" }} color='red' corner='right'>\n            {t(\"SOLD\")}\n          </Label>\n        )}\n        {!product.isActive && (\n          <Label color='red' attached='top' style={{textAlign: 'center'}}>\n            {t(\"INACTIVE\")}\n          </Label>\n        )}\n        <div className='ui segment'>\n          <img\n            className='ui centered medium image'\n            src={product.photoUrl}\n            alt='Product'\n            \n          />\n        </div>\n\n        <Card.Content extra>\n          <span>{descriptionUiShort || \"Description N/A\"}</span>{\" \"}\n          <span>{threeDots}</span>\n        </Card.Content>\n        {product.isActive ?\n        <Button\n          as={Link}\n          to={`/product/${product.id}`}\n          fluid\n          content={t('View product')}\n          color='instagram'\n        /> :\n\n        <Button\n          onClick={()=> handleToogleActivate()}\n          fluid\n          content={t('Activate')}\n          color='instagram'\n        />\n        }\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default observer(ProductListItem);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductListItem from \"./ProductListItem\";\n\nconst ProductList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { productsByDate } = rootStore.productStore;\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n          {productsByDate.map((product) => (\n            <ProductListItem product={product} key={product.id} />\n          ))}\n        </Card.Group>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductList);\n","export const categories  = [\n    //hope to examine why - text and value both capitialized\n    { key: 'clothing', text: 'Clothing', value: 'Clothing' },\n    { key: 'equipment', text: 'Equipment', value: 'Equipment' },\n    { key: 'gear', text: 'Gear', value: 'Gear' },\n    { key: 'vehicle', text: 'Vehicle', value: 'Vehicle' },\n    { key: 'tools', text: 'Tools', value: 'Tools' },\n    { key: 'other', text: 'Other', value: 'Other' },\n    \n]","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Divider, Dropdown, Input, Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { categories } from \"../../../app/common/options/productOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ProductFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.productStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n\n  const handleOnChangeCountry = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n  };\n\n  const handleOnChangeCategory = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\n  const styles = {\n    textAlign: \"center\"\n  };\n  return (\n    <Fragment>\n      <Menu vertical size='large' style={{ width: \"100%\" }}>\n       \n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or')} />\n        <Menu.Item active={predicate.has(\"country\")}>\n          <Dropdown\n            fluid\n            placeholder={t('Search products by country')}\n            selection\n            floating\n            search\n            options={countries}\n            onChange={handleOnChangeCountry}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or')} />\n        <Menu.Item>\n          <Dropdown\n            fluid\n            placeholder={t('Search products by category')}\n            selection\n            floating\n            search\n            options={categories}\n            onChange={handleOnChangeCategory}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          style={ styles }\n          content={t(\"All Products\")}\n        />\n          <Menu.Item\n            active={predicate.has(\"iView\")}\n            onClick={() => setPredicate(\"iView\", \"true\")}\n            color={\"blue\"}\n            name={\"iView\"}\n            style={{ textAlign: \"center\" }}\n            content={t(\"Favorites\")}\n          />\n          <Menu.Item\n            active={predicate.has(\"myProducts\")}\n            onClick={() => setPredicate(\"myProducts\", \"true\")}\n            color={\"blue\"}\n            name={\"myProducts\"}\n            style={{ textAlign: \"center\" }}\n            content={t(\"My products\")}\n          />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"iFollow\"}\n          style={ styles }\n          content={t(\"By people I follow\")}\n        />\n        <Menu.Item\n          active={predicate.has(\"inActive\")}\n          onClick={() => setPredicate(\"inActive\", \"true\")}\n          color={\"blue\"}\n          name={\"inActive\"}\n          style={ styles }\n          content={t(\"My inactive products\")}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default ProductFilters;\n","import React from \"react\";\nimport { Segment, Placeholder, Grid } from \"semantic-ui-react\";\nconst ProductListItemPlaceholder = () => {\n  return (\n    <Grid columns={4} stackable>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\nexport default ProductListItemPlaceholder;\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst SearchProducts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.productStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchProducts;\n","import React, { useContext } from \"react\";\nimport { Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { categories } from \"../../../app/common/options/productOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst SearchProductsByCategory = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.productStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Dropdown\n          placeholder={t('Filter by category')}\n          selection\n          fluid\n          search\n          options={categories}\n          onChange={handleOnChange}\n          clearable\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchProductsByCategory;\n","import React, { useContext, useEffect } from \"react\";\nimport {  Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchProductsByCountry = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.productStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n  const { closeModal } = rootStore.modalStore;\n\n  //!!Warning Mem Leak\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\nconst handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n           <Dropdown\n            placeholder='Filter by country'\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchProductsByCountry;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst ProductMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.productStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info.toUpperCase()}</div>\n  );\n};\n\nexport default observer(ProductMobileInfo);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SearchProducts from \"../modals/SearchProducts\";\nimport SearchProductsByCategory from \"../modals/SearchProductsByCategory\";\nimport SearchProductsByCountry from \"../modals/SearchProductsByCountry\";\nimport ProductMobileInfo from \"./ProductMobileInfo\";\n\nconst ProductMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.productStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  \n  useEffect(()=>{\n    setInfo(t('All products'))\n  },[setInfo, t])\n  const { openModal } = rootStore.modalStore;\n\n  const handleSearch = () => {\n    setPredicate(\"search\", \"true\");\n    openModal(<SearchProducts />);\n  };\n  const handleSearchByCountry = () => {\n    setPredicate(\"country\", \"true\");\n    openModal(<SearchProductsByCountry />);\n  };\n  const handleSearchByCategory = () => {\n    setPredicate(\"category\", \"true\");\n    openModal(<SearchProductsByCategory />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"iView\":\n        setInfo(t(\"Favorites\"));\n        break;\n      case \"myProducts\":\n        setInfo(t(\"My products\"));\n        break;\n      case \"iFollow\":\n        setInfo(t(\"By people I follow\"));\n        break;\n      case \"inActive\":\n        setInfo(t(\"My inactive products\"));\n        break;\n      case \"search\":\n        setInfo(t(\"Search products\"));\n        break;\n      case \"category\":\n        setInfo(t(\"Search by category\"));\n        break;\n      case \"country\":\n        setInfo(t(\"Search by country\"));\n        break;\n      default:\n        setInfo(t(\"All products\"));\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Menu fluid widths={8}>\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iView\")}\n          onClick={() => {\n            setPredicate(\"iView\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"heart outline\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"myProducts\")}\n          onClick={() => {\n            setPredicate(\"myProducts\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"user circle\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => {\n            setPredicate(\"iFollow\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"inActive\")}\n          onClick={() => {\n            setPredicate(\"inActive\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"hourglass end\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"search\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"country\")}\n          onClick={() => {\n            handleSearchByCountry();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"globe\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"category\")}\n          onClick={() => {\n            handleSearchByCategory();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"filter\"}\n        />\n      </Menu>\n      <ProductMobileInfo />\n    </>\n  );\n};\n\nexport default observer(ProductMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\";\nimport ProductList from \"./ProductList\";\n\n// import LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductFilters from \"./ProductFilters\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ProductListItemPlaceholder from \"./ProductListItemPlaceholder\";\nimport ProductMobileFilters from \"./ProductMobileFilters\";\n\nconst ProductDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadProducts, loadingInitial, setPage, page, totalPages } = rootStore.productStore;\n\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadProducts().then(()=> {\n      setLoadingNext(false);\n    })\n  }\n\n  useEffect(() => {\n    loadProducts();\n  }, [loadProducts]);\n  \n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <ProductMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16} >\n     { loadingInitial && page === 0 ? <ProductListItemPlaceholder/> :\n     <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n        <ProductList />\n        </InfiniteScroll>}\n      </Grid.Column>\n      <Grid.Column width={5}>\n        <Sticky className=\"mobile hidden\" style={{ marginRight: 30, position: \"fixed\" }}>\n          <ProductFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column computer={9} mobile={16}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductDashboard);\n","export interface IProductsEnvelope {\n  products: IProduct[];\n  productCount: number;\n}\n\nexport interface IProduct {\n  id: string;\n  sellerId: string;\n  sellerUsername: string;\n  sellerDisplayName: string;\n  title: string;\n  model: string;\n  description: string;\n  price: string;\n  brand: string;\n  category: string;\n  countryName: string;\n  countryId: string;\n  city: string;\n  phoneNumber: string;\n  isActive: boolean;\n  isSold: boolean;\n  isAdvertised: boolean;\n  numberSeen: number;\n  numberFollowed: number;\n  viewers: IProductViewer [];\n  datePublished: string;\n  dateActivated: Date;\n  advertisingEndDate?: Date;\n  inactivityExpirationDate: Date;\n  dateAdvertised: Date;\n  typeAdvertising: string;\n  photoUrl: string;\n  file: Blob;\n\n}\n\nexport interface IProductViewer {\n  dateStarted?: Date;\n  displayName: string;\n  image?: string;\n  username: string;\n}\n\nexport class ProductFormValues {\n  id: string;\n  sellerId: string = '';\n  sellerUsername: string = '';\n  title: string = '';\n  model: string = '';\n  description: string = '';\n  price: string = '';\n  brand: string = '';\n  category: string = '';\n  countryName: string;\n  countryId: string;\n  city: string = '';\n  phoneNumber: string = '';\n  isActive: boolean;\n  isAdvertised: boolean;\n  datePublished: string = '';\n  dateActivated: Date;\n  dateAdvertised: Date;\n  photoUrl: string = '';\n  file: Blob;\n\n\n  constructor(init?: ProductFormValues) {\n    if (init)\n      Object.assign(this, init);\n  }\n}\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n  Label,\n} from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { ProductFormValues } from \"../../../app/models/product\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport { categories } from \"../../../app/common/options/productOptions\";\n\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ProductForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  history,\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createProduct, editProduct, submitting, loadProduct } =\n    rootStore.productStore;\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n  const { user } = rootStore.userStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired({ message: t(\"City is required\") }),\n    phoneNumber: composeValidators(\n      isNumeric({ message: t(\"Phone must be numeric value\") }),\n      // isRequired({ message: t(\"Phone is required\") }),\n      hasLengthGreaterThan(8)({\n        message: t(\"Phone needs to be at least 9 characters\"),\n      })\n    )(),\n    price: composeValidators(\n      isNumeric({ message: t(\"Price must be numeric value\") }),\n      isRequired({ message: t(\"Price is required\") })\n    )(),\n  });\n  const [product, setProduct] = useState(new ProductFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const [uploaded, setUploaded] = useState(false);\n  const [edited, setEdited] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n      setLoading(true);\n      setUploaded(true);\n      setEdited(true);\n\n      loadProduct(match.params.id)\n        .then((product) => {\n          setProduct(new ProductFormValues(product));\n        })\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [loadCountriesToSelect, loadProduct, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n\n    const { ...product } = values;\n    if (product.brand === \"\") product.brand = \"Brand not asigned\";\n    if (product.model === \"\") product.model = \"Model not asigned\";\n\n    if (!product.id) {\n      let newProduct = {\n        ...product,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        inactivityExpirationDate: new Date(\n          Date.now() + 1000 /*sec*/ * 60 /*min*/ * 60 /*hour*/ * 24 /*day*/ * 30\n        ),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        sellerUsername: user?.userName,\n      };\n      createProduct(newProduct);\n      addFeedItem(newId, \"Added Product\");\n    } else {\n      editProduct(product);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n  if (!ready) return <LoadingComponent content={t(\"Loading values...\")} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={product}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  {editMode && <Label content={t(\"Title\")} />}\n\n                  <Field\n                    placeholder={t(\"Title\")}\n                    name='title'\n                    value={product.title}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Price\")} />}\n                  <Field\n                    placeholder={t(\"Price\")}\n                    name='price'\n                    value={product.price}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Description\")} />}\n                  <Field\n                    placeholder={t(\"Description\")}\n                    name='description'\n                    rows={3}\n                    value={product.description}\n                    component={TextAreaInput}\n                  />\n\n                  {editMode && <Label content={t(\"Category\")} />}\n                  <Field\n                    placeholder={t(\"Category\")}\n                    name='category'\n                    options={categories}\n                    value={product.category}\n                    component={SelectInput}\n                  />\n\n                  {editMode && <Label content={t(\"Country\")} />}\n                  <Field\n                    placeholder={t(\"Country\")}\n                    name='countryName'\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  {editMode && <Label content={t(\"City\")} />}\n                  <Field\n                    placeholder={t(\"City\")}\n                    name='city'\n                    value={product.city}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Phone\")} />}\n                  <Field\n                    placeholder={t(\"Phone\")}\n                    name='phoneNumber'\n                    value={product.phoneNumber}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Model\")} />}\n                  <Field\n                    placeholder={t(\"Model\")}\n                    name='model'\n                    value={product.model}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Brand\")} />}\n                  <Field\n                    placeholder={t(\"Brand\")}\n                    name='brand'\n                    value={product.brand}\n                    component={TextInput}\n                  />\n\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    positive\n                    floated='right'\n                    type='submit'\n                    content={t(\"Submit\")}\n                  />\n                  <Button\n                    onClick={\n                      product.id\n                        ? () => history.push(`/product/${product.id}`)\n                        : () => history.push(\"/productForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t(\"Cancel\")}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{product.title}</Header>\n              <Image size='large' bordered src={product.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(ProductForm);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Feed, Segment } from \"semantic-ui-react\";\nimport { IFeed } from \"../../../app/models/feed\";\n\nconst FeedListItem: React.FC<{ feed: IFeed }> = ({ feed }) => {\n  return (\n    <Segment.Group raised>\n\n      <Feed>\n        <Feed.Event style={{backgroundColor: \"white\"}}>\n          <Feed.Label\n          >\n            <img\n              src={feed.notifierPhotoUrl || \"/assets/user.png\"}\n              alt='userPoto'\n            />\n          </Feed.Label>\n          <Feed.Content >\n            <Feed.Summary>\n              <Feed.User as={Link} to={`/profile/${feed.notifierUsername}`}>\n                {feed.notifierDisplayname} \n              </Feed.User>\n              {\" \"} \n              <Feed.Meta style={feed.isSeen ? {color: 'instagram'}:{color: 'brown'}}>{feed.info}</Feed.Meta>\n              {/* <Feed.Date>\n                {feed.dateTriggered}\n              </Feed.Date> */}\n            </Feed.Summary>\n          </Feed.Content>\n        </Feed.Event>\n      </Feed>\n              {/* // { fontWeight: 'bold'} : {fontWeight: 'normal'} */}\n    </Segment.Group>\n  );\n};\n\nexport default FeedListItem;\n\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport FeedListItem from \"./FeedListItem\";\n\nconst FeedList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { feedByDate, markSeenInDB\n    , \n    setFeedMounted, setFeedUnmounted \n  } = rootStore.feedStore;\n\n  useEffect(() => {\n     setFeedMounted();\n      const markSeen = async () => {\n        let ids: string[] = [];\n        for (var i = 0, len = feedByDate.length; i < len; i++) {\n          if (feedByDate[i][1][0].isSeen === false)\n            ids.push(feedByDate[i][1][0].id);\n        }\n        markSeenInDB(ids);\n      };\n      markSeen();\n    // }\n    return(()=> {\n      setFeedUnmounted();\n    })\n  }, [markSeenInDB, feedByDate, setFeedMounted, setFeedUnmounted]);\n\n  return (\n    <Fragment>\n      {feedByDate.map(([gr, feeds]) => (\n        <Fragment key={gr}>\n          <Item.Group divided>\n            {feeds.map((feed: any) => (\n              <FeedListItem feed={feed} key={feed.id} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(FeedList);\n","import React from \"react\";\nimport { Segment, Placeholder } from \"semantic-ui-react\";\nconst FeedListItemPlaceholder = () => {\n  return (\n    <Segment.Group raised>\n      <Segment>\n\n      <Placeholder fluid>\n        <Placeholder.Header image>\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Header>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n      </Placeholder>\n      </Segment>\n    </Segment.Group>\n  );\n};\nexport default FeedListItemPlaceholder;\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {  Grid, Loader} from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport FeedList from \"./FeedList\";\nimport FeedListItemPlaceholder from \"./FeedListItemPlaceholder\";\n\nconst FeedDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadFeed, loadingInitial, setPage, page, totalPages} =//, key \n    rootStore.feedStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadFeed().then(() => setLoadingNext(false));\n  };\n\n  // let key = 1;\n  // const [key, setKey] = useState(1);\n\n  useEffect(() => {\n    loadFeed();\n  }, [loadFeed]);\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column mobile={16} computer={15}>\n        {loadingInitial && page === 0 ? (\n          <FeedListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <FeedList />\n            {/* key={key} */}\n          </InfiniteScroll>\n            )}\n        </Grid.Column>\n        <Grid.Column mobile={16} computer={15}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(FeedDashboard);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { IProfile } from \"../../../app/models/profile\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst PeopleListItem: React.FC<{ member: IProfile }> = ({ member }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { onlineUsers } = rootStore.presenceStore;\n\n  const { t } = useTranslation([\"social\"]);\n \n  return (\n\n    <Card as={Link} to={`/profile/${member.username}`} raised>\n      <Card.Content>\n        <Image\n          floated='right'\n          size='mini'\n          src={member.image || \"/assets/user.png\"}\n          circular\n          bordered\n        />\n        <Card.Header>\n          {onlineUsers.includes(member.username) && (\n            <Icon name='check circle' className='isOnline' bordered circular size=\"tiny\"/>\n            )}\n            {member.displayName || \"display name\"}\n        </Card.Header>\n\n        <Card.Meta>\n          {member.followersCount === 1\n            ? member.followersCount + t(\"Folower\")\n            : t(\"Followers\")}{\" \"}\n        </Card.Meta>\n        {member.following && (\n          <Card.Description style={{ color: \"green\" }}>\n            {t(\"Following\")}\n          </Card.Description>\n        )}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default observer(PeopleListItem);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Card, Grid, Input } from \"semantic-ui-react\"; //Button, Form, , Menu\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PeopleListItem from \"./PeopleListItem\";\n\n\nconst PeopleList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { displayPeople, setPredicate } = rootStore.peopleStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const [input, setInput] = useState(\"\"); \n\n  const handleSearchResults = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n \n\n  return (\n    <Grid>\n          <Grid.Column width={8}>\n            <Input\n              name='search'\n              fluid\n              placeholder={t('Search all')}\n              value={input}\n              onInput={(e: any) => setInput(e.target.value)}\n              onKeyDown={(e: any) => handleSearchResults(e)}\n            />\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Button\n              content={t('See all')}\n              fluid\n              floated='right'\n              onClick={() => setPredicate(\"all\", \"true\")}\n            />\n          </Grid.Column>\n         \n      <Grid.Column width={16}>\n       \n        <Card.Group itemsPerRow={4} stackable={true} doubling={true}>\n          {displayPeople.map((member) => (\n            <PeopleListItem member={member} key={member.id} />\n          ))}\n        </Card.Group>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(PeopleList);\n","import React from 'react';\nimport { Segment, Placeholder, Grid } from 'semantic-ui-react';\nconst PeopleListItemPlaceholder = () => {\n\n\n  return (\n    <Grid columns={4} stackable>\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n  </Grid>\n    \n  );\n};\nexport default PeopleListItemPlaceholder;\n\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {  Grid, Loader} from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PeopleList from \"./PeopleList\";\nimport PeopleListItemPlaceholder from \"./PeopleListItemPlaceholder\";\n\nconst PeopleDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadPeople, loadingPeople, setPage, page, totalPages, cleanPeople } =//, cleanPeople\n    rootStore.peopleStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadPeople().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, [loadPeople]);\n\n  useEffect(() => {\n    return () => {\n      cleanPeople()\n    };\n  }, [cleanPeople]);\n\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column mobile={16} computer={16}>\n        {loadingPeople && page === 0 ? (\n          <PeopleListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <PeopleList />\n          </InfiniteScroll>\n          )}\n        </Grid.Column>\n        <Grid.Column mobile={16} computer={15}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PeopleDashboard);\n","export const mood = [\n    { key: 'Enthusiastic', text: 'Enthusiastic', value: 'Enthusiastic' },\n    { key: 'Happy', text: 'Happy', value: 'Happy' },\n    { key: 'Relaxed', text: 'Relaxed', value: 'Relaxed' },\n    { key: 'Concerned', text: 'Concerned', value: 'Concerned' },\n    { key: 'Tired', text: 'Tired', value: 'Tired' }\n  ];\n","export const weather = [\n    { key: 'Partly Cloudy', text: 'Partly Cloudy', value: 'Partly Cloudy' },\n    { key: 'Cloudy', text: 'Cloudy', value: 'Cloudy' },\n    { key: 'Rainy', text: 'Rainy', value: 'Rainy' },\n    { key: 'Stormy', text: 'Stormy', value: 'Stormy' },\n    { key: 'Sunny', text: 'Sunny', value: 'Sunny' },\n  ];","export const road = [\n    { key: 'Poor', text: 'Poor', value: 'Poor' },\n    { key: 'Not bad', text: 'Not bad', value: 'Not bad' },\n    { key: 'Decent', text: 'Decent', value: 'Decent' },\n    { key: 'Very good', text: 'Very good', value: 'Very good' },\n    { key: 'Excellent', text: 'Excellent', value: 'Excellent' },\n  ];","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n} from \"semantic-ui-react\";\nimport { DiaryEntryFormValues } from \"../../../app/models/activity\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport { mood } from \"../../../app/common/options/moodOptions\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport { weather } from \"../../../app/common/options/weatherOptions\";\nimport { road } from \"../../../app/common/options/roadOptions\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n  activityId: string;\n}\n\nconst DiaryEntryForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    submitting,\n    loadActivity,\n    createDiaryEntry,\n    loadDiaryEntry,\n    editDiaryEntry,\n    // ,\n  } = rootStore.activityStore;\n\n  // const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    locationCity: isRequired({ message: t(\"The location city is required\")}),\n    locationCountry: isRequired({ message: t(\"The location country is required\") }),\n    body: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    mood: isRequired({ message: \"The mood is required\" }),\n  });\n\n  const [diaryEntry, setdiaryEntry] = useState(new DiaryEntryFormValues());\n  const [loading, setLoading] = useState(false);\n\n  //===PHOTO UPLOAD===\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n  const [imageToUpload, setImageToUpload] = useState(null);\n  const [uploaded, setUploaded] = useState(false);\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n\n  const [edited, setEdited] = useState(false);\n\n  const [activity, setActivity] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n\n    loadActivity(match.params.activityId)\n      .then((activity) => setActivity(activity))\n      .finally(() => setLoading(false));\n\n    if (match.path === \"/manageDiaryEntry/:id/:activityId\") {\n      // console.log(\"match\", match);\n      loadDiaryEntry(match.params.id)\n        .then((diaryEntry) => setdiaryEntry(diaryEntry!))\n        .finally(() => setLoading(false));\n      setEdited(true);\n      setUploaded(true);\n\n    }\n  }, [\n    loadActivity,\n    match,\n    match.path,\n    match.params.id,\n    loadCountriesToSelect,\n    loadDiaryEntry,\n  ]);\n\n\n  const handleFinalFormSubmit = (values: any) => {\n    let uiId = uuid();\n    if (match.path === \"/createDiaryEntry/:activityId\") {\n      let newDiaryEntry = {\n        ...values,\n        id: uiId,\n        entryDate: new Date(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n      };\n      createDiaryEntry(newDiaryEntry, activity!);\n \n    } else {\n      let newDiaryEntry = {\n        ...values,\n        activityId: match.params.activityId,\n      };\n\n      editDiaryEntry(newDiaryEntry, activity!);\n    }\n\n  };\n\n  return (\n    <Grid>\n      {!uploaded && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={diaryEntry}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  <Field\n                    name='body'\n                    placeholder={t('What happened today?')}\n                    rows={5}\n                    component={TextAreaInput}\n                  />\n                  <Field\n                    name='mood'\n                    placeholder={t('What is your mood today?')}\n                    options={mood}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='weather'\n                    placeholder={t('What is weather like today?')}\n                    options={weather}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='road'\n                    placeholder={t('What is road like')}\n                    options={road}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='locationCountry'\n                    placeholder={t(\"Country you are in\")} //\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='locationCity'\n                    placeholder={t('City you are in')}\n                    component={TextInput}\n                  />\n                  <Field\n                    name='numberOfKilometers'\n                    placeholder={t('Number of kilometers')}\n                    component={TextInput}\n                  />\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    floated='right'\n                    positive\n                    type='submit'\n                    content={t('Submit')}\n                  ></Button>\n                  <Button\n                    onClick={() =>\n                      history.push(`/activities/${match.params.activityId}`)\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t('Cancel')}\n                  ></Button>\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>\n                {diaryEntry.locationCity}\n              </Header>\n              <Image size='large' bordered src={diaryEntry.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(DiaryEntryForm);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport { Grid, Image, Container } from \"semantic-ui-react\";\nimport { formatDistance } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { IPrivateMessage } from \"../../app/models/privatemessages\";\n\nconst PrivateMessageThreadList = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    messagesByThreadId,\n     markReadInDB,\n    setInitialView,\n    setView,\n  } = rootStore.privateMessageStore;\n\n  useEffect(() => {\n    setInitialView();\n  }, [setInitialView]);\n\n  const markRead = (messages: IPrivateMessage[]) => {\n    messages.forEach((m) => {\n      if (m.senderUsername !== user?.userName && m.dateRead === null) {\n        markReadInDB(m.id);\n      }\n    });\n  };\n\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column width={16}>\n          {messagesByThreadId.map(([id, messages]) => (\n            <Container\n              key={id}\n              style={{ backgroundColor: \"lightblue\", paddingTop: \"3em\" }}\n            >\n              <Grid\n                onClick={() => {\n                  markRead(messages);\n                  setView(messages[0].privateMessageThreadId);\n                }}\n                divided\n                style={{ cursor: \"pointer\" }}\n              >\n                <Grid.Column\n                  mobile={16}\n                  className='mobile only'\n                  style={{ padding: \"0px\", margin: \"0px\" }}\n                >\n                  <img\n                    className='ui centered medium image'\n                    style={{ borderRadius: \"50%\" }}\n                    width={\"40px\"}\n                    src={(messages[0].senderUsername === user?.userName \n                      ? \n                     messages[0].recipientPhotoUrl\n                      :\n                      messages[0].senderPhotoUrl ) \n                      || \"/assets/user.png\"\n                    } \n                   \n                    alt='sender'\n                  />\n                </Grid.Column>\n\n                <Grid.Column computer={4} className='mobile hidden'>\n                  <Image\n                    size='mini'\n                    circular\n                    verticalAlign='middle'\n                    src={(messages[0].senderUsername === user?.userName \n                      ? \n                     messages[0].recipientPhotoUrl\n                      :\n                      messages[0].senderPhotoUrl ) \n                      || \"/assets/user.png\"\n                    } \n                  />\n                  <span>\n                    {\" \"}\n                    {messages[0].senderUsername === user?.userName\n                      ? messages[0].recipientUsername\n                      : messages[0].senderDisplayName}\n                  </span>\n                </Grid.Column>\n                <Grid.Column width={12} className='mobile hidden'>\n                  <Grid.Row\n                    style={\n                      messages[0].dateRead === null &&\n                      messages[0].senderUsername !== user?.userName\n                        ? { fontWeight: \"bold\", color: \"rgb(211, 81, 21)\" }\n                        : { fontWeight: \"normal\" }\n                    }\n                  >\n                    <span>\n                      {formatDistance(\n                        new Date(messages[0].dateSent),\n                        new Date(),\n                        {\n                          addSuffix: true,\n                        }\n                      )}\n                    </span>\n\n                    <Grid.Row>\n                      {messages[0].content.substring(0, 18)}...\n                    </Grid.Row>\n                  </Grid.Row>\n                </Grid.Column>\n              </Grid>\n            </Container>\n          ))}\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PrivateMessageThreadList);\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  messageId: string;\n  privateMessageThreadId: string;\n  recipientUsername: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ messageId, privateMessageThreadId, recipientUsername }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteSingleMessage} = rootStore.privateMessageStore;\n \n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteSingleMessage = () => {\n    deleteSingleMessage(messageId, privateMessageThreadId, recipientUsername)\n      .then(() => closeModal())\n  };\n\n  const cancelDeleteSingleMessage = () => {\n    closeModal();\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('This action is irreversible')}\n          color='teal'\n          textAlign='center'\n        />\n        <Header\n          sub\n          content={t('Are you sure you want to delete this message?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <div className='ui two buttons' style={{paddingTop: \"2rem\"}}>\n          <Button\n            fluid\n            onClick={() => handleDeleteSingleMessage()}\n            // color='teal'\n            content={t('Yes, delete it')}\n            // floated='left'\n          />\n          <Button\n            fluid\n            positive\n            onClick={() => cancelDeleteSingleMessage()}\n            content={t(\"No, don't delete\")}\n            // floated='right'\n          />\n        </div>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","export interface IPrivateMessageEnvelope {\n\n    privateMessages: IPrivateMessage[];\n    privateMessageThreadsCount: number; \n    totalPages: number;\n}\n\nexport interface IPrivateMessage {\n    id: string;\n    senderId?: string;\n    senderUsername?: string;\n    senderDisplayName?: string;\n    senderPhotoUrl: string;\n    recipientId?: string;\n    recipientUsername?: string;\n    recipientPhotoUrl?: string;\n    content: string;\n    dateRead?: string;\n    dateSent: string;\n    privateMessageThreadId: string;\n}\n\nexport interface IPrivateMessageToSend {\n    recipientUsername: string;\n    content: string;\n    productId?: string;\n}\nexport interface IPrivateMessageToDelete {\n    id: string;\n    privateMessageThreadId: string;\n}\nexport interface IPrivateMessageToEdit {\n    id: string;\n    privateMessageThreadId: string;\n    content: string;\n    recipientUsername: string;\n    senderUsername: string;\n    senderPhotoUrl: string;\n}\n\nexport class PrivateMessageToEditValues {\n    id?: string;\n    content: string = '';\n    privateMessageThreadId: string = '';\n  \n    constructor(init?: PrivateMessageToEditValues) {\n      if (init)\n        Object.assign(this, init);\n    }\n  }\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, Button, Grid, Form } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { PrivateMessageToEditValues } from \"../../../app/models/privatemessages\";\n\nimport { combineValidators, isRequired } from \"revalidate\";\n\ninterface IProps {\n  messageId: string;\n  privateMessageThreadId: string;\n  content: string;\n  recipientUsername: string;\n  senderPhotoUrl: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({\n  messageId,\n  privateMessageThreadId,\n  content,\n  recipientUsername,\n  senderPhotoUrl,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { editMessage } = rootStore.privateMessageStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const validate = combineValidators({\n    content: isRequired({ message: t(\"Content is required\") }),\n  });\n\n  const [message, setMessage] = useState(new PrivateMessageToEditValues());\n\n  useEffect(() => {\n    let message = {\n      messageId,\n      privateMessageThreadId,\n      content,\n      recipientUsername,\n      senderPhotoUrl,\n    };\n    setMessage(message);\n  }, [\n    content,\n    messageId,\n    privateMessageThreadId,\n    recipientUsername,\n    senderPhotoUrl,\n  ]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    editMessage(\n      values.messageId,\n      values.privateMessageThreadId,\n      values.content,\n      values.recipientUsername,\n      values.senderPhotoUrl\n    );\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Edit message')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <FinalForm\n          validate={validate}\n          initialValues={message}\n          onSubmit={handleFinalFormSubmit}\n          render={({ handleSubmit, invalid, pristine }) => (\n            <Form onSubmit={handleSubmit}>\n              <Field\n                name='content'\n                rows={4}\n                value={message.content}\n                component={TextAreaInput}\n              />\n              <div className='ui two buttons' style={{ paddingTop: \"2rem\" }}>\n                <Button\n                  type='button'\n                  content={t(\"Cancel\")}\n                  onClick={closeModal}\n                />\n                <Button\n                  disabled={invalid || pristine}\n                  positive\n                  type='submit'\n                  content={t(\"Submit\")}\n                />\n              </div>\n            </Form>\n          )}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import React, { Fragment, useCallback, useEffect, useContext } from \"react\";\nimport {\n  Segment,\n  Image,\n  Grid,\n  GridColumn,\n  GridRow,\n  Icon,\n} from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { IPrivateMessage } from \"../../app/models/privatemessages\";\nimport ConfirmDelete from \"./modals/ConfirmDelete\";\nimport EditMessage from \"./modals/EditMessage\";\n\nconst PrivateMessageThreadListItem = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    listOfMessagesInFocus,\n    markReadInDB,\n    createHubConnection,\n    stopHubConnection,\n    setOtherUser,\n    cleanOtherUser,\n  } = rootStore.privateMessageStore;\n\n  const { markReadNavbar } = rootStore.presenceStore;\n\n  const { openModal, setSize } = rootStore.modalStore;\n\n  const userStyles = {\n    fontWeight: \"normal\",\n    borderRadius: \"20px\",\n    border: \"solid 1px\",\n    color: \"rgb(29, 115, 152)\",\n    width: \"97%\",\n    marginTop: \"20px\",\n    backgroundColor: \"lightblue\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    marginLeft: \"1rem\",\n  };\n  const senderStyles = {\n    fontWeight: \"normal\",\n    borderRadius: \"20px\",\n    border: \"solid 1px\",\n    color: \"black\",\n    width: \"97%\",\n    marginTop: \"20px\",\n    backgroundColor: \"inherit\",\n  };\n\n  const markRead = useCallback(\n    (messages: IPrivateMessage[]) => {\n      messages.forEach((m) => {\n        if (m.senderUsername !== user?.userName && m.dateRead === null) {\n          markReadInDB(m.id);\n        }\n      });\n    },\n    [markReadInDB, user]\n  );\n\n  const handleStartConnection = useCallback((otherUser: string) => {\n    markReadNavbar(otherUser);\n    markRead(listOfMessagesInFocus![1]);\n    createHubConnection(otherUser);\n  }, [markReadNavbar, markRead, createHubConnection, listOfMessagesInFocus]);\n\n  useEffect(() => {\n    let otherUser = listOfMessagesInFocus![1].find(\n      (m) => m.recipientUsername !== user?.userName\n    );\n    setOtherUser(otherUser?.recipientUsername!);\n    handleStartConnection(otherUser?.recipientUsername!);\n\n    return () => {\n      cleanOtherUser();\n      const handleStopConnection = (otherUser: string) => {\n        console.log(\"STOPPED FOR \" + otherUser);\n        stopHubConnection();\n      };\n      handleStopConnection(otherUser?.recipientUsername!);\n    };\n  }, [user, setOtherUser, cleanOtherUser, listOfMessagesInFocus, handleStartConnection, stopHubConnection]); \n\n  return (\n    <>\n      <Segment className='scrollRevert'>\n        {listOfMessagesInFocus![1].map((message: IPrivateMessage) => (\n          <Fragment key={message.id}>\n            {message.senderUsername !== user?.userName && (\n              <div className='message-list-item'>\n                <Grid\n                  key={message.id}\n                  style={senderStyles}\n                  textAlign='left'\n                  floated='left'\n                >\n                  <GridRow className='mobile hidden'>\n                    <GridColumn width={2}>\n                      <Image\n                        size='mini'\n                        circular\n                        verticalAlign='middle'\n                        src={message.senderPhotoUrl || \"/assets/user.png\"}\n                      />\n                    </GridColumn>\n\n                    <GridColumn width={14}>{message.content}</GridColumn>\n                  </GridRow>\n                  <GridRow\n                    only={\"mobile\"}\n                    style={{\n                      fontSize: \"smaller\",\n                      paddingTop: \".3rem\",\n                      paddingBottom: \".3rem\",\n                    }}\n                  >\n                    <GridColumn width={14}>{message.content}</GridColumn>\n                  </GridRow>\n                </Grid>\n              </div>\n            )}\n            {message.senderUsername === user?.userName && (\n              <div className='message-list-item'>\n                <Grid style={userStyles} textAlign='right' floated='right'>\n                  <GridRow className='mobile hidden'>\n                    <GridColumn width={1}>\n                      <Icon\n                        name='delete'\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => {\n                          setSize(\"mini\");\n                          openModal(\n                            <ConfirmDelete\n                              messageId={message.id}\n                              privateMessageThreadId={\n                                message.privateMessageThreadId\n                              }\n                              recipientUsername={message.recipientUsername!}\n                            />\n                          );\n                        }}\n                      />\n                      <Icon\n                        name='edit'\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => {\n                          setSize(\"mini\");\n                          openModal(\n                            <EditMessage\n                              messageId={message.id}\n                              privateMessageThreadId={\n                                message.privateMessageThreadId\n                              }\n                              content={message.content}\n                              recipientUsername={message.recipientUsername!}\n                              senderPhotoUrl={message.senderPhotoUrl}\n                            />\n                          );\n                        }}\n                      />\n                    </GridColumn>\n\n                    <GridColumn width={13}>{message.content}</GridColumn>\n                    <GridColumn width={2}>\n                      <Image\n                        size='mini'\n                        circular\n                        verticalAlign='middle'\n                        src={message.senderPhotoUrl || \"/assets/user.png\"}\n                      />\n                    </GridColumn>\n                  </GridRow>\n                  <GridRow\n                    only={\"mobile\"}\n                    style={{\n                      fontSize: \"smaller\",\n                      paddingTop: \".3rem\",\n                      paddingBottom: \".3rem\",\n                    }}\n                  >\n                    <GridColumn width={13}>{message.content}</GridColumn>\n                  </GridRow>\n                </Grid>\n              </div>\n            )}\n          </Fragment>\n        ))}\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(PrivateMessageThreadListItem);","import React, { useContext, useLayoutEffect, useRef, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\nimport Picker from \"emoji-picker-react\";\nimport { Form, Grid, GridColumn, Icon, Popup } from \"semantic-ui-react\";\n\nconst PrivateMessageReply = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    setRecipient,\n    setMessageThreadId,\n    listOfMessagesInFocus,\n    setUsername,\n    setReply,\n    addReply,\n  } = rootStore.privateMessageStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const [showPicker, setShowPicker] = useState(false);\n\n  const MIN_TEXTAREA_HEIGHT = 12;\n\n  const textareaRef = useRef<any>(null);\n  const [value, setValue] = useState(\"\");\n  const onChange = (event: any) => setValue(event.target.value);\n\n  const onEmojiClick = (event: any, emojiObject: any) => {\n    setValue((prevInput) => prevInput + emojiObject.emoji);\n    setShowPicker(false);\n  };\n\n  useLayoutEffect(() => {\n    // Reset height - important to shrink on delete\n    textareaRef.current.style.height = \"inherit\";\n    // Set height\n    textareaRef.current.style.height = `${Math.max(\n      textareaRef.current.scrollHeight,\n      MIN_TEXTAREA_HEIGHT\n    )}px`;\n    // textareaRef.current.style.fontSize = \"20px\";\n  }, [value]);\n\n  const handleSendReply = (e: any) => {\n    if (e !== null && e.key === \"Enter\") {\n      e.target.value = \"\";\n      if (value === \"\") {\n        e.preventDefault();\n        alert(\"Cannot send an empty message!\");\n      } else {\n        e.preventDefault();\n        setValue(\"\");\n        handleSetRecipient();\n        setMessageThreadId(listOfMessagesInFocus![0]);\n        setReply(value);\n        setUsername(user?.userName!);\n        addReply();\n      }\n    }\n  };\n\n  const handleSendButton = () => {\n    if (value !== \"\") {\n      handleSetRecipient();\n      setMessageThreadId(listOfMessagesInFocus![0]);\n      setReply(value);\n      setUsername(user?.userName!);\n      addReply();\n      setValue(\"\");\n      textareaRef.current.value = \"\";\n    } else {\n      alert(\"Cannot send an empty message!\");\n    }\n  };\n\n  const handleSetRecipient = () => {\n    if (listOfMessagesInFocus![1][0].senderUsername === user?.userName) {\n      setRecipient(\n        listOfMessagesInFocus![1][0].recipientUsername!,\n        user?.image\n      );\n    } else {\n      setRecipient(listOfMessagesInFocus![1][0].senderUsername!, user?.image);\n    }\n  };\n\n  return (\n    <Form>\n      <Grid>\n        <GridColumn width={1}>\n          <div className='smiley-picker'>\n            <Icon\n              name='smile outline'\n              circular\n              onClick={() => setShowPicker((val) => !val)}\n            />\n          </div>\n        </GridColumn>\n        <GridColumn width={1}>\n          <div className='send-button'>\n          <Popup\n                header={'SEND'}\n                trigger={\n              \n                  <Icon name='send' circular onClick={() => handleSendButton()} />\n              }\n               content={'You can also hit enter to send'}\n            />\n          </div>\n        </GridColumn>\n        <GridColumn computer={14} mobile={12}>\n          <div className='textareaRef'>\n            <textarea\n              ref={textareaRef}\n              autoFocus\n              placeholder={t(\"Reply\")}\n              onKeyDown={(e: any) => handleSendReply(e)}\n              onChange={onChange}\n              style={{\n                minHeight: MIN_TEXTAREA_HEIGHT,                \n                resize: \"none\",\n                borderRadius: '20px',\n              }}\n              // className='inside'\n              // \n              value={value}\n            />\n          </div>\n        </GridColumn>\n      </Grid>\n\n      {showPicker && (\n        <Picker\n          pickerStyle={{ width: \"90%\", left: \"5rem\", bottom: \"330px\" }}\n          onEmojiClick={onEmojiClick}\n        />\n      )}\n    </Form>\n  );\n};\n\nexport default observer(PrivateMessageReply);\n","import React, { Fragment } from 'react';\nimport { Segment,  Placeholder } from 'semantic-ui-react';\nconst PrivateMessagesListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header >\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default PrivateMessagesListItemPlaceholder;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Segment } from \"semantic-ui-react\"; //, Loader\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PrivateMessageThreadList from \"./PrivateMessageThreadList\";\nimport PrivateMessageThreadListItem from \"./PrivateMessageThreadListItem\";\nimport PrivateMessageReply from \"./PrivateMessageReply\";\nimport PrivateMessagesListItemPlaceholder from \"./PrivateMessagesListItemPlaceholder\";\n\nconst PrivateMessagesDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadMessages,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n    listOfMessagesInFocus,\n  } = rootStore.privateMessageStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMessages().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMessages();\n  }, [loadMessages]);\n\n  return (\n    <Segment\n      style={{ backgroundColor: \"lightblue\" }}\n      raised\n      id='top'\n      // className='sideScroll'\n    >\n      <Grid style={{ margin: \"0\", padding: \"0\" }}>\n        {loadingInitial && page === 0 ? (\n          <Grid.Row>\n            <Grid.Column width={16}>\n              <PrivateMessagesListItemPlaceholder />\n            </Grid.Column>\n          </Grid.Row>\n        ) : (\n          <Grid.Row>\n            <Grid.Column width={4}>\n              <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && page + 1 < totalPages}\n                initialLoad={false}\n              >\n                <PrivateMessageThreadList />\n              </InfiniteScroll>\n            </Grid.Column>\n\n            <Grid.Column width={12}>\n              <Grid.Row>\n                {listOfMessagesInFocus && <PrivateMessageThreadListItem />}\n\n                <PrivateMessageReply />\n              </Grid.Row>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(PrivateMessagesDashboard);\n","import { useLocation } from \"react-router-dom\";\n\nexport default function useQuery() {\n    return new URLSearchParams(useLocation().search);\n}","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport useQuery from \"../../app/common/util/hooks\";\n\nconst RegisterSuccess = () => {\n  const email = useQuery().get(\"email\") as string;\n  const { t } = useTranslation([\"forms\"]);\n\n  function handleConfirmEmailResend() {\n    agent.User.resendVerifyEmailConfirm(email)\n      .then(() => {\n        toast.success(t(\"Verification email resent - please check your email\"));\n      })\n      .catch((error) => console.log(error));\n  }\n\n  return (\n    <Segment placeholder textAlign='center'>\n      <Header icon color='green'>\n        <Icon name='check' />\n        {t(\"Successfully registered!\")}\n      </Header>\n      <p>\n        {t(\"Please check your email (including junk email) for the verification email\")}\n      </p>\n      {email && (\n        <>\n          <p>{t(\"Didn't receive the email? Click the below button to resend\")}</p>\n          <Button\n            primary\n            onClick={handleConfirmEmailResend}\n            content={t('Resend email')}\n            size='huge'\n          />\n        </>\n      )}\n    </Segment>\n  );\n};\n\nexport default RegisterSuccess;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport agent from '../../app/api/agent';\nimport { Button, Segment, Header, Icon } from 'semantic-ui-react';\nimport LoginForm from './LoginForm';\nimport { toast } from 'react-toastify';\nimport useQuery from '../../app/common/util/hooks';\nimport { useTranslation } from 'react-i18next';\n\nconst VerifyEmail = () => {\n    const email = useQuery().get('email') as string;\n    const token = useQuery().get('token') as string;\n\n  const rootStore = useContext(RootStoreContext);\n  const Status = {\n    Verifying: 'Verifying',\n    Failed: 'Failed',\n    Success: 'Success',\n  };\n\n  const [status, setStatus] = useState(Status.Verifying);\n  const { openModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"forms\"]);\n\n  useEffect(() => {\n    agent.User.verifyEmail(token as string, email as string)\n      .then(() => {\n        setStatus(Status.Success);\n      })\n      .catch(() => {\n        setStatus(Status.Failed);\n      });\n  }, [Status.Failed, Status.Success, token, email]);\n\n  const handleConfirmEmailResend = () => {\n    agent.User.resendVerifyEmailConfirm(email as string)\n      .then(() => {\n        toast.success(t('Verification email resent - please check your email'));\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getBody = () => {\n    switch (status) {\n      case Status.Verifying:\n        return <p>{t(\"Verifying...\")}</p>;\n      case Status.Failed:\n        return (\n          <div className='center'>\n            <p>\n              {t(\"Verication failed - you can try resending the verification email\")}\n            </p>\n            <Button onClick={handleConfirmEmailResend} primary size='huge' content={t('Resend email')} />\n          </div>\n        );\n      case Status.Success:\n        return (\n          <div className='center'>\n            <p>{t(\"Email has been verified - you can now login\")}</p>\n            <Button\n              primary\n              onClick={() => openModal(<LoginForm />)}\n              size='large'\n              content={t('Login')}\n            />\n          </div>\n        );\n    }\n\n  };\n  return (\n    <Segment placeholder>\n        <Header icon>\n            <Icon name='envelope' />\n            {t(\"Email verification\")}\n        </Header>\n\n        <Segment.Inline>\n            {getBody()}\n        </Segment.Inline>\n    </Segment>\n)\n};\n\nexport default VerifyEmail","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport useQuery from \"../../app/common/util/hooks\";\n\nconst SendRequestResetPasswordSuccess = () => {\n  const email = useQuery().get(\"email\") as string;\n  const { t } = useTranslation([\"forms\"]);\n\n  function handleResetPasswordResend() {\n    agent.User.resendPasswordRequest(email)\n      .then(() => {\n        toast.success(t(\"Password reset link resent - please check your email\"));\n      })\n      .catch((error) => console.log(error));\n  }\n\n  return (\n    <Segment placeholder textAlign='center'>\n      <Header icon color='green'>\n        <Icon name='check' />\n        {t(\"Password reset link sent\")}\n      </Header>\n      <p>\n        {t(\"Please check your email (including junk email) for the password reset link\")}\n      </p>\n      {email && (\n        <>\n          <p>{t(\"Didn't receive the email? Click the below button to resend\")}</p>\n          <Button\n            primary\n            onClick={handleResetPasswordResend}\n            content={t('Resend request')}\n            // content={t('Resend email')}\n            size='huge'\n          />\n        </>\n      )}\n    </Segment>\n  );\n};\n\nexport default SendRequestResetPasswordSuccess;\n","import React, { useContext } from \"react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { Button, Form, Header, Icon, Segment } from \"semantic-ui-react\";\nimport { FORM_ERROR } from \"final-form\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport TextInput from \"../../app/common/form/TextInput\";\n\nimport useQuery from \"../../app/common/util/hooks\";\nimport { useTranslation } from \"react-i18next\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport {\n  combineValidators,\n  composeValidators,\n  matchesField,\n  isRequired,\n  matchesPattern\n} from \"revalidate\";\n\nconst ResetPasswordForm = () => {\n  const email = useQuery().get(\"email\") as string;\n  const token = useQuery().get(\"token\") as string;\n\n  const rootStore = useContext(RootStoreContext);\n  const { resetPassword } = rootStore.userStore;\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const regexRule = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n  const validate = combineValidators({\n    password: composeValidators(\n\n      isRequired({ message: t(\"Password is required\") }),\n      matchesPattern((regexRule))({message: t(\"Password requires a minimum of eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\")})\n    )(),\n    \n    \n    confirmPassword: composeValidators(\n      isRequired({ message: t(\"Confirmation of password is required\") }),\n      matchesField(\n        \"password\",\n        \"confirmPassword\"\n      )({\n        message: t(\"Passwords do not match\"),\n      }),\n    )(),\n    \n  });\n\n  //\n\n\n  const handleResetPassword = async (values: any) => {\n    resetPassword(token, email, values.password)\n  };\n\n  return (\n    <Segment placeholder>\n      <Header icon>\n        <Icon name='envelope' />\n        {t(\"Forgotten password\")}\n      </Header>\n\n      <FinalForm\n        onSubmit=\n        {(values: IUserFormValues) =>\n          handleResetPassword(values).catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n        }\n\n       \n        validate={validate}\n        render={({\n          handleSubmit,\n          submitting,\n          invalid,\n          pristine,\n        }) => (\n          <Form\n            onSubmit={handleSubmit}\n            autoComplete='off'\n            style={{paddingBottom:\"8rem\"}}\n          >\n            <Header\n              as='h2'\n              content={t('Reset password')}\n              color='teal'\n              textAlign='center'\n            />\n            <Field\n              name='password'\n              component={TextInput}\n              placeholder={t(\"Password\")}\n              type='password'\n            />\n            <Field\n              name='confirmPassword'\n              component={TextInput}\n              placeholder={t(\"Confirm Password\")}\n              type='password'\n            />\n\n            <Button\n              disabled={invalid || pristine}\n              loading={submitting}\n              color='teal'\n              content={t('Reset your password')}\n              fluid\n            />\n          </Form>\n        )}\n      />\n    </Segment>\n  );\n};\n\nexport default ResetPasswordForm;\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"../../features/nav/NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport HomePage from \"../../features/home/HomePage\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport GalleryDashboard from \"../../features/gallery/dashboard/GalleryDashboard\";\nimport MechanicDashboard from \"../../features/mechanics/dashboard/MechanicDashboard\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport ProductDetails from \"../../features/shop/details/ProductDetails\";\nimport NotFound from \"./NotFound\";\nimport { ToastContainer } from \"react-toastify\";\nimport LoginForm from \"../../features/user/LoginForm\";\nimport { RootStoreContext } from \"../stores/rootStore\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\nimport GaleryDetails from \"../../features/gallery/details/GaleryDetails\";\nimport ForumDashboard from \"../../features/forum/dashboard/ForumDashboard\";\nimport ForumForm from \"../../features/forum/form/ForumForm\";\nimport ForumDetails from \"../../features/forum/details/ForumDetails\";\nimport MechanicDetails from \"../../features/mechanics/details/MechanicDetails\";\nimport MechanicForm from \"../../features/mechanics/form/MechanicForm\";\nimport GalleryForm from \"../../features/gallery/form/GalleryForm\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport ConfirmDelete from \"../../features/gallery/modals/ConfirmDelete\";\nimport ProductDashboard from \"../../features/shop/dashboard/ProductDashboard\";\nimport ProductForm from \"../../features/shop/forms/ProductForm\";\nimport FeedDashboard from \"../../features/feed/dashboard/FeedDashboard\";\nimport PeopleDashboard from \"../../features/people/dashboard/PeopleDashboard\";\nimport DiaryEntryForm from \"../../features/activities/form/DiaryEntryForm\";\nimport PrivateMessagesDashboard from \"../../features/private_messages/PrivateMessagesDashboard\";\nimport RegisterSuccess from \"../../features/user/RegisterSuccess\";\nimport VerifyEmail from \"../../features/user/VerifyEmail\";\nimport { useTranslation } from \"react-i18next\";\nimport SendRequestResetPasswordSuccess from \"../../features/user/SendRequestResetPasswordSuccess\";\nimport ResetPasswordForm from \"../../features/user/ResetPasswordForm\";\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n  const { createHubConnection } = rootStore.presenceStore;\n\n  const { t } = useTranslation([\"home\"]);\n\n  useEffect(() => {\n    if (token) {\n      getUser().finally(() => setAppLoaded());\n      //==00\n      createHubConnection();\n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token, createHubConnection]);\n\n  if (!appLoaded) return <LoadingComponent content={t(\"Loading app...\")} />;\n  return (\n    <>\n      <ModalContainer />\n      <ToastContainer position='top-right' />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <Switch>\n                <PrivateRoute\n                  exact\n                  path='/activities'\n                  component={ActivityDashboard}\n                />\n                <PrivateRoute\n                  path='/activities/:id'\n                  component={ActivityDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createDiary\", \"/manage/:id\"]}\n                  component={ActivityForm}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\n                    \"/createDiaryEntry/:activityId\",\n                    \"/manageDiaryEntry/:id/:activityId\",\n                  ]}\n                  component={DiaryEntryForm}\n                />\n\n                <PrivateRoute\n                  exact\n                  path='/gallery'\n                  component={GalleryDashboard}\n                />\n                <PrivateRoute path='/gallery/:id' component={GaleryDetails} />\n                <PrivateRoute\n                  path={[\"/galleryForm\", \"/manageGallery/:id\"]}\n                  key={location.key}\n                  component={GalleryForm}\n                />\n                <PrivateRoute exact path='/forum' component={ForumDashboard} />\n                <PrivateRoute\n                  exact\n                  path='/forum/:id'\n                  component={ForumDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/forumform\", \"/manageForum/:id\"]}\n                  component={ForumForm}\n                />\n                <PrivateRoute\n                  exact\n                  path='/mechanics'\n                  component={MechanicDashboard}\n                />\n                <PrivateRoute\n                  path='/mechanics/:id'\n                  component={MechanicDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/mechanicForm\", \"/manageMechanic/:id\"]}\n                  component={MechanicForm}\n                />\n\n                <PrivateRoute exact path='/shop' component={ProductDashboard} />\n                <PrivateRoute path='/product/:id' component={ProductDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/productForm\", \"/manageProduct/:id\"]}\n                  component={ProductForm}\n                />\n                <PrivateRoute\n                  exact\n                  path='/privateMessages'\n                  component={PrivateMessagesDashboard}\n                />\n\n                <PrivateRoute exact path='/feed' component={FeedDashboard} />\n                <PrivateRoute\n                  exact\n                  path='/people'\n                  component={PeopleDashboard}\n                />\n\n                <PrivateRoute\n                  path='/profile/:username'\n                  component={ProfilePage}\n                />\n                <Route\n                  path='/user/registerSuccess'\n                  component={RegisterSuccess}\n                />\n                <Route path='/user/verifyEmail' component={VerifyEmail} />\n                <Route path='/user/sendRequestResetPasswordSuccess' component={SendRequestResetPasswordSuccess} />\n                <Route path='/user/ResetPasswordForm' component={ResetPasswordForm} />\n                <Route path='/login' component={LoginForm} />\n                <Route path='/confirmDelete' component={ConfirmDelete} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </>\n  );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { withRouter } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\n\n const ScrollToTop = ({children, location: {pathname}}: any) => {\n     useEffect(()=> {\n         window.scrollTo(0, 0);\n     }, [pathname]);\n\n     return children;\n };\n \n export default withRouter(ScrollToTop);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    backend: {\n      // translation file path\n      loadPath: \"/assets/i18n/{{ns}}/{{lng}}.json\",\n    },\n    fallbackLng: \"en\",\n    // disable for prod\n    debug: false,\n    ns: [\"home\", \"navbar\", \"diaries\", \"gallery\", \"widget\", \"forum\", \"comments\", \"modals\", \"mechanics\", \"shop\", \"social\"], \n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n      formatSeparator: \",\",\n    },\n    react: {\n      // wait: true,\n      useSuspense: true,\n    },\n  });\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"./app/layout/styles.css\";\nimport App from \"./app/layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\nimport dateFnsLocalizer from \"react-widgets-date-fns\";\nimport \"./i18.n\";\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <Suspense fallback={null}>\n        <App />\n      </Suspense>\n    </ScrollToTop>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}