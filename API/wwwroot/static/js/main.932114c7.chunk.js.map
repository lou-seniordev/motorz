{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/forumPostStore.ts","app/stores/motofyStore.ts","app/stores/mechanicStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/ErrorMessage.tsx","app/common/form/TextInput.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/gallery/dashboard/GalleryListItemEmbracers.tsx","features/gallery/dashboard/GalleryListItem.tsx","features/gallery/dashboard/GalleryList.tsx","app/layout/LoadingComponent.tsx","features/gallery/dashboard/GalleryDashboard.tsx","features/mechanics/dashboard/MechanicListItem.tsx","features/mechanics/dashboard/MechanicList.tsx","features/mechanics/dashboard/MechanicDashboard.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/shop/dashboard/MerchantList.tsx","features/shop/dashboard/MerchantDashboard.tsx","features/shop/details/MerchantDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","features/gallery/details/GaleryDetailedChat.tsx","features/gallery/details/GaleryDetailedHeader.tsx","features/gallery/details/GaleryDetailedRating.tsx","features/gallery/details/GaleryDetailedSidebar.tsx","features/gallery/details/GalleryDetailedInfo.tsx","features/gallery/details/GaleryDetails.tsx","features/forum/dashboard/ForumListItem.tsx","features/forum/dashboard/ForumList.tsx","features/forum/dashboard/ForumDashboard.tsx","app/models/forumpost.ts","app/common/options/forumCategoryOptions.ts","features/forum/form/ForumForm.tsx","features/forum/details/ForumDetailedChat.tsx","features/forum/details/ForumDetailedHeader.tsx","features/forum/details/ForumDetailedInfo.tsx","features/forum/details/ForumDetailedSidebar.tsx","features/forum/details/ForumDetails.tsx","features/mechanics/details/MechanicDetailedHeader.tsx","features/mechanics/details/MechanicDetailedInfo.tsx","features/mechanics/details/MechanicDetailedSidebar.tsx","features/mechanics/details/MechanicDetails.tsx","app/models/mechanic.ts","app/common/options/yearOptions.ts","features/mechanics/form/MechanicForm.tsx","app/models/motofy.ts","app/common/options/brandOptions.ts","features/gallery/form/GalleryForm.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","startsWith","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","activity","update","attend","unattend","current","login","user","register","motofy","embrace","unembrace","username","uploadPhoto","photo","setMain","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","forumpost","mechanic","setActivityProps","date","Date","isGoing","attendees","some","a","userName","isHost","setMotofyProps","embraced","embracers","isOwner","createAttendee","displayName","image","createEmbracer","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","clear","loadActivities","URLSearchParams","String","forEach","value","key","toISOString","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","activites","sortedActivities","sort","b","getTime","Object","entries","reduce","activities","split","Map","action","set","computed","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","stop","loadingInitial","agent","axiosParams","activitiesEnvelope","userStore","toJS","submitting","attendee","event","target","currentTarget","name","loading","filter","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","x","following","followersCount","profiles","UserStore","setToken","modalStore","closeModal","ForumPostStore","getForumPost","forumPostRegistry","groupForumpostsByDate","forumposts","sortedForumposts","parse","dateAdded","editMode","MotofyStore","getMotofy","motofyRegistry","motofies","datePublished","embracer","MechanicStore","getMechanic","mechanicRegistry","mechanics","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","forumPostStore","motofyStore","mechanicStore","CommonStore","observer","createOptions","text","as","Link","to","useContext","logout","Menu","fixed","stackable","inverted","Container","Item","NavLink","exact","src","alt","style","marginRight","Responsive","Dropdown","button","item","className","floating","labeled","icon","options","position","Image","avatar","spaced","pointing","onClick","styles","borderColor","borderWidth","ActivityListItemAttendees","List","horizontal","map","Popup","header","trigger","size","circular","bordered","ActivityListItem","host","h","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","Button","floated","activitiesByDate","group","divided","setPredicate","vertical","width","marginTop","attached","active","has","onChange","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","Sticky","Loader","ErrorMessage","Message","statusText","length","flat","err","i","TextInput","input","type","placeholder","meta","touched","Form","Field","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","textAlign","component","RegisterForm","HomePage","isLoggedIn","openModal","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","Select","e","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","setActivity","setLoading","finally","initialValues","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","uuid","widths","positive","GalleryListItemEmbracers","GalleryListItem","owner","photoUrl","centered","brand","Extra","country","model","cubicCentimeters","motofiesByDate","LoadingComponent","Dimmer","loadMotofies","MechanicListItem","address","mechanicsByDate","loadMechanics","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","padding","ActivityDetailedInfo","verticalAlign","relaxed","ribbon","MerchantList","MerchantDashboard","MerchantDetails","NotFound","Inline","Modal","onClose","dropZoneStyles","borderRadius","paddingTop","dropZoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","initialAspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","overflow","isCurrentUser","setMainPhoto","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","bio","setEditMode","ProfileCard","extra","ProfileFollowings","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","ProfileActivities","ProfileContent","setActiveTab","menuPosition","Statistic","label","followingCount","Divider","Reveal","animated","visible","hidden","loadProfile","GaleryDetailedChat","Actions","Action","reply","TextArea","top","embraceMotofy","unembraceMotofy","GaleryDetailedRating","Rating","defaultRating","maxRating","GalleryDetailedInfo","yearOfProduction","numberOfKilometers","pricePaid","estimatedValue","loadMotofy","ForumListItem","forumpostsByDate","loadForumPosts","ForumpostFormValues","createForumpost","editForumpost","loadForumPost","setForumpost","newForumpost","ForumDetailedSidebar","yearOfStart","phone","website","MechanicDetailedSidebar","loadMechanic","MechanicFromValues","year","isValidEmail","createValidator","test","isNumeric","createMechanic","editMechanic","setMechanic","newMechanic","raws","MotofyFormValues","createMotofy","editMotofy","setMotofy","newMotofy","Component","props","withRouter","location","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","GalleryDashboard","GaleryDetails","GalleryForm","ForumDashboard","ForumDetails","ForumForm","MechanicDashboard","MechanicDetails","MechanicForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.932114c7.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { history } from '../..';\nimport { IActivity, IActivitiesEnvelope } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { IMotofy } from '../models/motofy';\nimport { IPhoto, IProfile } from '../models/profile';\nimport { IForumpost } from '../models/forumpost';\nimport { IMechanic } from '../models/mechanic';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - API not responsive');\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push('/notfound');\n  }\n  if (status === 401\n    && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\", error_description=\"The token expired')) {\n    window.localStorage.removeItem('jwt');\n    history.push('/');\n    toast.info('Your session has expired, please login again')\n  }\n  if (\n    status === 400 &&\n    config.method === 'get' &&\n    data.errors.hasOwnProperty('id')\n  ) {\n    history.push('/notfound');\n  }\n  if ((status === 404) || (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id'))) {\n    history.push('/notfound')\n  }\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n  // console.log(error.response);\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\n// const sleep = (ms: number) => (response: AxiosResponse) =>\n//   new Promise<AxiosResponse>((resolve) =>\n//     setTimeout(() => resolve(response), ms)\n//   );\n\nconst requests = {\n  get: (url: string) => \n    axios.get(url)\n    // .then(sleep(1000))\n    .then(responseBody),\n  post: (url: string, body: {}) => \n    axios.post(url, body)\n    // .then(sleep(1000))\n    .then(responseBody),\n  put: (url: string, body: {}) =>\n    axios.put(url, body)\n    // .then(sleep(1000))\n    .then(responseBody),\n  delete: (url: string) =>\n    axios.delete(url)\n    // .then(sleep(1000))\n    .then(responseBody),\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    return axios.post(url, formData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    }).then(responseBody)\n  }\n};\n\nconst Activities = {\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios.get('/activities', { params: params })\n    // .then(sleep(1000))\n    .then(responseBody),\n  // requests.get(`/activities?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post('/activities', activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete(`/activities/${id}`),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.delete(`/activities/${id}/attend`),\n};\n\nconst Forumposts = {\n  list: (): Promise<IForumpost[]> => requests.get('/forumposts'),\n  details: (id: string) => requests.get(`/forumposts/${id}`),\n  create: (forumpost: IForumpost) => requests.post('/forumposts', forumpost),\n  update: (forumpost: IForumpost) =>\n    requests.put(`/forumposts/${forumpost.id}`, forumpost),\n  delete: (id: string) => requests.delete(`/forumposts/${id}`),\n}\n\nconst Mechanics = {\n  list: (): Promise<IMechanic[]> => requests.get('mechanics'),\n  details: (id: string) => requests.get(`/mechanics/${id}`),\n  // // TODO: \n  create: (mechanic: IMechanic) => requests.post('/mechanics', mechanic),\n  update: (mechanic: IMechanic) =>\n    requests.put(`/mechanics/${mechanic.id}`, mechanic),\n  delete: (id: string) => requests.delete(`/mechanics/${id}`),\n};\n\nconst Motofies = {\n  list: (): Promise<IMotofy[]> => requests.get('motofies'),\n  details: (id: string) => requests.get(`/motofies/${id}`),\n  // TODO: \n  create: (motofy: IMotofy) => requests.post('/motofies', motofy),\n  update: (motofy: IMotofy) =>\n    requests.put(`/motofies/${motofy.id}`, motofy),\n  delete: (id: string) => requests.delete(`/motofies/${id}`),\n  embrace: (id: any) => requests.post(`/motofies/${id}/embrace`, {}),\n  unembrace: (id: any) => requests.delete(`/motofies/${id}/embrace`)\n};\nconst Brands = {\n  list: (): Promise<IMotofy[]> => requests.get('brands'),\n  details: (id: string) => requests.get(`/brand/${id}`),\n  // DONT THINK IM GONNA LET USER... \n  // create: (motofy: IMotofy) => requests.post('/brands', motofy),\n  // update: (motofy: IMotofy) =>\n  //   requests.put(`/brands/${motofy.id}`, motofy),\n  // delete: (id: string) => requests.delete(`/brands/${id}`),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get('/user'),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/login`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/register`, user),\n};\n\nconst Profiles = {\n  get: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/`, photo),\n  setMain: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n  updateProfile: (profile: Partial<IProfile>) => requests.put(`/profiles`, profile),\n  follow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.delete(`/profiles/${username}/follow`),\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`)\n\n};\n\nexport default {\n  Activities,\n  User,\n  Motofies,\n  Profiles,\n  Forumposts,\n  Mechanics,\n  Brands\n};\n","import { IActivity, IAttendee } from '../../models/activity';\nimport { IEmbracer, IMotofy } from '../../models/motofy';\nimport { IUser } from '../../models/user';\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n  // const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n\n  // const year = date.getFullYear();\n  // const month = date.getMonth() + 1;\n  // const day = date.getDate();\n  // const dateString = `${year}-${month}-${day}`;\n\n  const dateString = date.toISOString().split('T')[0];\n  const timeString = time.toISOString().split('T')[1];\n\n  //\n  return new Date(dateString + 'T' + timeString);\n};\n// NB: here userName should be changed (also in DB and EF) to username/Username\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n  activity.date = new Date(activity.date);\n  activity.isGoing = activity.attendees.some(\n    (a) => a.username === user.userName\n  );\n  activity.isHost = activity.attendees.some(\n    (a) => a.username === user.userName && a.isHost\n  );\n  return activity;\n};\n\nexport const setMotofyProps = (motofy: IMotofy, user: IUser) => {\n  motofy.embraced = motofy.embracers.some(\n    a => a.username === user?.userName\n  )\n  motofy.isOwner = motofy.embracers.some(\n    a => a.username === user.userName && a.isOwner\n  )\n  return motofy;\n}\n\nexport const createAttendee = (user: IUser):IAttendee => {\n    return {\n        displayName: user.displayName,\n        isHost: false,\n        username: user.userName,\n        image: user.image!\n    }\n}\n\nexport const createEmbracer = (user: IUser) : IEmbracer => {\n  return {\n    displayName: user.displayName,\n    isOwner: false,\n    username: user.userName,\n    image: user.image!\n  }\n}\n\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\nimport { SyntheticEvent } from 'react';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IActivity } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createAttendee, setActivityProps } from '../common/util/util';\nimport {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from '@microsoft/signalr';\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  }\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @observable activityCount = 0;\n  @observable page = 0;\n\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string | Date) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, value.toISOString())\n      } else {\n        params.append(key, value )\n      }\n    })\n    return params;\n  }\n\n  @computed get totalPages () {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  @action setPage =(page: number)=> {\n    this.page = page;\n  }\n\n  // === only observing reference not going deep into every property of the class ===\n  @observable.ref hubConnection: HubConnection | null = null;\n\n  @action createHubConnection = (activityId: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', activityId);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection'));\n\n    this.hubConnection.on('RecieveComment', (comment) => {\n      runInAction(() => {\n        this.activity!.comments.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.activity!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    values.activityId = this.activity!.id;\n    try {\n      await this.hubConnection!.invoke('SendComment', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activites: IActivity[]) {\n    const sortedActivities = activites.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n\n    // return sortedActivities;\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split('T')[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  //   ==== async await version ====\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n      const {activities, activityCount} = activitiesEnvelope;\n      runInAction('loading activities', () => {\n        activities.forEach((activity) => {\n          // console.log('activity is: ',activity)\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.activityCount = activityCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load activities error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  //   ==== example promise chaining version ====\n  //   @action loadActivities = () => {\n  //     this.loadingInitial = true;\n  //     agent.Activities.list()\n  //       .then((activities) => {\n  //         activities.forEach((activity) => {\n  //           activity.date = activity.date.split('.')[0];\n  //           this.activities.push(activity);\n  //         });\n  //       })\n  //       .catch(error => console.log(error))\n  //       .finally(() => (this.loadingInitial = false));\n  //   };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n      return toJS(activity) ;\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction('getting activity', () => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n        });\n        return activity;\n      } catch (error) {\n        runInAction('error get activity', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  // === helper method to loadActivity ===\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.attendees = attendees;\n      activity.comments = [];\n      activity.isHost = true;\n      runInAction('creating activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error.response);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction('editing activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('edit activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error.response);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction('deleting activity', () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete error activity', () => {\n        this.submitting = false;\n        this.target = '';\n        console.log(error);\n      });\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem joining the group at this time');\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            (a) => a.username !== this.rootStore.userStore.user?.userName\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem cancelling attendance at this time');\n    }\n  };\n}\n\n// export default createContext(new ActivityStore());\n","import { action, observable, reaction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class commonStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.token, // 1. what to react on\n      (token) => {      // 2. what to do when there is a change\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else {\n          window.localStorage.removeItem('jwt');\n        }\n      }\n    );\n  }\n\n  @observable token: string | null = window.localStorage.getItem('jwt');\n  @observable appLoaded = false;\n\n  @action setToken = (token: string | null) => {\n    this.token = token;\n  };\n\n  @action setAppLoaded = () => {\n    this.appLoaded = true;\n  };\n}\n","import { action, observable } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class ModalStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable.shallow modal = {\n    open: false,\n    body: null,\n  };\n\n  @action openModal = (content: any) => {\n      this.modal.open = true;\n      this.modal.body = content;\n  }\n\n  @action closeModal = () => {\n      this.modal.open = false;\n      this.modal.body = null;\n  }\n}\n","import { action, computed, observable, reaction, runInAction } from 'mobx';\nimport { toast } from 'react-toastify';\n\nimport agent from '../api/agent';\nimport { IPhoto, IProfile, IUserActivity } from '../models/profile';\nimport { RootStore } from './rootStore';\n\nexport default class ProfileStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction (\n      () => this.activeTab,\n      activeTab => {\n        if(activeTab === 3 || activeTab === 4){\n          const predicate = activeTab === 3 ? 'followers' : 'following'\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    )\n  }\n\n  @observable profile: IProfile | null = null;\n  @observable loadingProfile = true;\n  @observable uploadingPhoto = false;\n  @observable loading = false;\n  @observable followings: IProfile[] = [];\n  @observable activeTab: number = 0;\n\n  @observable userActivities: IUserActivity[] = [];\n  @observable loadingActivities = false;\n\n  \n  @computed get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      return this.rootStore.userStore.user.userName === this.profile.username;\n    } else {\n      return false;\n    }\n  }\n  \n  @action loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n    try {\n      const activities = await agent.Profiles.listActivities(username, predicate!);\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user activities');\n      runInAction(() => {\n        this.loadingActivities = false;\n      })\n    }\n  }\n  \n  @action setActiveTab = (activeIndex: number) =>{\n    this.activeTab = activeIndex;\n  }\n  \n  @action loadProfile = async (username: string) => {\n    this.loadingProfile = true;\n    try {\n      const profile = await agent.Profiles.get(username);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingProfile = false;\n      });\n      console.log(error);\n    }\n  };\n  @action uploadPhoto = async (file: Blob) => {\n    this.uploadingPhoto = true;\n    try {\n      const photo = await agent.Profiles.uploadPhoto(file);\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos.push(photo);\n          if (photo.isMain && this.rootStore.userStore.user) {\n            this.rootStore.userStore.user.image = photo.url;\n            this.profile.image = photo.url;\n          }\n        }\n        this.uploadingPhoto = false;\n      });\n    } catch (error) {\n      console.log(error);\n      toast.error('Problem uploading photo');\n      runInAction(() => {\n        this.uploadingPhoto = false;\n      });\n    }\n  };\n\n  @action setMainPhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.setMain(photo.id);\n      runInAction(() => {\n        this.rootStore.userStore.user!.image = photo.url;\n        this.profile!.photos.find((x) => x.isMain)!.isMain = false;\n        this.profile!.photos.find((x) => x.id === photo.id)!.isMain = true;\n        this.profile!.image = photo.url;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem setting photo as main');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action deletePhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n      runInAction(() => {\n        this.profile!.photos = this.profile!.photos.filter(\n          (a) => a.id !== photo.id\n        );\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem deleting the photo');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action updateProfile = async (profile: Partial<IProfile>) => {\n    try {\n      await agent.Profiles.updateProfile(profile);\n      runInAction(() => {\n        if (\n          profile.displayName !== this.rootStore.userStore.user!.displayName\n        ) {\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\n        }\n        this.profile = { ...this.profile!, ...profile };\n      });\n    } catch (error) {\n      toast.error('Problem updating profile');\n    }\n  };\n  @action follow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.follow(username);\n      runInAction(() => {\n        this.profile!.following = true;\n        this.profile!.followersCount++;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem following user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action unfollow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.unfollow(username);\n      runInAction(() => {\n        this.profile!.following = false;\n        this.profile!.followersCount--;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem unfollowing user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action loadFollowings = async (predicate: string) => {\n    this.loading = true;\n    try {\n      const profiles = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n      runInAction(() => {\n        this.followings = profiles;\n        // this.followings = [];\n        this.loading = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading followings');\n      runInAction(() => {\n        this.loading = false;\n      })\n    }\n  }\n}\n","import { action, computed, observable, runInAction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { RootStore } from './rootStore';\n\nexport default class UserStore {\n\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() {return !! this.user};\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n            });\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities');\n            \n        } catch (error) {\n            throw error\n        }\n    }\n    @action getUser = async () => {\n        try {\n            const user = await agent.User.current();\n            runInAction(() => {\n                this.user = user;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n        // console.log(this.user?.userName);\n    }\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        history.push('/')\n    }\n    @action register = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.register(values);\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities');\n        } catch (error) {\n            throw error;\n        }\n    }\n}","import { observable, action, computed, runInAction } from 'mobx';\nimport { SyntheticEvent } from 'react';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IForumpost } from '../models/forumpost';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\n// configure({ enforceActions: 'always' });\n\nexport default class ForumPostStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  @observable forumPostRegistry = new Map();\n  @observable forumposts: IForumpost[] = [];\n  @observable forumpost: IForumpost | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n\n  @observable target = '';\n\n  @computed get forumpostsByDate() {\n    return this.groupForumpostsByDate(\n      Array.from(this.forumPostRegistry.values())\n    );\n  }\n\n  groupForumpostsByDate(forumposts: IForumpost[]) {\n    const sortedForumposts = forumposts.sort(\n      (a, b) => Date.parse(a.dateAdded) - Date.parse(b.dateAdded)\n    );\n    return Object.entries(\n      sortedForumposts.reduce((forumposts, forumpost) => {\n        const date = forumpost.dateAdded.split('T')[0];\n        forumposts[date] = forumposts[date]\n          ? [...forumposts[date], forumpost]\n          : [forumpost];\n        return forumposts;\n      }, {} as { [key: string]: IForumpost[] })\n    );\n  }\n\n  @action loadForumPosts = async () => {\n    this.loadingInitial = true;\n    try {\n      const forumposts = await agent.Forumposts.list();\n      runInAction('loading forumposts', () => {\n        forumposts.forEach((forumpost) => {\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n        });\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load forumposts error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadForumPost = async (id: string) => {\n    let forumpost = this.getForumPost(id);\n    if (forumpost) {\n      this.forumpost = forumpost;\n      return forumpost;\n    } else {\n      this.loadingInitial = true;\n      try {\n        forumpost = await agent.Forumposts.details(id);\n        runInAction('getting forumpost', () => {\n          this.forumpost = forumpost;\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n          this.loadingInitial = false;\n        });\n        this.forumpost = forumpost;\n      } catch (error) {\n        runInAction('get forumpost error', () => {\n          this.loadingInitial = false;\n          console.log(error);\n        });\n      }\n    }\n  };\n\n  @action clearForumPost = () => {\n    this.forumpost = null;\n  };\n\n  getForumPost = (id: string) => {\n    return this.forumPostRegistry.get(id);\n  };\n\n  @action createForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    try {\n      await agent.Forumposts.create(forumpost);\n      runInAction('creating forumposts', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        // this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('create forumpost error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n  @action editForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    try {\n      await agent.Forumposts.update(forumpost);\n      runInAction('editing forumpost', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        this.forumpost = forumpost;\n        this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('edit forumpost error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action deleteForumpost = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Forumposts.delete(id);\n      runInAction('deleting forumpost', () => {\n        this.forumPostRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete forumpost error', () => {\n        this.submitting = false;\n        this.target = '';\n      });\n      console.log(error);\n    }\n  };\n\n  @action openCreateForm = () => {\n    this.editMode = true;\n    this.forumpost = null;\n  };\n\n  @action openEditForm = (id: string) => {\n    this.forumpost = this.forumPostRegistry.get(id);\n    this.editMode = true;\n  };\n\n  @action cancelSelectedForumpost = () => {\n    this.forumpost = null;\n  };\n\n  @action cancelFormOpen = () => {\n    this.editMode = false;\n    // TODO: GO BACK WHEREVER YOU WERE\n  };\n\n  @action selectForum = (id: string) => {\n    this.forumpost = this.forumPostRegistry.get(id);\n    this.editMode = false;\n  };\n}\n\n// export default createContext(new ForumPostStore());\n","import { observable, action, runInAction, computed } from 'mobx';\nimport { IMotofy } from '../models/motofy';\nimport agent from '../api/agent';\nimport { SyntheticEvent } from 'react';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createEmbracer, setMotofyProps } from '../common/util/util';\n\n// configure({ enforceActions: 'always' });\n\nexport default class MotofyStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable motofyRegistry = new Map();\n\n  @observable motofies: IMotofy[] = [];\n  @observable motofy: IMotofy | null = null;\n\n  @observable editMode = false;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @computed get motofiesByDate() {\n    return Array.from(this.motofyRegistry.values()).sort(\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\n    );\n  }\n\n  // @computed get motofiesByDate() {\n  //   return this.groupMotofiesByDate(Array.from(this.motofyRegistry.values()));\n  // }\n\n  // groupMotofiesByDate(motofies: IMotofy[]) {\n  //   const sortedMotofies = motofies.sort(\n  //     (a, b) => Date.parse(a.datePublished) - Date.parse(b.datePublished)\n  //   )\n  //   return Object.entries(sortedMotofies.reduce((motofies, motofy) => {\n  //     const date = motofy.datePublished.split('T')[0];\n  //     motofies[date] = motofies[date] ? [...motofies[date], motofy] : [motofy];\n  //     return motofies;\n  //   },{} as {[key: string]: IMotofy[]}));\n  // }\n\n  @action loadMotofies = async () => {\n    this.loadingInitial = true;\n    // const user = ;\n    try {\n      const motofies = await agent.Motofies.list();\n      runInAction('loading motofies', () => {\n        motofies.forEach((motofy) => {\n          motofy.datePublished = motofy.datePublished?.split('T')[0];\n          // === Util Class ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofyRegistry.set(motofy.id, motofy);\n        });\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMotofy = async (id: string) => {\n    let motofy = this.getMotofy(id);\n    if (motofy) {\n      this.motofy = motofy;\n      return motofy;\n    } else {\n      this.loadingInitial = true;\n      try {\n        motofy = await agent.Motofies.details(id);\n        runInAction('getting motofy', () => {\n          // === why not using date here??? ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofy = motofy;\n          this.motofyRegistry.set(motofy.id, motofy);\n          this.loadingInitial = false;\n        });\n        return motofy;\n      } catch (error) {\n        runInAction('get motofy error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n  @action clearMotofy = () => {\n    this.motofy = null;\n  };\n\n  getMotofy = (id: string) => {\n    return this.motofyRegistry.get(id);\n  };\n\n  @action createMotofy = async (motofy: IMotofy) => {\n    this.submitting = true;\n    try {\n      await agent.Motofies.create(motofy);\n      const embracer = createEmbracer(this.rootStore.userStore.user!);\n      embracer.isOwner = true;\n      let embracers = [];\n      embracers.push(embracer);\n      motofy.embracers = embracers;\n      motofy.isOwner = true;\n      runInAction('create motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);\n        // CHECK IF IT IS GOING TO BE NEEDED!!\n        // this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction(() => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n  // @action createMotofy = async (motofy: IMotofy) => {\n  //   this.submitting = true;\n  //   try {\n  //     await agent.Motofies.create(motofy);\n  //     runInAction(() => {\n  //       this.motofies.push(motofy);\n  //       this.editMode = false;\n  //     });\n  //   } catch (error) {\n  //     runInAction(() => {\n  //       this.submitting = false;\n  //     });\n  //     console.log(error);\n  //   }\n  // };\n\n  @action editMotofy = async (motofy: IMotofy) => {\n    this.submitting = true;\n    this.editMode = true;\n    try {\n      await agent.Motofies.update(motofy);\n      runInAction('editing motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);\n        this.motofy = motofy;\n        this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction('edit motofy error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action deleteMotofy = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Motofies.delete(id);\n      runInAction('deleting Motofy', () => {\n        this.motofyRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete motofy error', () => {\n        this.submitting = false;\n        this.target = '';\n      });\n      console.log(error);\n    }\n  };\n\n  @action embraceMotofy = async () => {\n    const embracer = createEmbracer(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Motofies.embrace(this.motofy!.id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers.push(embracer);\n          this.motofy.embraced = true;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n  @action unembraceMotofy = async () => {\n    this.loading = true;\n    try {\n      await agent.Motofies.unembrace(this.motofy!.id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers = this.motofy.embracers.filter(\n            (a) => a.username !== this.rootStore.userStore.user!.userName\n          );\n          this.motofy.embraced = false;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n        }\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n  @action openCreateForm = () => {\n    this.editMode = true;\n    this.motofy = null;\n  };\n\n  // @action loadMotofy = async (id: string) => {\n  //   let motofy = this.getMotofy(id);\n  //   // console.log(motofy);\n  //   if (motofy) {\n  //     this.motofy = motofy;\n  //   } else {\n  //     this.loadingInitial = true;\n  //     try {\n  //       motofy = await agent.Motofies.details(id);\n  //       runInAction('getting motofy', () => {\n  //         this.motofy = motofy;\n  //         this.loadingInitial = false;\n  //       });\n  //     } catch (error) {\n  //       runInAction('Getting activity error', () => {\n  //         this.loadingInitial = false;\n  //       });\n  //       console.log(error);\n  //     }\n  //   }\n  // };\n\n  @action openEditForm = (id: string) => {\n    this.editMode = true;\n    this.motofy = this.motofyRegistry.get(id);\n  };\n\n  @action cancelSelectedMotofy = () => {\n    this.motofy = null;\n  };\n\n  @action cancelFormOpen = () => {\n    this.editMode = false;\n  };\n\n  @action selectMotofy = (id: string) => {\n    this.motofy = this.motofyRegistry.get(id);\n    this.editMode = false;\n  };\n}\n\n// export default createContext(new MotofyStore());\n","import { action, observable, computed, runInAction } from 'mobx';\nimport { SyntheticEvent } from 'react';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IMechanic } from '../models/mechanic';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\n\n// configure({ enforceActions: 'always' });\n\nexport default class MechanicStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  @observable mechanicRegistry = new Map();\n\n  @observable mechanics: IMechanic[] = [];\n  @observable mechanic: IMechanic | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n\n  @observable target = '';\n\n \n  @computed get mechanicsByDate() {\n    return Array.from(this.mechanicRegistry.values()).sort(\n      (a, b) => Date.parse(a.datePublished) - Date.parse(b.datePublished)\n    );\n  }\n\n  @action loadMechanics = async () => {\n    this.loadingInitial = true;\n    try {\n      const mechanics = await agent.Mechanics.list();\n      runInAction('loading mechanics', () => {\n        mechanics.forEach((mechanic) => {\n          mechanic.datePublished = mechanic.datePublished?.split('T')[0];\n          console.log(mechanic.datePublished); \n          // this.mechanics.push(mechanic); // === refactor for map\n          this.mechanicRegistry.set(mechanic.id, mechanic);\n        });\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load mechanics error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMechanic = async (id: string) => {\n    let mechanic = this.getMechanic(id);\n    if (mechanic) {\n      this.mechanic = mechanic;\n      return mechanic;\n    } else {\n      this.loadingInitial = true;\n      try {\n        mechanic = await agent.Mechanics.details(id);\n        runInAction('getting mechanic', () => {\n          this.mechanic = mechanic;\n          this.loadingInitial = false;\n        });\n        return mechanic;\n      } catch (error) {\n        runInAction('get mechanic error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action clearMechanic = () => {\n    this.mechanic = null;\n  }\n\n  getMechanic = (id: string) => {\n    return this.mechanicRegistry.get(id);\n  };\n\n  @action createMechanic = async (mechanic: IMechanic) => {\n    this.submitting = true;\n    try {\n      await agent.Mechanics.create(mechanic);\n      runInAction('creating mechanics', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error.response);\n    }\n  };\n\n  @action editMechanic = async (mechanic: IMechanic) => {\n    this.submitting = true;\n    try {\n      // console.log('mechanic', mechanic);\n      await agent.Mechanics.update(mechanic);\n      runInAction('creating mechanic', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.mechanic = mechanic;\n        this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error.response);\n    }\n  };\n\n  @action deleteMechanic = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Mechanics.delete(id);\n      runInAction('deleting mechanic', () => {\n        this.mechanicRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete mechanic error', () => {\n        this.submitting = false;\n        this.target = '';\n      });\n      console.log(error);\n    }\n  };\n\n  @action openCreateForm = () => {\n    this.editMode = true;\n    this.mechanic = null;\n  };\n  @action openEditForm = (id: string) => {\n    this.mechanic = this.mechanicRegistry.get(id);\n    // console.log(this.mechanic?.yearOfStart);\n    this.editMode = true;\n  };\n  @action cancelSelectedMechanic = () => {\n    this.mechanic = null;\n  };\n  @action cancelFormOpen = () => {\n    this.editMode = false;\n    // TODO: GO BACK WHEREVER YOU WERE\n  };\n\n  @action selectMechanic = (id: string) => {\n    // this.selectedMechanic = this.mechanics.find(m => m.id === id); // === refactor for map\n    this.mechanic = this.mechanicRegistry.get(id);\n    this.editMode = false;\n  };\n}\n\n// export default createContext(new MechanicStore());\n","import { configure } from 'mobx';\nimport { createContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './profileStore';\nimport UserStore from './userStore';\nimport ForumPostStore from './forumPostStore';\nimport MotofyStore from './motofyStore';\nimport MechanicStore from './mechanicStore';\n\n// === mobx === //\nconfigure({ enforceActions: 'always' });\n\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    forumPostStore: ForumPostStore;\n    motofyStore: MotofyStore;\n    mechanicStore: MechanicStore;\n\n    //me:\n    // motofyStore: MotofyStore\n\n    constructor () {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n        this.forumPostStore = new ForumPostStore(this);\n        this.motofyStore = new MotofyStore(this);\n        this.mechanicStore = new MechanicStore(this);\n\n        // me:\n        // this.motofyStore = new MotofyStore(this);\n    }\n}\n\nexport const RootStoreContext = createContext(new RootStore());","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport {\n  Container,\n  Dropdown,\n  Image,\n  Menu,\n  Responsive,\n} from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst NavBar: React.FC = () => {\n  const createOptions = [\n    {\n      key: 'Mecanic',\n      text: 'Mecanics Shop',\n      value: 'Mecanic',\n      as: Link,\n      to: '/mechanicForm',\n    },\n    {\n      key: 'Riding',\n      text: 'Riding Route',\n      value: 'Riding',\n      as: Link,\n      to: '/createActivity',\n    },\n    {\n      key: 'Post',\n      text: 'Gallery Post',\n      value: 'Post',\n      as: Link,\n      to: '/galleryForm',\n    },\n    {\n      key: 'Forum',\n      text: 'Forum Post',\n      value: 'Forum',\n      as: Link,\n      to: '/forumform',\n    },\n  ];\n  const rootStore = useContext(RootStoreContext);\n\n  const { user, logout } = rootStore.userStore;\n  return (\n    <Menu fixed='top' stackable inverted>\n      {/* pointing secondary */}\n      <Container>\n        <Menu.Item as={NavLink} exact to='/'>\n          <img\n            src='/assets/logo.png'\n            alt='logo'\n            style={{ marginRight: '10' }}\n          />\n          Motoranza\n        </Menu.Item>\n        <Responsive />\n        <Menu.Item name='gallery' exact as={NavLink} to='/gallery' />\n        <Menu.Item name='riding routes' exact as={NavLink} to='/activities' />\n        <Menu.Item name='forum' exact as={NavLink} to='/forum' />\n        <Menu.Item name='repair shops' exact as={NavLink} to='/mechanics' />\n        <Menu.Item name='shop' exact as={NavLink} to='/merchant' />\n        {user && (\n          <Menu.Item>\n            <Dropdown\n              button\n              item\n              className='icon'\n              floating\n              labeled\n              icon='world'\n              options={createOptions}\n              // search // no, because it does not close\n              text='Create'\n            />\n          </Menu.Item>\n        )}\n        {user && (\n          <Menu.Item position='right'>\n            <Image\n              avatar\n              spaced='right'\n              src={user.image || '/assets/user.png'}\n            />\n            <Dropdown pointing='top left' text={user.displayName}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  as={Link}\n                  to={`/profile/${user.userName}`}\n                  text='My profile'\n                  icon='user'\n                />\n                <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n              </Dropdown.Menu>\n            </Dropdown>\n          </Menu.Item>\n        )}\n      </Container>\n    </Menu>\n  );\n};\n\nexport default observer(NavBar);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IAttendee } from '../../../app/models/activity';\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst styles = {\n  borderColor: 'orange',\n  borderWidth: 2\n}\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\n  return (\n    <List horizontal>\n      {attendees.map((attendee) => (\n        <List.Item key={attendee.username}>\n          <Popup\n            header={attendee.displayName}\n            trigger={\n              <Image\n                size='mini'\n                circular\n                src={attendee.image || '/assets/user.png'}\n                bordered\n                style={attendee.following ? styles : null}\n              />\n            }\n          />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ActivityListItemAttendees;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\n\n// No need for an interface just one property restructured...\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n  // console.log(host);\n\n  return (\n    <Segment.Group>\n      <Segment>\n        <Item.Group>\n          <Item>\n            {/*  */}\n            <Item.Image\n              size='tiny'\n              circular\n              src={host.image || '/assets/user.png'}\n              style={{ marginBottom: 3 }}\n            />\n            <Item.Content>\n              <Item.Content>\n                <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                  {activity.title}\n                </Item.Header>\n\n                <Item.Description>\n                  Hosted by{' '}\n                  <Link to={`/profile/${host.username}`}>\n                    {' '}\n                    {host.displayName}\n                  </Link>\n                </Item.Description>\n                {activity.isHost && (\n                  <Item.Description>  \n                    <Label\n                      basic\n                      color='orange'\n                      content='You are hosting this activity'\n                    />\n                  </Item.Description>\n                )}\n                {activity.isGoing && !activity.isHost && (\n                  <Item.Description>\n                    <Label\n                      basic\n                      color='green'\n                      content='You are going to this activity'\n                    />\n                  </Item.Description>\n                )}\n              </Item.Content>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        <Icon name='clock' /> {format(activity.date, 'h:mm:a')}\n        <Icon name='marker' /> {activity.venue}, {activity.city}\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendees attendees={activity.attendees} />\n      </Segment>\n      <Segment clearing>\n        <span>{activity.description}</span>\n        <Button\n          as={Link}\n          to={`/activities/${activity.id}`}\n          floated='right'\n          content='view'\n          color='blue'\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityListItem;\n","import { observer } from 'mobx-react-lite';\nimport React, { Fragment, useContext } from 'react';\nimport { Item, Label } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport ActivityListItem from './ActivityListItem';\nimport { format } from 'date-fns';\n\nconst ActivityList = () => { //: React.FC -> jer mislim ne treba..?\n  const rootStore = useContext(RootStoreContext);\n  const {activitiesByDate} = rootStore.activityStore;\n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Label size='large' color='blue'>\n            {format(Date.parse(group), 'eeee do MMMM')}\n          </Label>\n            <Item.Group divided>\n              {activities.map((activity) => (\n                <ActivityListItem key={activity.id} activity={activity} />\n              ))}\n            </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityList);\n","import React, { Fragment, useContext } from 'react';\nimport { Menu, Header } from 'semantic-ui-react';\nimport { Calendar } from 'react-widgets';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport { observer } from 'mobx-react-lite';\n\nconst ActivityFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.activityStore;\n  return (\n    <Fragment>\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\n        <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate('all', 'true')}\n          color={'blue'}\n          name={'all'}\n          content={'All Activities'}\n        />\n        <Menu.Item\n          active={predicate.has('isGoing')}\n          onClick={() => setPredicate('isGoing', 'true')}\n          color={'blue'}\n          name={'username'}\n          content={'I have joined'}\n        />\n        <Menu.Item\n          active={predicate.has('isHost')}\n          onClick={() => setPredicate('isHost', 'true')}\n          color={'blue'}\n          name={'host'}\n          content={\"I'm organizing\"}\n        />\n      </Menu>\n      <Header\n        icon={'calendar'}\n        attached\n        color={'teal'}\n        content={'Select Date'}\n      />\n      <Calendar\n        onChange={(date) => setPredicate('startDate', date!)}\n        value={predicate.get('startDate') || new Date()}\n      />\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid style={{ marginTop: 50 }}>\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' floated='right' content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ActivityListItemPlaceholder;\n\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Grid, Loader, Sticky } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\n// import LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nconst ActivityDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n  } = rootStore.activityStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadActivities().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n  // if (loadingInitial && page === 0)\n  //   return <LoadingComponent content='Loading Activities...' />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        {loadingInitial && page === 0 ? <ActivityListItemPlaceholder/> : (\n\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={handleGetNext}\n          hasMore={!loadingNext && page + 1 < totalPages}\n          initialLoad={false}\n        >\n          <ActivityList />\n        </InfiniteScroll>\n        )}\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <Sticky style={{marginRight: 30, position: 'fixed'}} >\n\n          <ActivityFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","import { AxiosResponse } from 'axios';\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface IProps {\n  error: AxiosResponse;\n  text?: string ;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({ error, text  }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {error.data && Object.keys(error.data.errors).length > 0 && (\n          <Message.List>\n              {Object.values(error.data.errors).flat().map((err: any, i) => (\n                  <Message.Item key={i}>{err}</Message.Item>\n              ))}\n          </Message.List>\n      )}\n      {text && <Message.Content content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { Form, FormFieldProps, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error },\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {/* type='text' was and error */}\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n\n","import { FORM_ERROR } from 'final-form';\nimport React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { combineValidators, isRequired } from 'revalidate';\nimport { Button, Form, Header } from 'semantic-ui-react';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\nimport TextInput from '../../app/common/form/TextInput';\nimport { IUserFormValues } from '../../app/models/user';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  email: isRequired('Email'),\n  password: isRequired('Password'),\n});\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        login(values).catch((error) => ({\n          [FORM_ERROR]: error,\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit,\n      }) => (\n        <Form onSubmit={handleSubmit} error={submitError}>\n          <Header\n            as='h2'\n            content='Login to Motoranza'\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='email' component={TextInput} placeholder='Email' />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder='Password'\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n              text='Invalid email address or password'\n            />\n          )}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content='Login'\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default LoginForm;\n","import { FORM_ERROR } from 'final-form';\nimport React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { combineValidators, isRequired } from 'revalidate';\nimport { Button, Form, Header } from 'semantic-ui-react';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\nimport TextInput from '../../app/common/form/TextInput';\nimport { IUserFormValues } from '../../app/models/user';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  username: isRequired('Username'),\n  displayName: isRequired('DisplayName'),\n  email: isRequired('Email'),\n  password: isRequired('Password'),\n});\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        register(values).catch((error) => ({\n          [FORM_ERROR]: error,\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit,\n      }) => (\n        <Form onSubmit={handleSubmit} error={submitError}>\n          <Header\n            as='h2'\n            content='Sign up to Motoranza'\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='username' component={TextInput} placeholder='Username' />\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder='Display Name'\n          />\n          <Field name='email' component={TextInput} placeholder='Email' />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder='Password'\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n\n            />\n          )}\n            {/* text={JSON.stringify(submitError.data.errors)} */}\n\n          {/* <br /> */}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content='Register'\n            fluid\n          />\n          {/* <pre>{JSON.stringify(form.getState(), null, 2)}</pre> */}\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import React, { Fragment, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport LoginForm from '../user/LoginForm';\nimport RegisterForm from '../user/RegisterForm';\n\nconst HomePage = () => {\n  const token = window.localStorage.getItem('jwt');\n  const rootStore = useContext(RootStoreContext);\n  const { isLoggedIn, user } = rootStore.userStore;\n  const {openModal} = rootStore.modalStore;\n\n  return (\n    <Segment inverted textAlign='center' vertical className='masthead'>\n      <Container text>\n        <Header as='h1' inverted>\n          <Image\n            size='massive'\n            src='/assets/logo.png'\n            alt='logo'\n            style={{ marginBottom: 12 }}\n          />\n          MOTORANZA\n        </Header>\n        {isLoggedIn && user && token ? (\n          <Fragment>\n            <Header\n              as='h2'\n              inverted\n              content={`Welcome back to Motoranza ${user.displayName}`}\n            />\n            <Button as={Link} to='/gallery' size='huge' inverted>\n              Enter Motoranza\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Header as='h2' inverted content={'Welcome to Motoranza'} />\n            <Button onClick={() => openModal(<LoginForm/>)} to='/login' size='huge' inverted>\n              Login to Enter \n            </Button>\n            <Button onClick={() => openModal(<RegisterForm/>)} size='huge' inverted>\n              Register to Enter \n            </Button>\n          </Fragment>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default HomePage;\n","export interface IActivitiesEnvelope {\n  activities: IActivity[];\n  activityCount: number;\n}\n\nexport interface IActivity {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  date: Date;\n  city: string;\n  venue: string;\n  isGoing: boolean;\n  isHost: boolean;   \n  attendees: IAttendee[];\n  comments: IComment[];\n}\n\nexport interface IComment {\n  id: string;\n  createdAt: Date;\n  body: string;\n  username: string;\n  displayName: string;\n  image: string;\n\n}\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n  time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  category: string = '';\n  description: string = '';\n  date?: Date = undefined;\n  time?: Date = undefined;\n  city: string = '';\n  venue: string = '';\n\n  constructor(init?: IActivityFormValues) {\n    if (init && init.date) {\n      init.time = init.date;\n    }\n    Object.assign(this, init);\n  }\n}\n\nexport interface IAttendee {\n  username: string;\n  displayName: string;\n  image: string;\n  isHost: boolean;\n  following?: boolean;\n}\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput","export const category = [\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\n    { key: 'culture', text: 'Culture', value: 'culture' },\n    { key: 'film', text: 'Film', value: 'film' },\n    { key: 'food', text: 'Food', value: 'food' },\n    { key: 'music', text: 'Music', value: 'music' },\n    { key: 'travel', text: 'Travel', value: 'travel' }\n  ];","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <DateTimePicker \n            placeholder={placeholder}\n            value={input.value || null}\n            onChange={input.onChange}\n            onBlur={input.onBlur}\n            onKeyDown={(e) => e.preventDefault()}\n            date={date}\n            time={time}\n            {...rest}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default DateInput","import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Form, Grid, Segment } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from 'revalidate';\n\nconst validate = combineValidators({\n  title: isRequired({ message: 'The event title is required' }),\n  category: isRequired('Category'),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters',\n    })\n  )(),\n  city: isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date'),\n  time: isRequired('Time'),\n});\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity,\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then((activity) => setActivity(new ActivityFormValues(activity)))\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid(),\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='title'\n                  placeholder='Title'\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  name='description'\n                  placeholder='Description'\n                  value={activity.description}\n                  rows={3}\n                  component={TextAreaInput}\n                />\n                <Field\n                  name='category'\n                  placeholder='Category'\n                  options={category}\n                  value={activity.category}\n                  component={SelectInput}\n                />\n                <Form.Group widths='equal'>\n                  <Field\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    placeholder='Date'\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder='Time'\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                <Field\n                  name='city'\n                  placeholder='City'\n                  value={activity.city}\n                  component={TextInput}\n                />\n                <Field\n                  name='venue'\n                  placeholder='Venue'\n                  value={activity.venue}\n                  component={TextInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content='Submit'\n                ></Button>\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content='Cancel'\n                ></Button>\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n      <Grid.Column width={3} />\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IEmbracer } from '../../../app/models/motofy';\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\nconst GalleryListItemEmbracers: React.FC<IProps> = ({ embracers }) => {\n  return (\n    <List horizontal>\n      {embracers.map(embracer => (\n        <List.Item key={embracer.username}>\n            <Popup\n                header={embracer.displayName}\n                trigger={<Image size='mini' circular src={embracer.image || '/assets/user.png'} />}\n            />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default GalleryListItemEmbracers;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment, Image } from 'semantic-ui-react';\n\nimport { IMotofy } from '../../../app/models/motofy';\nimport GalleryListItemEmbracers from './GalleryListItemEmbracers';\n\ninterface IProps {\n  motofy: IMotofy;\n}\n\nconst GalleryListItem: React.FC<IProps> = ({ motofy }) => {\n  const owner = motofy.embracers.filter(x => x.isOwner)[0] || 'unknown testing';\n\n  return (\n    <Segment.Group>\n      <Segment>\n        <Item>\n          <Item.Group>\n            {/* <Item.Image size='' bordered src='/assets/user.png'/> */}\n            <Item.Image size='big' bordered src={motofy.photoUrl} centered />\n          </Item.Group>\n          <Item.Content>\n            <Item.Header as={Link} to={`/gallery/${motofy.id}`}>{motofy.name}</Item.Header>\n            {/* <Item.Meta>{motofy.brand}</Item.Meta> */}\n            <Image\n              size='mini'\n              src={`/assets/brandImages/${motofy.brand}.png`}\n            />\n            <Label basic content={motofy.brand} />\n            <Item.Description>Owned by {owner.displayName || 'unknown'}</Item.Description>\n            {motofy.isOwner && (\n              <Item.Description>\n                <Label\n                  basic\n                  color='orange'\n                  content='You are owner of this motofy'\n                />\n              </Item.Description>\n            )}\n            {motofy.embraced && !motofy.isOwner &&(\n              <Item.Description>\n                <Label\n                  basic\n                  color='green'\n                  content='You embraced this motofy'\n                />\n              </Item.Description>\n            )}\n            <Item.Extra></Item.Extra>\n          </Item.Content>\n        </Item>\n      </Segment>\n      <Segment>\n        <Icon name='clock' /> {motofy.datePublished}\n        <Icon name='marker' /> {motofy.city}, {motofy.country}\n      </Segment>\n      <Segment>\n        <Icon name='motorcycle' /> {motofy.model} /\n        <Icon name='flag checkered' /> {motofy.cubicCentimeters} cc\n      </Segment>\n      <Segment secondary>\n        <GalleryListItemEmbracers embracers={motofy.embracers} />\n      </Segment>\n      <Segment clearing>\n        <span>{motofy.description}</span>\n        <Button\n          as={Link}\n          to={`/gallery/${motofy.id}`}\n          floated='right'\n          content='View'\n          color='blue'\n        ></Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryListItem;\n","import React, { Fragment, useContext } from 'react';\nimport {  Item, Label, Segment } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport GalleryListItem from './GalleryListItem';\nimport { IMotofy } from '../../../app/models/motofy';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst GalleryList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {motofiesByDate } = rootStore.motofyStore;\n\n  return (\n    <Segment secondary>\n      <Item.Group divided>\n        {motofiesByDate.map((motofy:IMotofy) => (\n          <Fragment key={motofy.id}>\n            <Label size='large' color='blue'><span>Name:</span> {motofy.name}</Label>\n            <GalleryListItem motofy={motofy}/>\n          </Fragment>\n        ))}\n      </Item.Group>\n    </Segment>\n  );\n};\n// }\n\nexport default observer(GalleryList);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content,\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, { useContext, useEffect } from 'react'; \nimport { Grid, } from 'semantic-ui-react';\nimport GalleryList from './GalleryList';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\n\nconst GalleryDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {loadMotofies, loadingInitial } = rootStore.motofyStore;\n\n \n  useEffect(() => {\n    //t\n    loadMotofies();\n    \n  },  [loadMotofies]);\n\n  if (loadingInitial) return <LoadingComponent content={'Loading motofies...'} />;\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <GalleryList/>\n      </Grid.Column>\n      <Grid.Column width={6}>\n      <h2>Motofy filters placholder</h2>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GalleryDashboard);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { IMechanic } from '../../../app/models/mechanic';\n\nconst MechanicListItem: React.FC<{ mechanic: IMechanic }> = ({ mechanic }) => {\n  //   console.log(mechanic);\n  return (\n    <Segment.Group>\n      <Segment>\n        <Item>\n          <Item.Group>\n            <Label basic content={mechanic.city} />\n            <Item>\n              <Item.Image size='tiny' circular src={mechanic.photoUrl} />\n              <Item.Content>\n                <Item.Header as='a'>{mechanic.name}</Item.Header>\n                <Item.Description>Posted by Bob</Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Item>\n      </Segment>\n      <Segment>\n        <Icon name='clock outline' /> {mechanic.datePublished}\n        {/* <Icon name='history'/> {mechanic.yearOfStart} */}\n      </Segment>\n      <Segment clearing>\n        <span>\n          <Icon name='sitemap' /> {mechanic.description}\n        </span>\n      </Segment>\n      <Segment clearing>\n        <Icon name='envelope outline' /> {mechanic.city}, {mechanic.country}, \n        {mechanic.address}\n        {/* <Item.Extra> */}\n          <Button\n            // onClick={() => selectMechanic(mechanic.id)}\n            as={Link}\n            to={`/mechanics/${mechanic.id}`}\n            floated='right'\n            content='View'\n            color='blue'\n          ></Button>\n        {/* </Item.Extra> */}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default MechanicListItem;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Item, Segment } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport MechanicListItem from './MechanicListItem';\n\nconst MechanicList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { mechanicsByDate } = rootStore.mechanicStore;\n\n  return (\n    <Segment clearing>\n      <Item.Group divided>\n        {mechanicsByDate.map((mechanic) => (\n          <MechanicListItem mechanic={mechanic} key={mechanic.id} />\n        ))}\n      </Item.Group>\n    </Segment>\n  );\n};\n\nexport default observer(MechanicList);\n","import React, { useContext, useEffect } from 'react'; //, createRef\nimport { Grid,  Sticky } from 'semantic-ui-react';//Rail,\n\nimport MechanicList from './MechanicList';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst MechanicDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {loadMechanics, loadingInitial } = rootStore.mechanicStore;\n\n\n  \n  // const contextRef: React.RefObject<any>  = createRef();\n\n\n  useEffect(() => {\n    loadMechanics();\n  }, [loadMechanics]);\n\n  if (loadingInitial) return <LoadingComponent content='Loading mechanics...' />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <MechanicList/>\n      </Grid.Column>\n\n      <Grid.Column width={6}>\n      {/*  */}\n      {/* <Rail position='left'> */}\n      {/* context={contextRef} */}\n        <Sticky style={{marginRight: 30, position: 'fixed'}}> \n         <h2 >Mechanic filters go here</h2>\n        </Sticky>\n      {/* </Rail> */}\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDashboard);\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Link } from 'react-router-dom';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport { observer } from 'mobx-react-lite';\nimport { formatDistance } from 'date-fns';\n\nconst ActivityDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createHubConnection,\n    stopHubConnection,\n    addComment,\n    activity,\n  } = rootStore.activityStore;\n\n  useEffect(() => {\n    createHubConnection(activity!.id);\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, activity]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group>\n          {activity &&\n            activity.comments &&\n            activity.comments.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                  <div>\n                      {formatDistance(\n                        new Date(comment.createdAt),\n                        new Date()\n                      )}\n                    </div>\n                    {/* <div>{formatDistance(comment.createdAt, new Date())}</div> */}\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field \n                name='body'\n                component={TextAreaInput}\n                rows={2}\n                placeholder='Add your comment'\n                />\n                <Button\n                  content='Add Reply'\n                  labelPosition='left'\n                  icon='edit'\n                  primary\n                  loading={submitting}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailedChat);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst activityImageStyle = {\n  filter: 'brightness(30%)',\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  bottom: '5%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white',\n};\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n\n  const rootStore = useContext(RootStoreContext);\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: '0' }}>\n        <Image\n          src={`/assets/categoryImages/${activity.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment basic style={activityImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='huge'\n                  content={activity.title}\n                  style={{ color: 'white' }}\n                />\n                <p>{format(activity.date, 'eeee do MMMM')}</p>\n                <p>\n                  Hosted by{' '}\n                  <Link to={`/profile/${host.username}`}>\n                    <strong>{host.displayName}</strong>\n                  </Link>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached='bottom'>\n        {activity.isHost ? (\n          <Button\n            as={Link}\n            to={`/manage/${activity.id}`}\n            color='orange'\n            floated='right'\n          >\n            Manage Ridding Route\n          </Button>\n        ) : activity.isGoing ? (\n          <Button loading={loading} onClick={cancelAttendance}>\n            Cancel your place\n          </Button>\n        ) : (\n          <Button loading={loading} onClick={attendActivity} color='teal'>\n            Join Us\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { IActivity } from '../../../app/models/activity'\nimport { format } from 'date-fns';\n\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\n    return (\n       <Segment.Group>\n             <Segment attached='top'>\n               <Grid>\n                 <Grid.Column width={1}>\n                   <Icon size='large' color='teal' name='info' />\n                 </Grid.Column>\n                 <Grid.Column width={15}>\n                   <p>{activity.description}</p>\n                 </Grid.Column>\n               </Grid>\n             </Segment>\n             <Segment attached>\n               <Grid verticalAlign='middle'>\n                 <Grid.Column width={1}>\n                   <Icon name='calendar' size='large' color='teal' />\n                 </Grid.Column>\n                 <Grid.Column width={15}>\n                   <span>\n                   {format(activity.date, 'eeee do MMMM')} at  {format(activity.date, 'h:mm a')}\n                   </span>\n                 </Grid.Column>\n               </Grid>\n             </Segment>\n             <Segment attached>\n               <Grid verticalAlign='middle'>\n                 <Grid.Column width={1}>\n                   <Icon name='marker' size='large' color='teal' />\n                 </Grid.Column>\n                 <Grid.Column width={11}>\n                   <span>{activity.venue}, {activity.city}</span>\n                 </Grid.Column>\n               </Grid>\n             </Segment>\n           </Segment.Group>\n    )\n}\n\nexport default ActivityDetailedInfo\n","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\nimport { IAttendee } from '../../../app/models/activity';\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: 'none' }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People '} Going\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.map((attendee) => (\n            <Item key={attendee.username} style={{ position: 'relative' }}>\n              {attendee.isHost && (\n                <Label\n                  style={{ position: 'absolute' }}\n                  color='orange'\n                  ribbon='right'\n                >\n                  Host\n                </Label>\n              )}\n              <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h3'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && (\n                  <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                )}\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailedSidebar);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\n\n  useEffect(() => {\n    loadActivity(match.params.id);\n  }, [loadActivity, match.params.id, history]);\n\n  if (loadingInitial ) return <LoadingComponent content='Loading activity...' />;\n\n    //!!! what to do with this? //\n  if(!activity) \n    return <h2>Not found</h2>\n    \n  return (\n    <Grid> \n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity}/>\n        <ActivityDetailedInfo activity={activity}/>\n        <ActivityDetailedChat />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar attendees={activity.attendees}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\n\nconst MerchantList = () => {\n  return (\n    <div>\n      <h1>\n        <p>\n          This section will make possible \n          for all our members \n          to sell and buy\n          products.\n          It is is coming soon. \n        </p>\n        <p>\n          You are the most awesome crowd ever!\n        </p>\n        <p>\n          Thank you so much for you patience.\n        </p>\n      </h1>\n    </div>\n  );\n};\n\nexport default MerchantList;\n","import React from 'react'\nimport { Grid } from 'semantic-ui-react'\nimport MerchantList from './MerchantList'\n\nconst MerchantDashboard = () => {\n    return (\n        <Grid>\n           <Grid.Column width={2}></Grid.Column>\n        <Grid.Column width={14}>\n          <MerchantList/>\n        </Grid.Column>\n        <Grid.Column width={2}>\n          {/* <h2>Merchant Filters Go Here</h2> */}\n        \n        </Grid.Column>\n      </Grid>\n    )\n}\n\nexport default MerchantDashboard\n","import React from 'react'\n\nconst MerchantDetails = () => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default MerchantDetails\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../stores/rootStore';\n\nconst ModalContainer = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\n  return (\n    <Modal open={open} onClose={closeModal} size='mini'>\n      <Modal.Content>{body}</Modal.Content>\n     \n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface IProps {\n  setFiles: (files: object[]) => void;\n}\n\nconst dropZoneStyles = {\n  border: 'dashed 3px',\n  borderColor: '#eee',\n  borderRadius: '5px',\n  paddingTop: '30px',\n  textAlign: 'center' as 'center',\n  height: '200px',\n};\n\nconst dropZoneActive = {\n  borderColor: 'green',\n};\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    setFiles(\n      acceptedFiles.map((file: object) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n    );\n  }, [setFiles]);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style={\n        isDragActive ? { ...dropZoneStyles, ...dropZoneActive } : dropZoneStyles\n      }\n    >\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge'/>\n      <Header content='Drop \\n image here'/>\n    </div>\n  );\n};\n\nexport default PhotoWidgetDropzone;\n","import React, { useRef } from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n  setImage: (file: Blob) => void;\n  imagePreview: string;\n}\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\n  const cropper = useRef<Cropper>(null);\n\n  const cropImage = () => {\n    if (\n      cropper.current &&\n      typeof cropper.current.getCroppedCanvas() === 'undefined'\n    ) {\n      return;\n    }\n    cropper &&\n      cropper.current &&\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n        setImage(blob);\n      }, 'image/jpeg');\n  };\n  return (\n    <Cropper\n      ref={cropper}\n      src={imagePreview}\n      style={{ height: 200, width: '100%' }}\n      // Cropper.js options\n      initialAspectRatio={1 / 1}\n      preview='.img-preview'\n      guides={false}\n      viewMode={1}\n      dragMode='move'\n      scalable={true}\n      cropBoxMovable={true}\n      cropBoxResizable={true}\n      crop={cropImage}\n      //   ref={cropperRef}\n    />\n  );\n};\n\nexport default PhotoWidgetCropper;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { Header, Grid, Button } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface IProps {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n  const [files, setFiles] = useState<any[]>([]);\n  const [image, setImage] = useState<Blob | null>(null);\n\n  // == this is to clean up the uploaded file from memory ==\n  useEffect(() => {\n    return () => {\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    };\n  });\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column width={4}>\n          <Header color='teal' sub content='Step 1 - Add Photo' />\n          <PhotoWidgetDropzone setFiles={setFiles} />\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column width={4}>\n          <Header sub color='teal' content='Step 2 - Resize image' />\n          {files.length > 0 && (\n            <PhotoWidgetCropper\n              setImage={setImage}\n              imagePreview={files[0].preview}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column width={4}>\n          <Header sub color='teal' content='Step 3 - Preview & Upload' />\n          {files.length > 0 && (\n            <Fragment>\n              <div\n                className='img-preview'\n                style={{ minHeight: '200px', overflow: 'hidden' }}\n              />\n              <Button.Group widths={2}>\n                <Button\n                  positive\n                  icon='check'\n                  loading={loading}\n                  onClick={() => uploadPhoto(image!)}\n                />\n                <Button \n                icon='close'\n                disabled={loading}\n                onClick={() => setFiles([])}\n                />\n              </Button.Group>\n            </Fragment>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PhotoUploadWidget);\n\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst ProfilePhotos = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    isCurrentUser,\n    uploadPhoto,\n    uploadingPhoto,\n    setMainPhoto,\n    loading,\n    deletePhoto,\n  } = rootStore.profileStore;\n  const [addPhotoMode, setAddPhotoMode] = useState(true);\n  const [target, setTarget] = useState<string | undefined>(undefined);\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\n    undefined\n  );\n\n  const handleUplaodImage = (photo: Blob) => {\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\n  };\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n          <Header floated='left' icon='image' content='Photos' />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handleUplaodImage}\n              loading={uploadingPhoto}\n            />\n          ) : (\n            <Card.Group itemsPerRow={5}>\n              {profile &&\n                profile.photos.map((photo) => (\n                  <Card key={photo.id}>\n                    <Image src={photo.url} />\n                    {isCurrentUser && (\n                      <Button.Group fluid widths={2}>\n                        <Button\n                          name={photo.id}\n                          basic\n                          positive\n                          content='Main'\n                          onClick={(e) => {\n                            setMainPhoto(photo);\n                            setTarget(e.currentTarget.name);\n                          }}\n                          disabled={photo.isMain}\n                          loading={loading && target === photo.id}\n                        />\n                        <Button\n                          name={photo.id}\n                          disabled={photo.isMain}\n                          onClick={(e) => {\n                            deletePhoto(photo);\n                            setDeleteTarget(e.currentTarget.name)\n                          }}\n                          loading={loading && deleteTarget === photo.id}\n                          basic\n                          negative\n                          icon='trash'\n                        />\n                      </Button.Group>\n                    )}\n                  </Card>\n                ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfilePhotos);\n","import React from 'react';\nimport { IProfile } from '../../app/models/profile';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { observer } from 'mobx-react-lite';\nimport { combineValidators, isRequired } from 'revalidate';\nimport { Form, Button } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport TextAreaInput from '../../app/common/form/TextAreaInput';\n\nconst validate = combineValidators({\n  displayName: isRequired('displayName')\n});\n\ninterface IProps {\n  updateProfile: (profile: Partial<IProfile>) => void;\n  profile: IProfile;\n}\n\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\n  return (\n    <FinalForm\n      onSubmit={updateProfile}\n      validate={validate}\n      initialValues={profile!}\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder='Display Name'\n            value={profile!.displayName}\n          />\n          <Field\n            name='bio'\n            component={TextAreaInput}\n            rows={3}\n            placeholder='Bio'\n            value={profile!.bio}\n          />\n          <Button \n            loading={submitting}\n            floated='right'\n            disabled={invalid || pristine}\n            positive\n            content='Update profile'\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default observer(ProfileEditForm);","import React, { useContext, useState } from 'react';\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileEditForm from './ProfileEditForm';\nimport { observer } from 'mobx-react-lite';\n\nconst ProfileDescription = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\n  const [editMode, setEditMode] = useState(false);\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={`About ${profile!.displayName}`}\n          />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={editMode ? 'Cancel' : 'Edit Profile'}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\n          ) : (\n            <span>{profile!.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileDescription);","import React from 'react';\nimport { Card, Image, Icon} from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IProfile } from '../../app/models/profile';\n\ninterface IProps{\n    profile: IProfile\n}\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\n  return (\n    <Card as={Link} to={`/profile/${profile.username}`}>\n      <Image src={profile.image || '/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName || 'display name'}</Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div>\n          <Icon name='user' />\n          {profile.followersCount} Followers\n        </div>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default ProfileCard;\n","import React, { useContext } from 'react';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    followings,\n    loading,\n    activeTab\n  } = rootStore.profileStore;\n\n  return (\n    <Tab.Pane loading={loading}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={\n              activeTab === 3\n                ? `People following ${profile!.displayName}`\n                : `People ${profile!.displayName} is following`\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={5}>\n              {followings.map((profile) => (\n                  <ProfileCard key={profile.username} profile={profile}/>\n              ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default ProfileFollowings;\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst panes = [\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\n];\n\nconst ProfileEvents = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserActivities,\n    profile,\n    loadingActivities,\n    userActivities\n  } = rootStore.profileStore!;\n\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'past';\n        break;\n      case 2:\n        predicate = 'hosting';\n        break;\n      default:\n        predicate = 'future';\n        break;\n    }\n    loadUserActivities(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='calendar' content={'Activities'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4}>\n            {userActivities.map((activity: IUserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.id}`}\n                key={activity.id}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileEvents);\n","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport ProfilePhotos from './ProfilePhotos';\nimport ProfileDescription from './ProfileDescription';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfileActivities from './ProfileActivities';\n\nconst panes = [\n  { menuItem: 'About', render: () => <ProfileDescription /> },\n  { menuItem: 'Photos', render: () => <ProfilePhotos /> },\n  {\n    menuItem: 'Riding Sessions',\n    render: () => <ProfileActivities />,\n  },\n  { menuItem: 'Followers', render: () => <ProfileFollowings /> },\n  { menuItem: 'Followings', render: () => <ProfileFollowings /> },\n];\n\ninterface IProps {\n  setActiveTab: (activeIndex: any) => void;\n}\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\n  return (\n    <Tab\n      menu={{ fluid: true, vertical: true }}\n      menuPosition='right'\n      panes={panes}\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n    />\n  );\n};\n// == so that the switching is disabled ==\n// activeIndex={1}\n\nexport default ProfileContent;\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {\n  Segment,\n  Item,\n  Header,\n  Button,\n  Grid,\n  Statistic,\n  Divider,\n  Reveal,\n} from 'semantic-ui-react';\nimport { IProfile } from '../../app/models/profile';\n\ninterface IProps {\n  profile: IProfile;\n  loading: boolean;\n  isCurrentUser: boolean;\n  follow: (username: string) => void;\n  unfollow: (username: string) => void;\n}\nconst ProfileHeader: React.FC<IProps> = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow,\n}) => {\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column width={12}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size='small'\n                src={profile.image || '/assets/user.png'}\n              />\n              <Item.Content verticalAlign='middle'>\n                <Header as='h1'>{profile.displayName}</Header>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Statistic.Group widths={2}>\n            <Statistic label='Followers' value={profile.followersCount} />\n            <Statistic label='Following' value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          {!isCurrentUser && (\n            <Reveal animated='move'>\n              <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                  fluid\n                  color='teal'\n                  content={profile.following ? 'Following' : 'Not following'}\n                />\n              </Reveal.Content>\n              <Reveal.Content hidden>\n                <Button\n                  loading={loading}\n                  fluid\n                  basic\n                  color={profile.following ? 'red' : 'green'}\n                  content={profile.following ? 'Unfollow' : 'Follow'}\n                  onClick={\n                    profile.following\n                      ? () => unfollow(profile.username)\n                      : () => follow(profile.username)\n                  }\n                />\n              </Reveal.Content>\n            </Reveal>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(ProfileHeader);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\ninterface RouteParams {\n  username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {}\n\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    loadingProfile,\n    loadProfile,\n    follow,\n    unfollow,\n    isCurrentUser,\n    loading,\n    setActiveTab\n  } = rootStore.profileStore;\n\n  useEffect(() => {\n    loadProfile(match.params.username);\n  }, [loadProfile, match]);\n\n  if (loadingProfile) return <LoadingComponent content='Loading profile...' />;\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <ProfileHeader\n          profile={profile!}\n          isCurrentUser={isCurrentUser}\n          follow={follow}\n          unfollow={unfollow}\n          loading={loading}\n        />\n        <ProfileContent setActiveTab={setActiveTab}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProfilePage);\n","import React, { Fragment } from 'react'\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react'\n\nconst GaleryDetailedChat = () => {\n    return (\n        <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group>\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Matt</Comment.Author>\n              <Comment.Metadata>\n                <div>Today at 5:42PM</div>\n              </Comment.Metadata>\n              <Comment.Text>How artistic!</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Joe Henderson</Comment.Author>\n              <Comment.Metadata>\n                <div>5 days ago</div>\n              </Comment.Metadata>\n              <Comment.Text>Dude, this is awesome. Thanks so much</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Form reply>\n            <Form.TextArea />\n            <Button\n              content='Add Reply'\n              labelPosition='left'\n              icon='edit'\n              primary\n            />\n          </Form>\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n    )\n}\n\nexport default GaleryDetailedChat\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react';\nimport { IMotofy } from '../../../app/models/motofy';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst activityImageStyle = {\n  filter: 'brightness(90%)',\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white',\n};\n\ninterface IProps {\n  motofy: IMotofy;\n}\nconst GaleryDetailedHeader: React.FC<IProps> = ({ motofy }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { embraceMotofy, unembraceMotofy, loading } = rootStore.motofyStore;\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: '0' }}>\n        <Image\n          src={motofy!.photoUrl || `/assets/placeholder.png`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment basic style={activityImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='large'\n                  content={motofy.name}\n                  style={{ color: 'white' }}\n                />\n                <p>Published on {motofy.datePublished}</p>\n                <p>\n                  By <strong>Bob</strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached='bottom'>\n        {motofy.isOwner ? (\n          <Button\n            as={Link}\n            to={`/manageGallery/${motofy.id}`}\n            color='orange'\n            floated='right'\n          >\n            Manage\n          </Button>\n        ) : motofy.embraced ? (\n          <Button loading={loading} onClick={unembraceMotofy}>\n            Maybe not...\n          </Button>\n        ) : (\n          <Button loading={loading} onClick={embraceMotofy} color='teal'>\n            Embrace\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GaleryDetailedHeader);\n","import React from 'react';\nimport { Rating, Segment } from 'semantic-ui-react';\n\n// const GaleryDetailedRating = () => (\n// );\n\n// export default GaleryDetailedRating;\n\nconst GaleryDetailedRating = () => {\n  return (\n    <Segment.Group>\n        <Segment>\n\n        <Rating icon='star' defaultRating={1} maxRating={5} />\n        </Segment>\n    </Segment.Group>\n  )\n};\n\nexport default GaleryDetailedRating;\n","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\nimport { IEmbracer } from '../../../app/models/motofy';\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\nconst GaleryDetailedSidebar: React.FC<IProps> = ({ embracers }) => {\n  // const isOwner = false;\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: 'none' }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {embracers.length} {embracers.length === 1 ? 'Person' : 'People '}{' '}\n        embraced\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {embracers.map((embracer) => (\n            <Item key={embracer.username} style={{ position: 'relative' }}>\n              {embracer.isOwner && (\n                <Label\n                  style={{ position: 'absolute' }}\n                  color='orange'\n                  ribbon='right'\n                >\n                  Owner\n                </Label>\n              )}\n\n              <Image size='tiny' src={embracer.image || '/assets/user.png'} />\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h3'>\n                  <Link to={`/profile/${embracer.username}`}>\n                    {embracer.displayName}\n                  </Link>\n                </Item.Header>\n                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(GaleryDetailedSidebar);\n","import React from 'react';\nimport { Segment, Grid, Icon, Image } from 'semantic-ui-react';\nimport { IMotofy } from '../../../app/models/motofy';\n\nconst GalleryDetailedInfo: React.FC<{ motofy: IMotofy }> = ({ motofy }) => {\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            {/* <Icon size='large' color='teal' name='info' /> */}\n            <Image\n              size='mini'\n              src={`/assets/brandImages/${motofy.brand}.png`}\n            />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>\n              <strong>{motofy.brand} - </strong> {motofy.model}\n            </p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{motofy.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>Made {motofy.yearOfProduction}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              In {motofy.city}, {motofy.country}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='motorcycle' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {' '}\n              Engine {motofy.cubicCentimeters}cc, done{' '}\n              {motofy.numberOfKilometers} kilometers\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='euro sign' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {' '}\n              Price paid {motofy.pricePaid} Euro, present value{' '}\n              {motofy.estimatedValue} Euro\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryDetailedInfo;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {  Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport GaleryDetailedChat from './GaleryDetailedChat';\nimport GaleryDetailedHeader from './GaleryDetailedHeader';\nimport GaleryDetailedRating from './GaleryDetailedRating';\nimport GaleryDetailedSidebar from './GaleryDetailedSidebar';\nimport GalleryDetailedInfo from './GalleryDetailedInfo';\n\ninterface DetailParams {\n  id: string;\n}\nconst GaleryDetails: React.FC<RouteComponentProps<DetailParams>> = ({  \n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {motofy, loadMotofy, loadingInitial } = rootStore.motofyStore;\n\n  useEffect(() => {\n    loadMotofy(match.params.id);\n  }, [loadMotofy, match.params.id]);\n\n  if (loadingInitial || !motofy)\n    return <LoadingComponent content='Loading motofies...' />;\n\n  return (\n    <Grid>\n      <Grid.Column width={12}>\n        <GaleryDetailedHeader motofy={motofy}/>\n        <GaleryDetailedRating/>\n        <GalleryDetailedInfo motofy={motofy}/>\n\n        <GaleryDetailedChat />\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <GaleryDetailedSidebar embracers={motofy.embracers}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GaleryDetails);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { IForumpost } from '../../../app/models/forumpost';\n\nconst ForumListItem: React.FC<{ forumpost: IForumpost }> = ({ forumpost }) => {\n  return (\n    <Segment.Group>\n      <Segment>\n        <Item>\n          <Item.Image size='tiny' src={`/assets/forumCategoryImages/${forumpost.category}.jpg`} />\n          <Item.Content>\n            <Item.Header as='a'>{forumpost.title}</Item.Header>\n            <Item.Meta>{forumpost.dateAdded}</Item.Meta>\n\n            <Item.Description>Posted by Bob</Item.Description>\n            <Item.Description>\n              <div>{forumpost.body}</div>\n            </Item.Description>\n\n            <Item.Description>\n              <div>Just to compare {forumpost.id}</div>\n            </Item.Description>\n\n            <Item.Extra>\n              <Button\n                as={Link}\n                to={`/forum/${forumpost.id}`}\n                floated='right'\n                content='view'\n                color='blue'\n              />\n              <Label basic content={forumpost.category} /> \n            </Item.Extra>\n          </Item.Content>\n        </Item>\n      </Segment>\n      <Segment>\n          <Icon name='clock' /> {forumpost.dateAdded}\n      </Segment>\n      <Segment secondary>\n        12 Responses from 3 Members\n      </Segment>\n      \n    </Segment.Group>\n  );\n};\n\nexport default ForumListItem;\n","import { observer } from 'mobx-react-lite';\nimport React, { Fragment, useContext } from 'react';\nimport { Item, Label, Segment } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport ForumListItem from './ForumListItem';\n\nconst ForumList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {forumpostsByDate } = rootStore.forumPostStore;\n\n  return (\n    <Fragment>\n      {forumpostsByDate.map(([group, forumposts]) => (\n        <Fragment key={group}>\n          <Label size='large' color='blue'>\n           Posted on {group}\n          </Label>\n          <Segment clearing>\n            <Item.Group divided>\n              {forumposts.map((forumpost) => (\n                <ForumListItem forumpost={forumpost} key={forumpost.id} />\n              ))}\n            </Item.Group>\n          </Segment>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ForumList);\n","import React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ForumList from './ForumList';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n\nimport { observer } from 'mobx-react-lite';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst ForumDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {loadForumPosts,loadingInitial } = rootStore.forumPostStore;\n\n  useEffect(() => {\n    loadForumPosts();\n  }, [loadForumPosts]);\n\n  if (loadingInitial)\n    return <LoadingComponent content='Loading forum posts...' />;\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column width={10}>\n          <ForumList />\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <h2>Forum post filters will come here</h2>\n          {/* {forumpost && !editMode && <ForumDetails />}\n          {editMode && (\n            <ForumForm\n              key={(forumpost && forumpost.id) || 0}\n              forumpost={forumpost!}\n            />\n          )} */}\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default observer(ForumDashboard);\n","export interface IForumpost {\n  id: string;\n  title: string;\n  body: string;\n  // dateAdded: Date;\n  dateAdded: string;\n  // displayName: string;\n  category: string;\n}\n\nexport class ForumpostFormValues {\n  id?: string;\n  title: string = '';\n  body: string = '';\n  // dateAdded: Date = '';\n  dateAdded: string = '';\n  // displayName: string = '';\n  category: string = '';\n\n  constructor(init?: ForumpostFormValues ) {\n    if (init)\n    Object.assign(this, init);\n}\n}\n","export const category = [\n    { key: 'Offer information', text: 'Offer information', value: 'Offer information' },\n    { key: 'Ask for assistance', text: 'Ask for assistance', value: 'Ask for assistance' },\n    { key: 'Ask for advice', text: 'Ask for advice', value: 'Ask for advice' },\n  ];","import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Form, Grid, Segment } from 'semantic-ui-react';\nimport { ForumpostFormValues } from '../../../app/models/forumpost';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { category } from '../../../app/common/options/forumCategoryOptions';\n\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from 'revalidate';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  title: isRequired({ message: 'The event title is required' }),\n  category: isRequired('Category'),\n  body: composeValidators(\n    isRequired('Body'),\n    hasLengthGreaterThan(4)({\n      message: 'Body needs to be at least 5 characters',\n    })\n  )()\n});\n\ninterface DetailParams {\n  id: string;\n}\nconst ForumForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  // const {forumpostsByDate } = rootStore.forumPostStore;\n\n  const {\n    createForumpost,\n    editForumpost,\n    submitting,\n    loadForumPost,\n  } = rootStore.forumPostStore;\n\n  const [forumpost, setForumpost] = useState(new ForumpostFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadForumPost(match.params.id)\n        .then((forumpost) => setForumpost(new ForumpostFormValues(forumpost)))\n        .finally(() => setLoading(false));\n    }\n  }, [loadForumPost, match.params.id]);\n\n\n  // const handleInputChange = (\n  //   event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\n  // ) => {\n  //   const { name, value } = event.currentTarget;\n  //   setForumpost({ ...forumpost, [name]: value });\n  // };\n\n  const handleFinalFormSubmit = (values: any) => {\n    const {...forumpost} = values;\n  if (!forumpost.id) {\n      let newForumpost = {\n        ...forumpost,\n        id: uuid(),\n        dateAdded: new Date().toISOString(),\n      };\n      createForumpost(newForumpost)\n    } else {\n      editForumpost(forumpost);\n    }\n  };\n\n  // if (loadingInitial) return <LoadingComponent content=\"Loading forum post details...\"/>\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n          validate={validate}\n            initialValues={forumpost}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='title'\n                  placeholder='title'\n                  value={forumpost.title}\n                  component={TextInput}\n                />\n                <Field\n                  // onChange={handleInputChange}\n                  name='body'\n                  rows={4}\n                  placeholder='body'\n                  value={forumpost.body}\n                  component={TextAreaInput}\n                />\n                <Field\n                  name='category'\n                  placeholder='category'\n                  options={category}\n                  value={forumpost.category}\n                  component={SelectInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content='submit'\n                />\n                <Button\n                  floated='right'\n                  disabled={loading}\n                  type='button'\n                  content='cancel'\n                  onClick={\n                    forumpost.id\n                      ? () => history.push(`/forum/${forumpost.id}`)\n                      : () => history.push('/forum')\n                  }\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumForm);\n","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\nimport { IForumpost } from '../../../app/models/forumpost';\n\nconst ForumDetailedChat: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>Comments</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group>\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Matt</Comment.Author>\n              <Comment.Metadata>\n                <div>Today at 5:42PM</div>\n              </Comment.Metadata>\n              <Comment.Text>How artistic!</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Joe Henderson</Comment.Author>\n              <Comment.Metadata>\n                <div>5 days ago</div>\n              </Comment.Metadata>\n              <Comment.Text>Dude, this is awesome. Thanks so much</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Form reply>\n            <Form.TextArea />\n            <Button\n              content='Add Reply'\n              labelPosition='left'\n              icon='edit'\n              color='teal'\n            //   primary\n            />\n          </Form>\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumDetailedChat);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react';\nimport { IForumpost } from '../../../app/models/forumpost';\n\nconst activityImageStyle = {\n  filter: 'brightness(90%)',\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  bottom: '5%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white',\n};\n\nconst ForumDetailedHeader: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: '0' }}>\n        <Image\n          src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment basic style={activityImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='huge'\n                  content={forumpost.title}\n                  style={{ color: 'white' }}\n                />\n                <p>{forumpost.category}</p>\n                <p>{forumpost.dateAdded}</p>\n                <p>\n                  Posted by <strong>Bob</strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached='bottom'>\n        {/* <Button color='teal'>Join Activity</Button>\n          <Button>Cancel attendance</Button> */}\n        <Button as={Link} to={`/manageForum/${forumpost.id}`} color='orange' floated='left'>\n          Manage Your Post\n        </Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedHeader);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { IForumpost } from '../../../app/models/forumpost';\n\nconst ForumDetailedInfo: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>Title: {forumpost.title}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>Posted on: {forumpost.dateAdded}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>Category: {forumpost.category}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={16}>\n            <span>{forumpost.body}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedInfo);\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, List, Item, Image } from 'semantic-ui-react';\n\nconst ForumDetailedSidebar = () => {\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: 'none' }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        3 people participating\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          <Item style={{ position: 'relative' }}>\n            {/* <Label\n              style={{ position: 'absolute' }}\n              color='orange'\n              ribbon='right'\n            >\n              Host\n            </Label> */}\n            <Image size='tiny' src={'/assets/user.png'} />\n            <Item.Content verticalAlign='middle'>\n              <Item.Header as='h3'>\n                <Link to={`#`}>Bob</Link>\n              </Item.Header>\n              <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n            </Item.Content>\n          </Item>\n\n          <Item style={{ position: 'relative' }}>\n            <Image size='tiny' src={'/assets/user.png'} />\n            <Item.Content verticalAlign='middle'>\n              <Item.Header as='h3'>\n                <Link to={`#`}>Tom</Link>\n              </Item.Header>\n              <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n            </Item.Content>\n          </Item>\n\n          <Item style={{ position: 'relative' }}>\n            <Image size='tiny' src={'/assets/user.png'} />\n            <Item.Content verticalAlign='middle'>\n              <Item.Header as='h3'>\n                <Link to={`#`}>Sally</Link>\n              </Item.Header>\n            </Item.Content>\n          </Item>\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default ForumDetailedSidebar;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport {  RouteComponentProps } from 'react-router-dom';\nimport {  Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport ForumDetailedChat from './ForumDetailedChat';\nimport ForumDetailedHeader from './ForumDetailedHeader';\nimport ForumDetailedInfo from './ForumDetailedInfo';\nimport ForumDetailedSidebar from './ForumDetailedSidebar';\n\ninterface DetailParams {\n  id: string\n}\nconst ForumDetails: React.FC<RouteComponentProps<DetailParams>> = ({match}) => {\n  \n  const rootStore = useContext(RootStoreContext);\n  const {\n    forumpost,\n    loadForumPost,\n    loadingInitial\n  } = rootStore.forumPostStore;\n\n  useEffect(()=> {\n    loadForumPost(match.params.id)\n  }, [loadForumPost, match.params.id])\n  if (loadingInitial || !forumpost) return <LoadingComponent content=\"Loading forum post details...\"/> \n\n  return (\n\n    <Grid>\n      <Grid.Column width={12}>\n        <ForumDetailedInfo forumpost={forumpost}/>\n        <ForumDetailedChat forumpost={forumpost}/>\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <ForumDetailedHeader forumpost={forumpost}/>\n      <ForumDetailedSidebar/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumDetails);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react'\nimport { IMechanic } from '../../../app/models/mechanic';\n\nconst activityImageStyle = {\n    filter: 'brightness(90%) contrast(50%) drop-shadow(4px 4px 8px teal)'\n    // filter: 'contrast(50%)'\n  };\n  \n  const activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n  };\n\nconst MechanicDetailedHeader: React.FC<{mechanic: IMechanic}> = ({mechanic}) => {\n    return (\n        <Segment.Group>\n        <Segment basic attached='top' style={{ padding: '0' }}>\n          <Image src={mechanic.photoUrl || `/assets/placeholder.png`} fluid style={activityImageStyle}/>\n          <Segment basic style={activityImageTextStyle}>\n            <Item.Group>\n              <Item>\n                <Item.Content>\n                  <Header\n                    size='huge'\n                    content={mechanic.name}\n                    style={{ color: 'white' }}\n                  />\n                  <p>Working since {mechanic.yearOfStart}</p>\n                  <p>\n                    Posted by <strong>Bob</strong>\n                  </p>\n                </Item.Content>\n              </Item>\n            </Item.Group>\n          </Segment>\n        </Segment>\n        <Segment clearing attached='bottom'>\n          {/* <Button color='teal'>Join Activity</Button>\n          <Button>Cancel attendance</Button> */}\n          <Button as={Link} to={`/manageMechanic/${mechanic.id}`} color='orange' floated='right'>\n            Manage Post\n          </Button>\n        </Segment>\n      </Segment.Group>\n    )\n}\n\nexport default observer(MechanicDetailedHeader)\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { IMechanic } from '../../../app/models/mechanic'\n\nconst MechanicDetailedInfo: React.FC<{mechanic: IMechanic}> = ({mechanic}) => {\n    return (\n        <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{mechanic.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>\n              Since {mechanic.yearOfStart}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='address card' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{mechanic.city}, {mechanic.country}, {mechanic.address}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n        <Grid.Column width={1}>\n            <Icon name='tty' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>Phone number: {mechanic.phone}</span>          \n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n        <Grid.Column width={1}>\n            <Icon name='envelope open' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>Email address: {mechanic.email}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n        <Grid.Column width={1}>\n            <Icon name='internet explorer' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>Website: {mechanic.website}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar check outline' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>Published on {mechanic.datePublished}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n\n    )\n}\n\nexport default observer(MechanicDetailedInfo)\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, List, Item, Image } from 'semantic-ui-react';\n\nconst MechanicDetailedSidebar = () => {\n  return (\n    <div>\n      <Fragment>\n        <Segment\n          textAlign='center'\n          style={{ border: 'none' }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          3 People are customers of this shop\n        </Segment>\n        <Segment attached>\n          <List relaxed divided>\n            <Item style={{ position: 'relative' }}>\n              {/* <Label\n                style={{ position: 'absolute' }}\n                color='orange'\n                ribbon='right'\n              >\n                Host\n              </Label> */}\n              <Image size='tiny' src={'/assets/user.png'} />\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h3'>\n                  <Link to={`#`}>Bob</Link>\n                </Item.Header>\n                <Item.Extra style={{ color: 'orange' }}>Customer</Item.Extra>\n              </Item.Content>\n            </Item>\n\n            <Item style={{ position: 'relative' }}>\n              <Image size='tiny' src={'/assets/user.png'} />\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h3'>\n                  <Link to={`#`}>Tom</Link>\n                </Item.Header>\n                <Item.Extra style={{ color: 'orange' }}>Customer</Item.Extra>\n              </Item.Content>\n            </Item>\n\n            <Item style={{ position: 'relative' }}>\n              <Image size='tiny' src={'/assets/user.png'} />\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h3'>\n                  <Link to={`#`}>Sally</Link>\n                </Item.Header>\n                <Item.Extra style={{ color: 'orange' }}>Customer</Item.Extra>\n              </Item.Content>\n            </Item>\n          </List>\n        </Segment>\n      </Fragment>\n\n      <h1>Testimonials</h1>\n    </div>\n  );\n};\n\nexport default (MechanicDetailedSidebar);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport MechanicDetailedHeader from './MechanicDetailedHeader';\nimport MechanicDetailedInfo from './MechanicDetailedInfo';\nimport MechanicDetailedSidebar from './MechanicDetailedSidebar';\n\ninterface DetailParams {\n  id: string\n}\nconst MechanicDetails: React.FC<RouteComponentProps<DetailParams>> = ({match}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const {\n    mechanic,\n    loadMechanic,\n    loadingInitial\n  } = rootStore.mechanicStore;\n\n  useEffect(() => {\n    loadMechanic(match.params.id)\n  }, [loadMechanic, match.params.id])\n\n  if (loadingInitial || !mechanic) return <LoadingComponent content='Loading mechanic shop...'/>\n\n  return (\n    <Grid>\n      <Grid.Column width={8}>\n        <MechanicDetailedHeader mechanic={mechanic}/>\n        <MechanicDetailedInfo mechanic={mechanic}/>\n      </Grid.Column>\n      <Grid.Column width={8}>\n        <MechanicDetailedSidebar/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDetails);\n","export interface IMechanic {\n    id: string;\n    // author: string | null;\n    photoUrl: string | null;\n    name: string;\n    description: string;\n    yearOfStart: string;//Date;\n    datePublished: string;// Date | undefined;\n    country: string;\n    city: string;\n    address: string;\n    email: string;\n    phone: string;\n    website: string;\n}\n\nexport class MechanicFromValues {\n    id?: string;\n    photoUrl: string = '';\n    name: string = '';\n    description: string = '';\n    yearOfStart: string = '';\n    datePublished: string = '';\n    country: string = '';\n    city: string = '';\n    address: string = '';\n    email: string= '';\n    phone: string= '';\n    website: string= '';\n\n\n    constructor(init?: MechanicFromValues ) {\n        if (init)\n        Object.assign(this, init);\n    }\n}","export const year = [\n    { key: '2000', text: '2000', value: '2000' },\n    { key: '2001', text: '2001', value: '2001' },\n    { key: '2002', text: '2002', value: '2002' },\n    { key: '2003', text: '2003', value: '2003' },\n    { key: '2004', text: '2004', value: '2004' },\n    { key: '2005', text: '2005', value: '2005' },\n    { key: '2006', text: '2006', value: '2006' },\n    { key: '2007', text: '2007', value: '2007' },\n    { key: '2008', text: '2008', value: '2008' },\n    { key: '2009', text: '2009', value: '2009' },\n    { key: '2010', text: '2010', value: '2010' },\n    { key: '2011', text: '2011', value: '2011' },\n    { key: '2012', text: '2012', value: '2012' },\n    { key: '2013', text: '2013', value: '2013' },\n    { key: '2014', text: '2014', value: '2014' },\n    { key: '2015', text: '2015', value: '2015' },\n    { key: '2016', text: '2016', value: '2016' },\n    { key: '2017', text: '2017', value: '2017' },\n    { key: '2018', text: '2018', value: '2017' },\n    { key: '2019', text: '2019', value: '2017' },\n    { key: '2020', text: '2020', value: '2017' },\n  ];","import { observer } from 'mobx-react-lite';\nimport React, {  useContext, useEffect, useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Button, Form, Grid, Segment } from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\n\nimport { MechanicFromValues } from '../../../app/models/mechanic';\n\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\n\nimport { year } from '../../../app/common/options/yearOptions';\n\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n  createValidator\n} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst isValidEmail = createValidator(\n  message => value => {\n    if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      return message\n    }\n  },\n  'Invalid email address'\n)\nconst validate = combineValidators({\n  name: isRequired({ message: 'The name is required' }),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters',\n    })\n  )(),\n  photoUrl: isRequired('Photo'),\n  country: isRequired('Country'),\n  city: isRequired('City'),\n  address: isRequired('address'),\n  phone: composeValidators(\n    isNumeric('Phone'),\n    isRequired('Phone'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters',\n    })\n  )(),\n  email: composeValidators(\n    isRequired('Email'),\n    isValidEmail\n  )(),\n  website: isRequired('Website'),\n  yearOfStart: isRequired('Year Of Start'),\n});\ninterface DetailParams {\n  id: string;\n}\nconst MechanicForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  history,\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const {\n    createMechanic,\n    editMechanic,\n    submitting,\n    editMode,\n    // mechanic: initalFormState,\n    loadMechanic,\n  } = rootStore.mechanicStore;\n\n  const [mechanic, setMechanic] = useState(new MechanicFromValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadMechanic(match.params.id)\n        .then((mechanic) => {\n          setMechanic(new MechanicFromValues(mechanic));\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [loadMechanic, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const { ...mechanic } = values;\n    if (!mechanic.id) {\n      let newMechanic = {\n        ...mechanic,\n        id: uuid(),\n        datePublished: new Date().toISOString(),\n      };\n      createMechanic(newMechanic);\n    } else {\n      editMechanic(mechanic);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={mechanic}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='name'\n                  placeholder='Name'\n                  value={mechanic.name}\n                  component={TextInput}\n                />\n                <Field\n                  name='photoUrl'\n                  placeholder='Photo'\n                  value={mechanic.photoUrl}\n                  component={TextInput}\n                />\n                <Field\n                  name='country'\n                  placeholder='Country'\n                  value={mechanic.country}\n                  component={TextInput}\n                />\n                <Field\n                  name='city'\n                  placeholder='City'\n                  value={mechanic.city}\n                  component={TextInput}\n                />\n                <Field\n                  name='address'\n                  placeholder='Address'\n                  value={mechanic.address}\n                  component={TextInput}\n                />\n                <Field\n                  name='phone'\n                  placeholder='Phone'\n                  value={mechanic.phone}\n                  component={TextInput}\n                />\n                <Field\n                  name='email'\n                  placeholder='Email'\n                  value={mechanic.email}\n                  component={TextInput}\n                />\n                <Field\n                  name='website'\n                  placeholder='Website'\n                  value={mechanic.website}\n                  component={TextInput}\n                />\n                {!editMode && (\n                  <Field\n                    name='yearOfStart'\n                    // type='datetime-local'\n                    placeholder='Year of Start'\n                    value={mechanic.yearOfStart}\n                    options={year}\n                    component={SelectInput}\n                  />\n                )}\n                <Field\n                  name='description'\n                  raws={3}\n                  placeholder='Description'\n                  value={mechanic.description}\n                  component={TextAreaInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  positive\n                  floated='right'\n                  type='submit'\n                  content='submit'\n                />\n                <Button\n                  onClick={\n                    mechanic.id\n                      ? () => history.push(`/mechanics/${mechanic.id}`)\n                      : () => history.push('/mechanics')\n                  }\n                  disabled={loading }\n                  floated='right'\n                  type='button'\n                  content='cancel'\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicForm);\n","export interface IMotofy {\n    id?: string;\n    name: string;\n    brand: string;\n    model: string;\n    cubicCentimeters: string;\n    photoUrl?: string | null;\n    description?: string;\n    yearOfProduction?: string;// Date;\n    datePublished?: string;\n    city: string;\n    country: string;\n    pricePaid: string;\n    estimatedValue: string;\n    numberOfKilometers: string; \n    embraced: boolean;\n    isOwner: boolean;\n    embracers: IEmbracer[];\n}\n\nexport interface IMotofyFormValues extends Partial<IMotofy> {\n\n}\n\nexport class MotofyFormValues implements IMotofyFormValues {\n    id?: string = '';\n    name: string = '';\n    brand: string= '';\n    model: string= '';\n    cubicCentimeters: string= '';\n    photoUrl: string  = '';\n    description: string= '';\n    yearOfProduction: string= '';\n    // datePublished?: Date = undefined;\n    datePublished?: string= '';\n    city: string= '';\n    country: string= '';\n    pricePaid: string= '';\n    estimatedValue: string= '';\n    numberOfKilometers: string= '';\n\n    constructor(init?: MotofyFormValues ) {\n        if (init)\n        Object.assign(this, init);\n    }\n} \n\nexport interface IEmbracer {\n    username: string;\n    displayName: string;\n    image: string;\n    isOwner: boolean;\n}\n\n","export const brand = [\n    { key: 'ducati', text: 'Ducati', value: 'ducati' },\n    { key: 'honda', text: 'Honda', value: 'honda' },\n    { key: 'BMW', text: 'BMW', value: 'BMW' },\n    { key: 'harley-davidson', text: 'Harley-Davidson', value: 'harley-davidson' },\n    { key: 'suzuki', text: 'Suzuki', value: 'suzuki' },\n    { key: 'yamaha', text: 'Yamaha', value: 'yamaha' }\n  ];","import React, {  useContext, useEffect, useState } from 'react';\nimport { Button, Form, Grid, Segment } from 'semantic-ui-react';\nimport {  MotofyFormValues } from '../../../app/models/motofy';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\n\nimport { brand } from '../../../app/common/options/brandOptions';\nimport { year } from '../../../app/common/options/yearOptions';\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  name: isRequired({ message: 'The event name is required' }),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters',\n    })\n  )(),\n  photoUrl: isRequired('Photo'),\n  city: isRequired('City'),\n  country: isRequired('Country'),\n  model: isRequired('model'),\n  pricePaid: composeValidators(\n    isNumeric('Price paid'),\n    isRequired('Price paid')\n  )(),\n  cubicCentimeters: composeValidators(\n    isNumeric('Power of engine'),\n    isRequired('Power of engine')\n  )(),\n  yearOfProduction: isRequired('Year of production'),\n  numberOfKilometers: composeValidators(\n    isNumeric('Number of kilometers'),\n    isRequired('Number of kilometers')\n  )(),\n  estimatedValue: composeValidators(\n    isNumeric('Estimated valude'),\n    isRequired('Estimated valude')\n  )(),\n});\n\ninterface DetailParams {\n  id: string;\n}\nconst GalleryForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const {\n    createMotofy,\n    editMotofy,\n    submitting,\n    editMode,\n    loadMotofy,\n  } = rootStore.motofyStore;\n\n  const [motofy, setMotofy] = useState(new MotofyFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadMotofy(match.params.id)\n        .then((motofy) => setMotofy(new MotofyFormValues(motofy)))\n        .finally(() => setLoading(false));\n    }\n  }, [loadMotofy, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const { ...motofy } = values;\n\n    if (!motofy.id) {\n      let newMotofy = {\n        ...motofy,\n        id: uuid(),\n        datePublished: new Date().toISOString(),\n      };\n      // console.log(newMotofy);\n      createMotofy(newMotofy);\n    } else {\n      editMotofy(motofy);\n    }\n  };\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={motofy}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  // onChange={handleInputChange}\n                  name='name'\n                  placeholder='Name'\n                  value={motofy.name}\n                  component={TextInput}\n                />\n                <Field\n                  name='description'\n                  raws={3}\n                  placeholder='Description'\n                  value={motofy.description}\n                  component={TextAreaInput}\n                />\n                <Field\n                  name='photoUrl'\n                  placeholder='PhotoUrl'\n                  value={motofy.photoUrl}\n                  component={TextInput}\n                />\n                <Field\n                  name='city'\n                  placeholder='City'\n                  value={motofy.city}\n                  component={TextInput}\n                />\n                <Field\n                  name='country'\n                  placeholder='Country'\n                  value={motofy.country}\n                  component={TextInput}\n                />\n                <Field\n                  name='brand'\n                  placeholder='Brand'\n                  options={brand}\n                  value={motofy.brand}\n                  component={SelectInput}\n                />\n                {!editMode && (\n                  <Segment>\n                    <Field\n                      name='model'\n                      placeholder='Model'\n                      value={motofy.model}\n                      component={TextInput}\n                    />\n                    <Field\n                      name='cubicCentimeters'\n                      placeholder='Cubics'\n                      value={motofy.cubicCentimeters}\n                      component={TextInput}\n                    />\n                    <Field\n                      name='yearOfProduction'\n                      placeholder='Year of production'\n                      options={year}\n                      value={motofy.yearOfProduction}\n                      component={SelectInput}\n                    />\n                    <Field\n                      name='numberOfKilometers'\n                      placeholder='Number of kilometers'\n                      value={motofy.numberOfKilometers}\n                      component={TextInput}\n                    />\n                    <Field\n                      name='pricePaid'\n                      placeholder='Price paid'\n                      value={motofy.pricePaid}\n                      component={TextInput}\n                    />\n                    <Field\n                      name='estimatedValue'\n                      placeholder='Estimated value'\n                      value={motofy.estimatedValue}\n                      component={TextInput}\n                    />\n                  </Segment>\n                )}\n\n                <Button\n                  loading={submitting}\n                  disabled={loading|| invalid || pristine}\n                  positive\n                  floated='right'\n                  type='submit'\n                  content='submit'\n                />\n                <Button\n                  onClick={\n                    motofy.id\n                      ? () => history.push(`/gallery/${motofy.id}`)\n                      : () => history.push('/gallery')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content='cancel'\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GalleryForm);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react'\nimport { RouteComponentProps, RouteProps, Route, Redirect } from 'react-router'\nimport { RootStoreContext } from '../stores/rootStore'\n\ninterface IProps extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>>\n\n}\n\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {isLoggedIn} = rootStore.userStore;\n\n    return (\n\n        <Route \n        {...rest}\n        render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to={'/'}/>}\n        />\n    )\n}\n\nexport default observer(PrivateRoute);","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react'; \nimport NavBar from '../../features/nav/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport GalleryDashboard from '../../features/gallery/dashboard/GalleryDashboard';\nimport MechanicDashboard from '../../features/mechanics/dashboard/MechanicDashboard';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport MerchantDashboard from '../../features/shop/dashboard/MerchantDashboard';\nimport MerchantDetails from '../../features/shop/details/MerchantDetails';\nimport NotFound from './NotFound';\nimport { ToastContainer } from 'react-toastify';\nimport LoginForm from '../../features/user/LoginForm';\nimport { RootStoreContext } from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport GaleryDetails from '../../features/gallery/details/GaleryDetails';\nimport ForumDashboard from '../../features/forum/dashboard/ForumDashboard';\nimport ForumForm from '../../features/forum/form/ForumForm';\nimport ForumDetails from '../../features/forum/details/ForumDetails';\nimport MechanicDetails from '../../features/mechanics/details/MechanicDetails';\nimport MechanicForm from '../../features/mechanics/form/MechanicForm';\nimport GalleryForm from '../../features/gallery/form/GalleryForm';\nimport PrivateRoute from './PrivateRoute';\n\n//t\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n\n  useEffect(() => {\n    if (token) {\n      getUser().finally(() => setAppLoaded());\n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token]);\n\n  if (!appLoaded) return <LoadingComponent content={'Loading app...'} />;\n  return (\n    <Fragment>\n      <ModalContainer />\n      <ToastContainer position='top-right' />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={['/createActivity', '/manage/:id']}\n                  component={ActivityForm}\n                />\n                <PrivateRoute exact path='/gallery' component={GalleryDashboard} />\n                <PrivateRoute path='/gallery/:id' component={GaleryDetails} />\n                <PrivateRoute\n                  path={['/galleryForm', '/manageGallery/:id']}\n                  key={location.key}\n                  component={GalleryForm}\n                />\n                <PrivateRoute exact path='/forum' component={ForumDashboard} />\n                <PrivateRoute exact path='/forum/:id' component={ForumDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={['/forumform', '/manageForum/:id']}\n                  component={ForumForm}\n                />\n                <PrivateRoute exact path='/mechanics' component={MechanicDashboard} />\n                <PrivateRoute path='/mechanics/:id' component={MechanicDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={['/mechanicForm', '/manageMechanic/:id']}\n                  component={MechanicForm}\n                />\n                <PrivateRoute path='/merchant' component={MerchantDashboard} />\n                <PrivateRoute path='/merchant/:id' component={MerchantDetails} />\n                <PrivateRoute path='/profile/:username' component={ProfilePage} />\n                <Route path='/login' component={LoginForm} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { withRouter } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\n\n const ScrollToTop = ({children, location: {pathname}}: any) => {\n     useEffect(()=> {\n         window.scrollTo(0, 0);\n     }, [pathname]);\n\n     return children;\n };\n \n export default withRouter(ScrollToTop);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <App />\n    </ScrollToTop>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}