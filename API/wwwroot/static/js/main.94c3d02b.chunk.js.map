{"version":3,"sources":["app/api/agentUtil.ts","app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/forumPostStore.ts","app/stores/motofyStore.ts","app/stores/mechanicStore.ts","app/stores/brandStore.ts","app/stores/productStore.ts","app/stores/commentStore.ts","app/stores/countryStore.ts","app/stores/feedStore.ts","app/stores/peopleStore.ts","app/stores/privateMessageStore.ts","app/stores/presenceStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/modals/SearchDiaries.tsx","features/activities/dashboard/ActivityMobileInfo.tsx","features/activities/dashboard/ActivityMobileFilters.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/ErrorMessage.tsx","app/common/form/TextInput.tsx","features/user/RegisterForm.tsx","features/user/RequestResetPasswordForm.tsx","features/user/LoginForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/gallery/dashboard/GalleryListItemEmbracers.tsx","features/gallery/dashboard/GalleryListItem.tsx","features/gallery/dashboard/GalleryList.tsx","features/gallery/modals/GalleryChamps.tsx","features/gallery/dashboard/GalleryFilters.tsx","features/gallery/modals/SearchGallery.tsx","features/gallery/dashboard/GalleryMobileInfo.tsx","features/gallery/dashboard/GalleryMobileFilters.tsx","features/gallery/dashboard/GalleryListItemPlaceholder.tsx","features/gallery/dashboard/GalleryDashboard.tsx","features/mechanics/dashboard/MechanicListItem.tsx","features/mechanics/dashboard/MechanicList.tsx","features/mechanics/dashboard/MechanicFilters.tsx","features/mechanics/dashboard/MechanicListItemPlaceholder.tsx","features/mechanics/modals/SearchMechanic.tsx","features/mechanics/modals/SearchMechanicByCountry.tsx","features/mechanics/dashboard/MechanicMobileInfo.tsx","features/mechanics/dashboard/MechanicMobileFilters.tsx","features/mechanics/dashboard/MechanicDashboard.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/modals/ConfirmDeactivate.tsx","features/activities/modals/ConfirmDelete.tsx","features/activities/details/ActivityDetailedManager.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/modals/SeeDiaryEntry.tsx","features/activities/details/ActivityDetailedSidebarRight.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/modals/AllAttendeesList.tsx","features/activities/details/ActivityDetailedSidebarLeft.tsx","features/activities/details/ActivityDetails.tsx","features/profiles/forms/ContactForm.tsx","features/shop/modals/ConfirmDelete.tsx","features/shop/details/ProductDetailedInfo.tsx","features/shop/details/ProductDetailsStatistics.tsx","features/shop/details/ProductDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileMotofies.tsx","features/profiles/ProfileForumposts.tsx","features/profiles/ProfileMechanics.tsx","features/profiles/ProfileProducts.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","features/gallery/details/GaleryDetailedChat.tsx","features/gallery/modals/ConfirmDelete.tsx","features/gallery/details/GaleryDetailedHeader.tsx","features/gallery/details/GaleryDetailedRating.tsx","features/gallery/details/GaleryDetailedSidebar.tsx","features/gallery/details/GalleryDetailedInfo.tsx","features/gallery/details/GaleryDetails.tsx","features/forum/dashboard/ForumListItem.tsx","features/forum/dashboard/ForumList.tsx","app/common/options/forumCategoryOptions.ts","features/forum/dashboard/ForumFilters.tsx","features/forum/dashboard/ForumListItemPlaceholder.tsx","features/forum/modals/SearchForum.tsx","features/forum/modals/SearchForumByCategory.tsx","features/forum/dashboard/ForumMobileInfo.tsx","features/forum/dashboard/ForumMobileFilters.tsx","features/forum/dashboard/ForumDashboard.tsx","app/models/forumpost.ts","features/forum/form/ForumForm.tsx","features/forum/details/ForumDetailedChat.tsx","features/forum/details/ForumDetailedHeader.tsx","features/forum/details/ForumDetailedInfo.tsx","features/forum/modals/ConfirmDelete.tsx","features/forum/details/ForumDetailedManager.tsx","features/forum/details/ForumDetailedRating.tsx","features/forum/details/ForumDetailedSidebar.tsx","features/forum/details/ForumDetails.tsx","app/common/options/ratingOptions.ts","app/common/options/yesNoOptions.ts","features/mechanics/modals/ConfirmBecomeCustomer.tsx","features/mechanics/form/CustomerForm.tsx","features/mechanics/details/MechanicDetailedChat.tsx","features/mechanics/details/MechanicDetailedHeader.tsx","features/mechanics/details/MechanicDetailedInfo.tsx","features/mechanics/modals/ConfirmDelete.tsx","features/mechanics/details/MechanicDetailedManager.tsx","features/mechanics/modals/ShowTestimonial.tsx","features/mechanics/details/MechanicDetailedSidebar.tsx","features/mechanics/details/MechanicDetails.tsx","app/models/mechanic.ts","app/common/options/yearOptions.ts","app/common/options/motoOptions.ts","app/common/form/SelectMultiple.tsx","features/mechanics/form/MechanicForm.tsx","app/models/motofy.ts","features/gallery/form/GalleryForm.tsx","app/layout/PrivateRoute.tsx","features/shop/dashboard/ProductListItem.tsx","features/shop/dashboard/ProductList.tsx","app/common/options/productOptions.ts","features/shop/dashboard/ProductFilters.tsx","features/shop/dashboard/ProductListItemPlaceholder.tsx","features/shop/modals/SearchProducts.tsx","features/shop/modals/SearchProductsByCategory.tsx","features/shop/modals/SearchProductsByCountry.tsx","features/shop/dashboard/ProductMobileInfo.tsx","features/shop/dashboard/ProductMobileFilters.tsx","features/shop/dashboard/ProductDashboard.tsx","app/models/product.ts","features/shop/forms/ProductForm.tsx","features/feed/dashboard/FeedListItem.tsx","features/feed/dashboard/FeedList.tsx","features/feed/dashboard/FeedListItemPlaceholder.tsx","features/feed/dashboard/FeedDashboard.tsx","features/people/dashboard/PeopleListItem.tsx","features/people/dashboard/PeopleList.tsx","features/people/dashboard/PeopleListItemPlaceholder.tsx","features/people/dashboard/PeopleDashboard.tsx","app/common/options/moodOptions.ts","app/common/options/weatherOptions.ts","app/common/options/roadOptions.ts","features/activities/form/DiaryEntryForm.tsx","features/private_messages/PrivateMessageThreadList.tsx","features/private_messages/modals/ConfirmDelete.tsx","app/models/privatemessages.ts","features/private_messages/modals/EditMessage.tsx","features/private_messages/PrivateMessageThreadListItem.tsx","features/private_messages/PrivateMessageReply.tsx","features/private_messages/PrivateMessagesListItemPlaceholder.tsx","features/private_messages/PrivateMessagesDashboard.tsx","app/common/util/hooks.ts","features/user/RegisterSuccess.tsx","features/user/VerifyEmail.tsx","features/user/SendRequestResetPasswordSuccess.tsx","features/user/ResetPasswordForm.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","i18.n.js","index.tsx"],"names":["responseBody","response","data","postMotofy","url","motofy","motofyData","FormData","append","id","name","brandName","model","cubicCentimeters","file","description","yearOfProduction","datePublished","city","countryName","pricePaid","estimatedValue","numberOfKilometers","axios","post","headers","then","postProduct","product","productData","title","brand","category","price","phoneNumber","postDiaryEntry","diaryEntry","diaryEntryData","activityId","body","mood","road","weather","String","locationCountry","locationCity","postMechanic","mechanic","isCustomer","customers","isOwner","customerRecommended","mechanicData","brands","owner","yearOfStart","address","email","phone","website","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","Authorization","error","Promise","reject","undefined","message","toast","status","history","push","startsWith","removeItem","info","method","errors","hasOwnProperty","requests","get","put","delete","formData","list","params","details","create","activity","update","deactivate","attend","unattend","current","login","user","register","verifyEmail","resendVerifyEmailConfirm","handleForgottenPassword","resendPasswordRequest","resetPassword","password","embrace","unembrace","rate","rating","username","listPeople","uploadPhoto","photo","setMain","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","listMotofies","listForumposts","listMechanics","listProducts","forumpost","becomecustomer","newCustomer","recommend","mechanicRecomend","mechanicRate","addtestimonial","testimonial","markSold","toogleActivate","visitCounter","limit","page","addFeedItem","createDiaryEntry","deleteDiaryEntry","detailsDiaryEntry","updateDiaryEntry","console","log","checkUnread","markRead","setActivityProps","date","Date","isGoing","attendees","some","a","userName","isHost","setMotofyProps","embraced","embracers","publisherUsername","createAttendee","displayName","image","createEmbracer","ActivityStore","observable","ref","constructor","rootStore","getActivity","this","activityRegistry","reaction","keys","clear","loadActivities","URLSearchParams","forEach","value","key","toISOString","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","activites","sortedActivities","sort","b","getTime","Object","entries","reduce","activities","split","Map","action","set","runInAction","computed","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","state","invoke","catch","on","comment","comments","stop","async","loadingInitial","activitiesEnvelope","agent","axiosParams","userStore","toJS","submitting","attendee","loading","filter","dark","dayNumber","diaryEntries","length","index","findIndex","x","splice","indexOf","setItem","appLoaded","ModalStore","shallow","open","size","modal","content","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","loadingMotofies","motofies","userMotofies","loadingForumposts","forumposts","userForumposts","loadingMechanics","mechanics","userMechanics","loadingProducts","products","userProducts","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","UserStore","setToken","modalStore","closeModal","presenceStore","createHubConnection","stopHubConnection","ForumPostStore","getForumPost","forumPostRegistry","loadForumPosts","forumPostCount","formatForumpostsDate","dateAdded","summComments","commentForumPosts","reduceCommenters","result","map","item","has","createdAt","rated","connectionArgument","commenters","forumpostId","forumpostEnvelope","forumpostCount","numberOfComents","forumpostRatings","editMode","target","MotofyStore","getMotofy","motofyRegistry","loadMotofies","mostEmbraced","highestRatedMotofy","motofyCount","parse","commentMotofies","motofiesEnvelope","newRating","score","newScore","motofyScores","embracer","MechanicStore","getMechanic","mechanicRegistry","loadMechanics","mechanicCount","openCustomerForm","commentMechanics","clearMechanic","mechanicsEnvelope","country","hasRecommended","customerToApi","mechanicId","customerForClient","isRecommended","rateMechanic","addRating","ratings","text","testimonialToUI","uuid","toString","BrandStore","ProductStore","getProduct","productRegistry","loadProducts","productCount","productEnvelope","viewers","isSold","isActive","productFollowed","productViewer","CommentStore","motofyId","CountryStore","countries","FeedStore","feedCount","groupFeedItemsByDate","feedRegistry","feeds","sortedFeeds","dateTriggered","feed","formatDate","replace","feedEnvelope","PeopleStore","peopleRegistry","loadPeople","peopleCount","loadingPeople","peopleEnvelope","people","person","PrivateMessageStore","groupMessagesByThreadId","messageRegistry","messages","sortedMessages","dateSent","threadId","privateMessageThreadId","resetViewAfterEdit","messageToEdit","listOfMessagesInFocus","m","otherUser","otherUsername","skipNegotiation","transport","HttpTransportType","WebSockets","withAutomaticReconnect","setViewUponNewMessage","messageToDelete","setView","messageToSend","recipientUsername","messageContent","messageThreadId","senderPhotoUrl","messagesEnvelope","privateMessages","privateMessageThreadsCount","totalPages","messageThreadsCount","messagesByThreadId","dateRead","userPhotoUrl","PresenceStore","privateMessageStore","unreadItems","Set","usernames","onlineUsers","senderUsername","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","forumPostStore","motofyStore","mechanicStore","brandStore","productStore","commentStore","countryStore","feedStore","peopleStore","CommonStore","observer","useContext","logout","isLoggedIn","unreadIncomingMessages","getUnreadItems","setInitialView","i18n","t","useTranslation","menuRef","useRef","closeStackableMenu","actionMenu","parentNode","actionIcon","classList","remove","useEffect","onclick","e","menu","contains","add","preventDefault","i18next","changeLanguage","handleLanguageChange","Container","Menu","style","textAlign","fixed","stackable","inverted","pointing","Item","as","NavLink","exact","to","src","alt","marginRight","onClick","Link","Dropdown","className","floating","labeled","Label","color","Popup","position","trigger","flag","Image","avatar","spaced","icon","setPredicate","calendarFilter","setCalendarFilter","useState","styles","SegmentGroup","raised","vertical","width","active","Input","placeholder","onKeyDown","handleResultSelect","Divider","horizontal","Icon","onChange","ActivityListItemPlaceholder","Placeholder","fluid","Segment","Group","minHeight","Header","Line","Paragraph","secondary","clearing","Button","disabled","SearchDiaries","Grid","Column","setInfo","openModal","handleSetInfo","next","widths","top","borderColor","borderWidth","ActivityListItemAttendees","List","header","circular","bordered","ActivityListItem","host","h","when","starting_point","destination","panels","format","join","departure","marginBottom","Content","verticalAlign","Meta","Accordion","styled","exclusive","Description","substring","activitiesByDate","group","divided","setPage","loadingNext","setLoadingNext","mobile","tablet","computer","pageStart","loadMore","hasMore","initialLoad","Sticky","Loader","ErrorMessage","Message","statusText","flat","err","i","TextInput","input","type","meta","touched","Form","Field","basic","RegisterForm","isValidEmail","createValidator","test","validate","combineValidators","isRequired","composeValidators","matchesPattern","confirmPassword","matchesField","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","component","RequestResetPasswordForm","autoComplete","LoginForm","setSize","marginTop","HomePage","marginLeft","ActivityFormValues","init","motorcycleBrandId","motorcycleBrandName","motorcycleBrandLogoUrl","time","countryId","assign","DiaryEntryFormValues","entryDate","photoUrl","TextAreaInput","rows","SelectInput","options","Select","search","selection","DateInput","rest","onBlur","match","createActivity","editActivity","loadActivity","loadCountriesToSelect","loadBrandsToSelect","setEditMode","hasLengthGreaterThan","setActivity","setLoading","finally","initialValues","newId","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","floated","positive","GalleryListItemEmbracers","padding","margin","display","alignItems","Row","brandLogoUrl","centered","motofiesByDate","GalleryChamps","attached","handleOpenChamps","cursor","SearchGallery","GalleryListItemPlaceholder","mechanicImageStyle","testPositionStyles","MechanicListItem","rounded","Extra","averageRating","mechanicsByDate","clearable","MechanicListItemPlaceholder","SearchMechanic","SearchMechanicByCountry","LoadingComponent","Dimmer","addComment","border","Comment","maxWidth","Avatar","Author","Metadata","formatDistance","Text","form","reset","labelPosition","ConfirmDeactivate","deactivateActivity","useHistory","ConfirmDelete","deleteActivity","attendActivity","cancelAttendance","managing","setManaging","handleCancelAttendance","handleAttendActivity","ActivityDetailedInfo","whiteSpace","SeeDiaryEntry","diary","actualDiary","setActualDiary","counter","parseInt","numberDiaries","handleChange","diaryDay","addSuffix","Subheader","GridColumn","Number","handleDeleteEntry","diariesByDate","slice","day","days","relaxed","entry","handleOpenDiaryModal","animated","persons","corner","hasLengthLessThan","sendMessage","productId","deleteProduct","followProduct","unfollowProduct","setProductFollowed","viewer","sellerUsername","minWidth","columns","sellerDisplayName","handleUnfollowProduct","handleMarkSold","sub","numberSeen","inactivityExpirationDate","numberFollowed","loadProduct","NotFound","Inline","primary","Modal","onClose","dropZoneStyles","borderRadius","paddingTop","height","dropZoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","useDropzone","PhotoWidgetCropper","setImage","imagePreview","cropper","initialAspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","overflow","isCurrentUser","setMainPhoto","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","doubling","currentTarget","negative","bio","ProfileCard","extra","ProfileFollowings","loadUserActivities","panes","menuItem","pane","onTabChange","handleTabChange","objectFit","loadUserMotofies","loadUserForumposts","loadUserMechanics","loadUserProducts","pictureUrl","mobilePanes","ProfileActivities","ProfileContent","setActiveTab","menuPosition","fontSize","includes","Statistic","label","followingCount","Reveal","visible","hidden","loadProfile","deleteMotofy","handleDeleteMotofy","motofyImageStyle","buttonVisitorStyle","backgroundColor","motofyImageTextStyle","left","embraceMotofy","unembraceMotofy","handleUnembraceMotofy","handleEmbraceMotofy","rateMotofy","setRated","userRated","setUserRated","flexDirection","justifyContent","onRate","handleRate","defaultRating","maxRating","ItemExtra","GalleryDetailedInfo","GridRow","iconStyle","loadMotofy","ForumListItem","Response","Responses","Member","Members","Rating","Ratings","forumpostsByDate","ForumListItemPlaceholder","SearchForum","SearchForumByCategory","ForumpostFormValues","createForumpost","editForumpost","loadForumPost","setForumpost","newForumpost","activityImageStyle","activityImageTextStyle","bottom","forumpostRating","authorPhotoUrl","toFixed","deleteForumpost","setRating","authorUsername","handleRating","commenter","ratingOptions","yesNo","ConfirmBecomeCustomer","becomeCustomer","addTestimonial","setCloseCustomerForm","CustomerForm","Checkbox","checked","mechanicImageTextStyle","publisher","logoUrl","deleteMechanic","setCustomer","setOpenCustomerForm","handleView","localMechanic","customer","ShowTestimonial","mechanicShop","handleShowTestimonial","ready","setReady","loadMechanic","MechanicFromValues","year","motoOptions","SelectMultiple","multiple","ownerOptions","createMechanic","editMechanic","random","floor","motomoto","isNumeric","setMechanic","uploaded","setUploaded","edited","setEdited","imageToUpload","setImageToUpload","previewImage","setPreviewImage","imageToSet","newMechanic","raws","MotofyFormValues","brandId","createMotofy","editMotofy","setMotofy","goForward","newMotofy","Component","props","descriptionUiShort","productsByDate","categories","ProductFilters","ProductListItemPlaceholder","SearchProducts","SearchProductsByCategory","SearchProductsByCountry","ProductFormValues","sellerId","isAdvertised","dateActivated","dateAdvertised","createProduct","editProduct","setProduct","newProduct","now","FeedListItem","Event","notifierPhotoUrl","Summary","User","notifierUsername","notifierDisplayname","feedByDate","gr","FeedListItemPlaceholder","loadFeed","member","displayPeople","setInput","onInput","handleSearchResults","PeopleListItemPlaceholder","cleanPeople","loadDiaryEntry","editDiaryEntry","setdiaryEntry","path","uiId","newDiaryEntry","markReadInDB","recipientPhotoUrl","senderDisplayName","fontWeight","messageId","deleteSingleMessage","PrivateMessageToEditValues","editMessage","setMessage","setOtherUser","cleanOtherUser","markReadNavbar","userStyles","senderStyles","handleStartConnection","handleStopConnection","only","EditMessage","setRecipient","setMessageThreadId","setUsername","setReply","addReply","showPicker","setShowPicker","textareaRef","setValue","useLayoutEffect","max","scrollHeight","handleSetRecipient","val","alert","autoFocus","handleSendReply","event","resize","pickerStyle","onEmojiClick","emojiObject","prevInput","emoji","PrivateMessagesListItemPlaceholder","loadMessages","useQuery","useLocation","RegisterSuccess","success","VerifyEmail","Status","setStatus","handleConfirmEmailResend","getBody","SendRequestResetPasswordSuccess","ResetPasswordForm","handleResetPassword","withRouter","location","setAppLoaded","getUser","ActivityDashboard","ActivityDetails","ActivityForm","DiaryEntryForm","GalleryDashboard","GaleryDetails","GalleryForm","ForumDashboard","ForumDetails","ForumForm","MechanicDashboard","MechanicDetails","MechanicForm","ProductDashboard","ProductDetails","ProductForm","PrivateMessagesDashboard","FeedDashboard","PeopleDashboard","ProfilePage","Boolean","hostname","children","pathname","scrollTo","Backend","LanguageDetector","initReactI18next","backend","loadPath","fallbackLng","debug","ns","interpolation","escapeValue","formatSeparator","react","useSuspense","dateFnsLocalizer","createBrowserHistory","ReactDOM","fallback","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.94c3d02b.chunk.js","sourcesContent":["import { IDiaryEntry } from './../models/activity';\nimport axios, { AxiosResponse } from \"axios\";\nimport { IMechanic } from \"../models/mechanic\";\nimport { IMotofy } from \"../models/motofy\";\nimport { IProduct } from \"../models/product\";\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nexport const postMotofy = {\n  motofyForm: (url: string, motofy: IMotofy) => {\n    let motofyData = new FormData();\n    motofyData.append('Id', motofy.id!)\n    motofyData.append('Name', motofy.name)\n    motofyData.append('BrandName', motofy.brandName)\n    motofyData.append('Model', motofy.model)\n    motofyData.append('CubicCentimeters', motofy.cubicCentimeters)\n    motofyData.append('File', motofy.file);\n    motofyData.append('Description', motofy.description!)\n    motofyData.append('YearOfProduction', motofy.yearOfProduction!)\n    motofyData.append('DatePublished', motofy.datePublished!)\n    motofyData.append('City', motofy.city)\n    motofyData.append('Country', motofy.countryName)\n    motofyData.append('PricePaid', motofy.pricePaid)\n    motofyData.append('EstimatedValue', motofy.estimatedValue)\n    motofyData.append('NumberOfKilometers', motofy.numberOfKilometers)\n    return axios.post(url, motofyData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\nexport const postProduct = {\n  productForm: (url: string, product: IProduct) => {\n    let productData = new FormData();\n    productData.append('Id', product.id!)\n    productData.append('Title', product.title)\n    productData.append('Description', product.description!)\n    productData.append('brand', product.brand)\n    productData.append('Model', product.model)\n    productData.append('Category', product.category)\n    productData.append('File', product.file);\n    productData.append('Country', product.countryName)\n    productData.append('City', product.city)\n    productData.append('Price', product.price)\n    productData.append('PhoneNumber', product.phoneNumber)\n    return axios.post(url, productData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\nexport const postDiaryEntry = {\n  diaryEntryForm: (url: string, diaryEntry: IDiaryEntry) => {\n    let diaryEntryData = new FormData();\n    diaryEntryData.append('Id', diaryEntry.id!)\n    diaryEntryData.append('ActivityId', diaryEntry.activityId)\n    diaryEntryData.append('Body', diaryEntry.body)\n    diaryEntryData.append('Mood', diaryEntry.mood!)\n    diaryEntryData.append('Road', diaryEntry.road!)\n    diaryEntryData.append('Weather', diaryEntry.weather!)\n    diaryEntryData.append('NumberOfKilometers', String(diaryEntry.numberOfKilometers!))\n    diaryEntryData.append('File', diaryEntry.file) \n    diaryEntryData.append('LocationCountry', diaryEntry.locationCountry)\n    diaryEntryData.append('LocationCity', diaryEntry.locationCity)\n\n    return axios.post(url, diaryEntryData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\n\nexport const postMechanic = {\n  mechanicForm: (url: string, mechanic: IMechanic) => {\n    let isCustomer = String(mechanic.customers[0].isCustomer);\n    let isOwner = String(mechanic.customers[0].isOwner);\n    let customerRecommended = String(mechanic.customers[0].customerRecommended);\n    let mechanicData = new FormData();\n    mechanicData.append('Id', mechanic.id!)\n    mechanicData.append('MechanicBrands', mechanic.brands)\n    mechanicData.append('Name', mechanic.name)\n    mechanicData.append('Owner', mechanic.owner)\n    mechanicData.append('Description', mechanic.description!)\n    mechanicData.append('YearOfStart', mechanic.yearOfStart!)\n    mechanicData.append('Country', mechanic.countryName)\n    mechanicData.append('City', mechanic.city)\n    mechanicData.append('Address', mechanic.address)\n    mechanicData.append('Email', mechanic.email)\n    mechanicData.append('Phone', mechanic.phone)\n    mechanicData.append('Website', mechanic.website)\n    mechanicData.append('Testimonial', mechanic.description!)\n    mechanicData.append('IsCustomer', isCustomer!)\n    mechanicData.append('IsOwner', isOwner!)\n    mechanicData.append('CustomerRecommended', customerRecommended!)\n    // mechanicData.append('Customers', mechanic.customers)\n    mechanicData.append('File', mechanic.file)\n    return axios.post(url, mechanicData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\n//   export default {\n//     specialRequests,\n//     postProduct,\n//     postMechanic\n//   }","import { IProfileEnvelope } from './../models/profile';\nimport { IRateMotofy } from './../models/motofy';\nimport { IMotofy, IMotofyEnvelope } from './../models/motofy'; \nimport axios, { AxiosResponse } from 'axios';\nimport { history } from '../..';\nimport { IActivity, IActivitiesEnvelope, IDiaryEntry } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { IPhoto, IProfile } from '../models/profile';\nimport { IForumpost, IForumpostEnvelope, IRateForumpost } from '../models/forumpost';\nimport { IMechanic, IMechanicCustomerToBecome, IMechanicRate, IMechanicRecommend, IMechanicsEnvelope } from '../models/mechanic';\nimport { IBrand } from '../models/brand';\nimport { IProduct, IProductsEnvelope } from '../models/product';\nimport { ICountry } from '../models/country';\nimport { postDiaryEntry, postMotofy } from './agentUtil';\nimport { postProduct } from './agentUtil';\nimport { postMechanic } from './agentUtil';\nimport { IFeedEnvelope } from '../models/feed';\nimport { IPrivateMessageEnvelope, IPrivateMessageToSend } from '../models/privatemessages';\n// import { resolve } from 'dns';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers!.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - API not responsive');\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push('/notfound');\n  }\n  if (status === 401\n    && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\", error_description=\"The token expired')) {\n    window.localStorage.removeItem('jwt');\n    history.push('/');\n    toast.info('Your session has expired, please login again')\n  }\n  if (\n    status === 400 &&\n    config.method === 'get' &&\n    data.errors.hasOwnProperty('id')\n  ) {\n    history.push('/notfound');\n  }\n  if ((status === 404) || (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id'))) {\n    history.push('/notfound')\n  }\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n  // console.log(error.response);\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\n// const sleep = (ms: number) => (response: AxiosResponse) =>\n//   new Promise<AxiosResponse>((resolve) =>\n//     setTimeout(() => resolve(response), ms)\n//   );\n\nconst requests = {\n  get: (url: string) =>\n    axios.get(url)\n      // .then(sleep(1000))\n      .then(responseBody),\n  post: (url: string, body: {}) =>\n    axios.post(url, body)\n      // .then(sleep(1000))\n      .then(responseBody),\n  put: (url: string, body: {}) =>\n    axios.put(url, body)\n      // .then(sleep(1000))\n      .then(responseBody),\n  delete: (url: string) =>\n    axios.delete(url)\n      // .then(sleep(1000))\n      .then(responseBody),\n\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    // console.log('photo file From agent: ', file)\n\n    return axios.post(url, formData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody)\n  }\n};\n\n\nconst Motofies = {\n  // list: (limit?: number, page?: number): Promise<IMotofyEnvelope> => \n  // requests.get(`motofies?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  //  uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/`, photo),\n\n  list: (params: URLSearchParams): Promise<IMotofyEnvelope> =>\n    axios.get('/motofies', { params: params })\n      // .then(sleep(1000))\n      .then(responseBody),\n  details: (id: string) => requests.get(`/motofies/${id}`),\n  create: (motofy: IMotofy) => postMotofy.motofyForm('/motofies', motofy),\n  update: (motofy: IMotofy) =>\n    requests.put(`/motofies/${motofy.id}`, motofy),\n  delete: (id: string) => requests.delete(`/motofies/${id}`),\n  embrace: (id: any) => requests.post(`/motofies/${id}/embrace`, {}),\n  unembrace: (id: any) => requests.delete(`/motofies/${id}/embrace`),\n  rate: (id: string, rating: IRateMotofy) => requests.put(`/motofies/${id}/rate`, rating)\n};\n\nconst Mechanics = {\n  list: (params: URLSearchParams): Promise<IMechanicsEnvelope> =>\n    axios.get('/mechanics', { params: params }).then(responseBody),//then(sleep(1000)).\n\n  details: (id: string) => requests.get(`/mechanics/${id}`),\n  create: (mechanic: IMechanic) => postMechanic.mechanicForm('/mechanics', mechanic),\n  update: (mechanic: IMechanic) => requests.put(`/mechanics/${mechanic.id}`, mechanic),\n  becomecustomer: (newCustomer: IMechanicCustomerToBecome) => requests.post('/mechanics/addcustomer', newCustomer),\n  recommend: (mechanicRecomend: IMechanicRecommend) => requests.put('/mechanics/recommend', mechanicRecomend),\n  rate: (mechanicRate: IMechanicRate) => requests.put('/mechanics/rate', mechanicRate),\n  addtestimonial: (testimonial: any) => requests.put('/mechanics/addtestimonial', testimonial),\n  delete: (id: string) => requests.delete(`/mechanics/${id}`),\n};\n\nconst Products = {\n  list: (params: URLSearchParams): Promise<IProductsEnvelope> =>\n    // requests.get(`/products?limit=${limit}&offset=${page ? limit * page : 0}`),\n    axios.get('/products', { params: params }).then(responseBody),//then(sleep(1000)).\n\n  details: (id: string) => requests.get(`/products/${id}`),\n  create: (product: IProduct) => postProduct.productForm('/products', product),\n  update: (product: IProduct) => requests.put(`/products/${product.id}`, product),\n  markSold: (id: string) => requests.put(`/products/${id}/markSold`, {}),\n  delete: (id: string) => requests.delete(`/products/${id}`),\n  follow: (id: string) => requests.put(`/products/${id}/follow`, {}),\n  unfollow: (id: string) => requests.delete(`/products/${id}/unfollow`),\n  // updatephoto: (photo: Blob, id: string): Promise<IPhoto> => requests.postForm(`/photos/${id}/updatePhoto`, photo),\n  toogleActivate: (id: string) => requests.put(`/products/${id}/toogleActivate`, {}),\n  visitCounter: (id: string) => requests.put(`/products/${id}/visitCounter`, {})\n}\n\nconst Activities = {\n\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios.get('/activities', { params: params })\n      // .then(sleep(1000))\n      .then(responseBody),\n\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post('/activities', activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete(`/activities/${id}`),\n  deactivate: (id: string) => requests.put(`/activities/${id}/deactivate`, {}),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.delete(`/activities/${id}/attend`),\n\n\n};\n\nconst DiaryEntries = {\n  createDiaryEntry: (diaryEntry: IDiaryEntry) => postDiaryEntry.diaryEntryForm('/diaryentries', diaryEntry),\n  deleteDiaryEntry: (id: string) => requests.delete(`/diaryentries/${id}`),\n  detailsDiaryEntry: (id: string) => requests.get(`/diaryentries/${id}`),\n  // updateDiaryEntry: (diaryEntry: IDiaryEntry) => requests.put(`/diaryentries/${diaryEntry.id}`, diaryEntry),\n  updateDiaryEntry: (diaryEntry: IDiaryEntry) => console.log(diaryEntry),\n\n}\n\nconst Feed = {\n  list: (limit: number, page: number): Promise<IFeedEnvelope> =>\n    requests.get(`/feeds?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  addFeedItem: (id: string, info: string, username?: string) => requests.post(`/feeds/${id}/${info}/${username}/addFeedItem`, {}),\n};\n\nconst PrivateMessages = {\n  list: (limit: number, page: number): Promise<IPrivateMessageEnvelope> =>\n    requests.get(`/privatemessages?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  create: (message: IPrivateMessageToSend) => requests.post('/privatemessages/', message),\n  // delete: (id: string) => requests.delete(`/privatemessages/${id}`),\n  checkUnread: () => requests.get('/privatemessages/checkUnread'),\n  markRead: (id: string) => requests.put(`/privatemessages/${id}/markRead`, {})\n}\n\nconst Forumposts = {\n  // list: (limit?:number, page?:number): Promise<IForumpostEnvelope> => \n  //   requests.get(`/forumposts?limit=${limit}&offset=${page ? page * limit! : 0}`),\n\n  list: (params: URLSearchParams): Promise<IForumpostEnvelope> =>\n    axios.get('/forumposts', { params: params }).then(responseBody),  //then(sleep(1000)).\n  details: (id: string) => requests.get(`/forumposts/${id}`),\n  create: (forumpost: IForumpost) => requests.post('/forumposts', forumpost),\n  update: (forumpost: IForumpost) =>\n    requests.put(`/forumposts/${forumpost.id}`, forumpost),\n  delete: (id: string) => requests.delete(`/forumposts/${id}`),\n  rate: (rate: IRateForumpost) => requests.put(`/forumposts/rate`, rate)\n}\n\n\n\nconst Brands = {\n  list: (): Promise<IBrand[]> => requests.get('brands'),\n  details: (id: string) => requests.get(`/brand/${id}`),\n  // DONT THINK IM GONNA LET USER... \n  // but i might let admin\n  //NOT finished!!!\n  create: (motofy: IBrand) => requests.post('/brands', motofy),\n  // update: (motofy: IMotofy) =>\n  //   requests.put(`/brands/${motofy.id}`, motofy),\n  // delete: (id: string) => requests.delete(`/brands/${id}`),\n};\nconst Countries = {\n  list: (): Promise<ICountry[]> => requests.get('countries'),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get('/user'),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/login`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/register`, user),\n  verifyEmail: (token: string, email: string): Promise<void> =>\n    requests.post(`/user/verifyEmail`, { token, email }),\n  resendVerifyEmailConfirm: (email: string): Promise<void> =>\n    requests.get(`/user/resendEmailVerification?email=${email}`),\n  handleForgottenPassword: (email: string): Promise<void> =>\n    requests.get(`/user/handleForgottenPassword?email=${email}`),\n  resendPasswordRequest: (email: string): Promise<void> =>\n    requests.get(`/user/resendPasswordRequest?email=${email}`),\n  resetPassword: (token: string, email: string, password: string): Promise<void> =>\n    requests.post(`/user/resetPassword`, { token, email, password })\n};\n\n\nconst Profiles = {\n  get: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  listPeople: (params: URLSearchParams): Promise<IProfileEnvelope> =>\n    axios.get('/profiles/people', { params: params }).then(responseBody),//.then(sleep(1000))\n  uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/`, photo),\n  setMain: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n  updateProfile: (profile: Partial<IProfile>) => requests.put(`/profiles`, profile),\n  follow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.delete(`/profiles/${username}/follow`),\n  //==TODO--Refactor\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\n  listMotofies: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/motofies?predicate=${predicate}`),\n  listForumposts: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/forumposts?predicate=${predicate}`),\n  listMechanics: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/mechanics?predicate=${predicate}`),\n  listProducts: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/products?predicate=${predicate}`)\n\n};\n\nexport default {\n  Activities,\n  User,\n  Motofies,\n  Profiles,\n  Forumposts,\n  Mechanics,\n  Brands,\n  Products,\n  Countries,\n  Feed,\n  DiaryEntries,\n  PrivateMessages\n};\n","import { IActivity, IAttendee } from '../../models/activity';\nimport { IEmbracer, IMotofy } from '../../models/motofy';\nimport { IUser } from '../../models/user';\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n  // const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n  // const year = date.getFullYear();\n  // const month = date.getMonth() + 1;\n  // const day = date.getDate();\n  // const dateString = `${year}-${month}-${day}`;\n\n  const dateString = date.toISOString().split('T')[0];\n  const timeString = time.toISOString().split('T')[1];\n\n  return new Date(dateString + 'T' + timeString);\n};\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n\n  activity.date = new Date(activity.date);\n  \n  activity.isGoing = activity.attendees.some(\n    (a) => a.username === user.userName\n  );\n \n  activity.isHost = activity.attendees.some(\n    (a) => \n    a.username === user.userName && a.isHost\n    \n    );\n    return activity;\n};\n\nexport const setMotofyProps = (motofy: IMotofy, user: IUser) => {\n\n  motofy.embraced = motofy.embracers.some(\n    a => a.username === user?.userName\n  )\n    motofy.embracers[0].isOwner = motofy.publisherUsername === user.userName;\n  return motofy;\n}\n\nexport const createAttendee = (user: IUser): IAttendee => {\n\n  return {\n    displayName: user.displayName,\n    isHost: false,\n    username: user.userName,\n    image: user.image!\n  }\n}\n\nexport const createEmbracer = (user: IUser): IEmbracer => {\n\n  return {\n    displayName: user.displayName,\n    isOwner: false,\n    username: user.userName,\n    image: user.image!\n  }\n}\n\n","import { IDiaryEntry } from './../models/activity';\nimport { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IActivity } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createAttendee, setActivityProps } from '../common/util/util';\nimport {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from '@microsoft/signalr';\n\n// import { withTranslation } from 'react-i18next';\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  }\n\n  \n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @observable activityCount = 0;\n  @observable page = 0;\n\n  @observable diaryEntry: IDiaryEntry | null = null;\n\n  @observable predicate = new Map();\n\n  @observable info: string = '';\n\n  @action setPredicate = (predicate: string, value: string | Date) => {\n    // this.setInfo(predicate);\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n  // @action setInfo = (prodicate: string) => {\n  //   switch (prodicate) {\n  //     case 'isCompleted':\n  //       this.info = 'Completed diaries'\n  //       break;\n  //     case 'isGoing':\n  //       this.info = 'Diaries I Follow'\n  //       break;\n  //     case 'isHost':\n  //       this.info = 'My diaries'\n  //       break;\n  //     case 'calendar':\n  //       this.info = 'Search diaries'\n  //       break;\n  //     default:\n  //       this.info = 'Active diaries'\n  //       break;\n  //   }\n  // }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, value.toISOString())\n      } else {\n        params.append(key, value)\n      }\n      // console.log('params', params.keys)\n    })\n    return params;\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  // === only observing reference not going deep into every property of the class ===\n  @observable.ref hubConnection: HubConnection | null = null;\n\n  @action createHubConnection = (activityId: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', activityId);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection'));\n\n    this.hubConnection.on('RecieveComment', (comment) => {\n      runInAction(() => {\n        this.activity!.comments.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.activity!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    values.activityId = this.activity!.id;\n    try {\n      await this.hubConnection!.invoke('SendComment', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activites: IActivity[]) {\n    const sortedActivities = activites.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split('T')[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  //   ==== async await version ====\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n\n      const { activities, activityCount } = activitiesEnvelope;\n\n      runInAction('loading activities', () => {\n        // if(activities.length > 0) {\n        //   this.activityHit = true;\n        // } else {\n        //   this.activityHit = false;\n        // }\n        activities.forEach((activity) => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity);\n\n        });\n        this.activityCount = activityCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load activities error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  //   ==== example promise chaining version ====\n  //   @action loadActivities = () => {\n  //     this.loadingInitial = true;\n  //     agent.Activities.list()\n  //       .then((activities) => {\n  //         activities.forEach((activity) => {\n  //           activity.date = activity.date.split('.')[0];\n  //           this.activities.push(activity);\n  //         });\n  //       })\n  //       .catch(error => console.log(error))\n  //       .finally(() => (this.loadingInitial = false));\n  //   };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n\n    if (activity) {\n      this.activity = activity;\n      return toJS(activity);\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        // console.log(toJS(activity));\n        runInAction('getting activity', () => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n\n        });\n        return activity;\n      } catch (error) {\n        runInAction('error get activity', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n\n  // === helper method to loadActivity ===\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n\n  @action createActivity = async (activity: IActivity) => {\n\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity)\n\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.attendees = attendees;\n      activity.comments = [];\n      activity.isHost = true;\n      runInAction('creating activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction('editing activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('edit activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n  @action deleteActivity = async (id: string) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.delete(id);\n      runInAction('editing activity', () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n      });\n      history.push('/activities');\n    } catch (error) {\n      runInAction('delete activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem deleting data!');\n      console.log(error);\n    }\n  };\n\n\n  @action deactivateActivity = async (id: string) => {\n    try {\n      await agent.Activities.deactivate(id);\n      // await agent.Feed.addFeedItem(this.activity!.id, 'Deactivated Motocycle Diary');\n      runInAction('deactivating activity', () => {\n        this.activityRegistry.delete(id);\n      });\n    } catch (error) {\n      runInAction('delete error activity', () => {\n        console.log(error);\n      });\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          toast.info('You are now part of this diary');\n\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem joining the group at this time');\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            (a) => a.username !== this.rootStore.userStore.user?.userName\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          toast.dark('You are not part of this diary anymore');\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem cancelling attendance at this time');\n    }\n  };\n\n  @action createDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity) => {\n\n    diaryEntry.dayNumber = String(activity.diaryEntries.length + 1);\n    diaryEntry.activityId = activity.id;\n    activity.diaryEntries.push(diaryEntry);\n    console.log('diaryEntry', diaryEntry);\n    this.submitting = true;\n\n    try {\n\n      await agent.DiaryEntries.createDiaryEntry(diaryEntry);\n\n      runInAction('creating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n  @action editDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity) => {\n\n    let index = activity.diaryEntries.findIndex(x => x.id === diaryEntry.id);\n    activity.diaryEntries[index] = diaryEntry;\n    this.submitting = true;\n\n    try {\n      await agent.DiaryEntries.updateDiaryEntry(diaryEntry);\n\n      runInAction('updating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem updating data!');\n      console.log(error);\n    }\n  };\n\n  @action loadDiaryEntry = async (id: string) => {\n\n    this.loadingInitial = true;\n    try {\n      let diaryEntry: IDiaryEntry = await agent.DiaryEntries.detailsDiaryEntry(id);\n\n      runInAction('getting activity', () => {\n\n        this.diaryEntry = diaryEntry;\n        this.loadingInitial = false;\n\n      });\n      return this.diaryEntry;\n    } catch (error) {\n      runInAction('error get diary entry', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n\n  @action deleteDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity): Promise<void> => {\n\n    activity.diaryEntries.splice(activity.diaryEntries.indexOf(diaryEntry));\n\n    this.submitting = true;\n    try {\n      await agent.DiaryEntries.deleteDiaryEntry(diaryEntry.id);\n\n      runInAction('creating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n}\n\n","import { action, observable, reaction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class commonStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.token, // 1. what to react on\n      (token) => {      // 2. what to do when there is a change\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else {\n          window.localStorage.removeItem('jwt');\n        }\n      }\n    );\n  }\n\n  @observable token: string | null = window.localStorage.getItem('jwt');\n  @observable appLoaded = false;\n\n  @action setToken = (token: string | null) => {\n    this.token = token;\n  };\n\n  @action setAppLoaded = () => {\n    this.appLoaded = true;\n  };\n}\n","import { action, observable, runInAction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class ModalStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  //shallow 13-11, 11:00\n  @observable.shallow modal = {\n    open: false,\n    body: null,\n    size: undefined,\n  };\n  // @observable size: string | undefined;\n\n  @action setSize = (size: any) => {\n    runInAction(() => {\n      this.modal.size = size \n    })\n  }\n\n  @action openModal = (content: any) => {//, size: string\n      this.modal.open = true;\n      this.modal.body = content;\n      // this.modal.size = size;\n  }\n\n  @action closeModal = () => {\n      this.modal.open = false;\n      this.modal.body = null;\n  }\n}\n","import { action, computed, observable, reaction, runInAction } from 'mobx';\nimport { toast } from 'react-toastify';\n\nimport agent from '../api/agent';\nimport { IPhoto, IProfile, IUserActivity, IUserForumpost, IUserMechanic, IUserMotofy, IUserProduct } from '../models/profile';\nimport { RootStore } from './rootStore';\n\n\nexport default class ProfileStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.activeTab,\n      activeTab => {\n        if (activeTab === 7 || activeTab === 8) {\n          const predicate = activeTab === 7 ? 'followers' : 'following'\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    )\n  }\n\n  @observable profile: IProfile | null = null;\n  @observable loadingProfile = true;\n  @observable uploadingPhoto = false;\n  @observable loading = false;\n  @observable followings: IProfile[] = [];\n  @observable activeTab: number = 0;\n\n  @observable userActivities: IUserActivity[] = [];\n  @observable loadingActivities = false;\n\n  @observable userMotofies: IUserMotofy[] = [];\n  @observable loadingMotofies = false;\n\n  @observable userForumposts: IUserForumpost[] = [];\n  @observable loadingForumposts = false;\n\n  @observable userMechanics: IUserMechanic[] = [];\n  @observable loadingMechanics = false;\n\n  @observable userProducts: IUserProduct[] = [];\n  @observable loadingProducts = false;\n\n\n  @computed get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      return this.rootStore.userStore.user.userName === this.profile.username;\n    } else {\n      return false;\n    }\n  }\n  \n  @action loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n    if(predicate === undefined){\n      predicate = 'active';\n    }\n\n    try {\n      const activities = await agent.Profiles.listActivities(username, predicate!);\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user activities');\n      runInAction(() => {\n        this.loadingActivities = false;\n      })\n    }\n  }\n  @action loadUserMotofies = async (username: string, predicate?: string) => {\n    this.loadingMotofies = true;\n    if (predicate === undefined) {\n      predicate = 'iEmbraced'\n    }\n    try {\n      const motofies = await agent.Profiles.listMotofies(username, predicate!);\n      runInAction(() => {\n        this.userMotofies = motofies;\n        this.loadingMotofies = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user activities');\n      runInAction(() => {\n        this.loadingMotofies = false;\n      })\n    }\n  }\n\n  @action loadUserForumposts = async (username: string, predicate?: string) => {\n    this.loadingForumposts = true;\n    if (predicate === undefined) {\n      predicate = 'iAsked'\n    }\n    try {\n      const forumposts = await agent.Profiles.listForumposts(username, predicate!);\n      runInAction(() => {\n        this.userForumposts = forumposts;\n        this.loadingForumposts = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user forumposts');\n      runInAction(() => {\n        this.loadingForumposts = false;\n      })\n    }\n  }\n\n  @action loadUserMechanics = async (username: string, predicate?: string) => {\n    this.loadingMechanics = true;\n\n    if (predicate === undefined) {\n      predicate = 'iPublished'\n    }\n    try {\n      const mechanics = await agent.Profiles.listMechanics(username, predicate!);\n      runInAction(() => {\n        this.userMechanics = mechanics;\n        this.loadingMechanics = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user mechanics');\n      runInAction(() => {\n        this.loadingMechanics = false;\n      })\n    }\n  }\n  @action loadUserProducts = async (username: string, predicate?: string) => {\n    this.loadingProducts = true;\n\n    if (predicate === undefined) {\n      predicate = 'iAmSelling'\n    }\n    try {\n      const products = await agent.Profiles.listProducts(username, predicate);\n      runInAction(() => {\n        this.userProducts = products;\n        this.loadingProducts = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user products');\n      runInAction(() => {\n        this.loadingProducts = false;\n      })\n    }\n  }\n\n\n\n  @action setActiveTab = (activeIndex: number) => {\n    this.activeTab = activeIndex;\n  }\n\n  @action loadProfile = async (username: string) => {\n    this.loadingProfile = true;\n    try {\n      const profile = await agent.Profiles.get(username);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingProfile = false;\n      });\n      console.log(error);\n    }\n  };\n  @action uploadPhoto = async (file: Blob) => {\n    this.uploadingPhoto = true;\n    try {\n      const photo = await agent.Profiles.uploadPhoto(file);\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos.push(photo);\n          if (photo.isMain && this.rootStore.userStore.user) {\n            this.rootStore.userStore.user.image = photo.url;\n            this.profile.image = photo.url;\n          }\n        }\n        this.uploadingPhoto = false;\n      });\n    } catch (error) {\n      console.log(error);\n      toast.error('Problem uploading photo');\n      runInAction(() => {\n        this.uploadingPhoto = false;\n      });\n    }\n  };\n\n  @action setMainPhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.setMain(photo.id);\n      runInAction(() => {\n        this.rootStore.userStore.user!.image = photo.url;\n        this.profile!.photos.find((x) => x.isMain)!.isMain = false;\n        this.profile!.photos.find((x) => x.id === photo.id)!.isMain = true;\n        this.profile!.image = photo.url;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem setting photo as main');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action deletePhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n      runInAction(() => {\n        this.profile!.photos = this.profile!.photos.filter(\n          (a) => a.id !== photo.id\n        );\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem deleting the photo');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action updateProfile = async (profile: Partial<IProfile>) => {\n    try {\n      await agent.Profiles.updateProfile(profile);\n      runInAction(() => {\n        if (\n          profile.displayName !== this.rootStore.userStore.user!.displayName\n        ) {\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\n        }\n        this.profile = { ...this.profile!, ...profile };\n      });\n    } catch (error) {\n      toast.error('Problem updating profile');\n    }\n  };\n  @action follow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.follow(username);\n      runInAction(() => {\n        this.profile!.following = true;\n        this.profile!.followersCount++;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem following user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action unfollow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.unfollow(username);\n      runInAction(() => {\n        this.profile!.following = false;\n        this.profile!.followersCount--;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem unfollowing user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action loadFollowings = async (predicate: string) => {\n    this.loading = true;\n    try {\n      const profiles = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n      runInAction(() => {\n        this.followings = profiles;\n        this.loading = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading followings');\n      runInAction(() => {\n        this.loading = false;\n      })\n    }\n  }\n}\n","import { action, computed, observable, runInAction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { RootStore } from './rootStore';\n\n\nexport default class UserStore {\n\n\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() { return !!this.user };\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n            });\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            //==01\n            this.rootStore.presenceStore.createHubConnection();\n            history.push('/activities');\n\n        } catch (error) {\n            throw error\n        }\n    }\n    @action getUser = async () => {\n        try {\n            const user = await agent.User.current();\n            runInAction(() => {\n                this.user = user;\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        //==02\n        this.rootStore.presenceStore.stopHubConnection();\n        history.push('/')\n    }\n\n    @action register = async (values: IUserFormValues) => {\n\n        try {\n            await agent.User.register(values);\n            this.rootStore.modalStore.closeModal();\n            history.push(`/user/registerSuccess?email=${values.email}`);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    @action handleForgottenPassword = async (values: IUserFormValues) => {\n       \n        try {\n            await agent.User.handleForgottenPassword(values.email);\n            this.rootStore.modalStore.closeModal();\n            history.push(`/user/SendRequestResetPasswordSuccess?email=${values.email}`);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    @action resetPassword = async (token: string, email: string, password: string) => {\n\n        try {\n            await agent.User.resetPassword(token, email, password);\n            history.push(`/`);\n        } catch (error) {\n            throw error;\n        }\n    }\n}","import { IRateForumpost } from './../models/forumpost';\nimport { observable, action, computed, runInAction, reaction } from 'mobx';\n// import { SyntheticEvent } from 'react';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IForumpost } from '../models/forumpost';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { IComment } from '../models/comment';\n\n// configure({ enforceActions: 'always' });\nconst LIMIT = 5;\n\nexport default class ForumPostStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    //==21.1==\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.forumPostRegistry.clear();\n        this.forumposts = [];\n        this.loadForumPosts();\n      }\n    )\n  }\n  @observable forumPostRegistry = new Map();\n  @observable forumposts: IForumpost[] = [];\n  @observable forumpost: IForumpost | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n  \n  \n  @observable rated = false;\n  // @observable commented = false;\n\n  @observable info: string = ''\n\n\n\n  @action setRated = async (status: boolean) => {\n    try {\n      runInAction('seting rated', () => {\n        this.rated = status;\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  // @action setCommented = async (status: boolean) => {\n  //   try {\n  //     runInAction('seting commented', () => {\n  //       this.commented = status;\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  //delete?\n  @observable target = '';\n  @observable.ref hubConnection: HubConnection | null = null;\n  @observable forumPostCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`)\n    this.predicate.forEach((value, key) => {\n      params.append(key, value)\n    })\n    return params;\n  }\n\n\n  @computed get totalPages() {\n    return Math.ceil(this.forumPostCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @action createHubConnection = (id: string, connectionArgument: string) => {//, motofy: IMotofy\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.forumpost!.commentForumPosts.push(comment);\n\n        this.forumpost!.commenters = this.reduceCommenters(this.forumpost!);\n\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.forumpost!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    values.id = this.forumpost!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentForumPost', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @action setRating = async (forumpostId: string, rating: string) => {\n   \n    const rate :IRateForumpost = {\n      id: forumpostId,\n      rating: rating,\n    }\n    try {\n      await agent.Forumposts.rate(rate);\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  @computed get forumpostsByDate() {\n    return this.formatForumpostsDate(\n      Array.from(this.forumPostRegistry.values())\n    );\n    // return this.forumPostRegistry;\n  }\n\n  formatForumpostsDate(forumposts: IForumpost[]) {\n    // const sortedForumposts = forumposts.sort(\n    //   (a, b) => Date.parse(a.dateAdded) - Date.parse(b.dateAdded)\n    //   // (a, b) => a.dateAdded.getTime() - b.dateAdded.getTime()\n    // );\n    return Object.entries(\n      // sortedForumposts.reduce((forumposts, forumpost) => {\n        forumposts.reduce((forumposts, forumpost) => {\n          // console.log('forumpost.dateAdded: ', forumpost.dateAdded);\n        const date = forumpost.dateAdded.split('T')[0];\n        // const date = forumpost.dateAdded.toISOString().split('T')[0];\n        // console.log('date: ', date);\n\n        forumposts[date] = forumposts[date]\n          ? [...forumposts[date], forumpost]\n          : [forumpost];\n        return forumposts;\n      }, {} as { [key: string]: IForumpost[] })\n    );\n  }\n\n\n  summComments(forumpost: IForumpost) {\n    return forumpost.commentForumPosts.length;\n  }\n\n  reduceCommenters(forumpost: IForumpost) {\n\n\n    const result: IComment[] = [];\n    const map = new Map();\n    for (const item of forumpost.commentForumPosts) {\n      if (!map.has(item.username)) {\n        map.set(item.username, true)\n        result.push({\n          id: item.id,\n          createdAt: item.createdAt,\n          body: item.body,\n          username: item.username,\n          displayName: item.displayName,\n          image: item.image\n        })\n      }\n    }\n    return result;\n  }\n\n  @action loadForumPosts = async () => {\n    this.loadingInitial = true;\n    try {\n      const forumpostEnvelope = await agent.Forumposts.list(this.axiosParams);\n      const { forumposts, forumpostCount } = forumpostEnvelope;\n      runInAction('loading forumposts', () => {\n        forumposts.forEach((forumpost) => {\n          forumpost.numberOfComents = this.summComments(forumpost);\n          forumpost.commenters = this.reduceCommenters(forumpost);\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n          this.forumposts.push(forumpost)\n        });\n        this.forumPostCount = forumpostCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load forumposts error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadForumPost = async (id: string) => {\n    let forumpost = this.getForumPost(id);\n    if (forumpost) {\n      this.forumpost = forumpost;\n      return forumpost;\n    } else {\n      this.loadingInitial = true;\n      try {\n        forumpost = await agent.Forumposts.details(id);\n        runInAction('getting forumpost', () => {\n          forumpost.numberOfComents = this.summComments(forumpost);\n          forumpost.commenters = this.reduceCommenters(forumpost);\n          this.forumpost = forumpost;\n          //  console.log('forumpost in rating', forumpost);\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n          this.forumposts.push(forumpost);\n          this.loadingInitial = false;\n          this.forumpost = forumpost;\n        });\n      } catch (error) {\n        runInAction('get forumpost error', () => {\n          this.loadingInitial = false;\n          console.log(error);\n        });\n      }\n    }\n  };\n\n  @action clearForumPost = () => {\n    this.forumpost = null;\n  };\n\n  getForumPost = (id: string) => {\n    return this.forumPostRegistry.get(id);\n  };\n\n  @action createForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    forumpost.forumpostRatings = [];\n    try {\n      await agent.Forumposts.create(forumpost);\n      runInAction('creating forumposts', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        this.forumposts.push(forumpost);\n        // this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('create forumpost error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n  @action editForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    try {\n      await agent.Forumposts.update(forumpost);\n      runInAction('editing forumpost', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        this.forumpost = forumpost;\n        this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('edit forumpost error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action deleteForumpost = async (\n    // event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    // this.target = event.currentTarget.name;\n    try {\n      await agent.Forumposts.delete(id);\n      runInAction('deleting forumpost', () => {\n        this.forumPostRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete forumpost error', () => {\n        this.submitting = false;\n        this.target = '';\n      });\n      console.log(error);\n    }\n  };\n}\n","import { IUser } from './../models/user';\nimport { IMotofyScore, IRateMotofy } from './../models/motofy';\nimport { observable, action, runInAction, computed, reaction } from 'mobx';\nimport { IMotofy } from '../models/motofy';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createEmbracer, setMotofyProps } from '../common/util/util';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\n\n// configure({ enforceActions: 'always' });\nconst LIMIT = 2;\n\nexport default class MotofyStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.motofyRegistry.clear();\n        this.loadMotofies();\n      }\n    )\n\n  }\n\n  @observable motofyRegistry = new Map();\n\n  @observable motofy: IMotofy | null = null;\n\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @observable info: string = ''\n\n\n  @observable.ref hubConnection: HubConnection | null = null;\n  \n  @action createHubConnection = (id: string, connectionArgument: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.motofy!.commentMotofies.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.motofy!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    console.log(values);\n    values.id = this.motofy!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentMotofy', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n\n  @observable mostEmbraced: any;\n  @computed get getMostEmbraced () {\n    return this.mostEmbraced;\n  }\n  @observable highestRatedMotofy: any;\n  @computed get getHighestRatedMotofy () {\n    return this.highestRatedMotofy;\n  }\n\n\n  // === PAGING ===\n  @observable motofyCount = 0;\n  @observable page = 0;\n\n  // === FILTERING ===\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string  ) => { \n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n\n  // === PAGING ===\n  @computed get totalPages() {\n    return Math.ceil(this.motofyCount / LIMIT);\n  }\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n\n  @computed get motofiesByDate() {\n    return Array.from(this.motofyRegistry.values()).sort(\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\n    );\n  }\n\n  @action loadMotofies = async () => {\n    this.loadingInitial = true;\n    try {\n      \n      const motofiesEnvelope = await agent.Motofies.list(this.axiosParams);\n\n      const { motofies, motofyCount, mostEmbraced, highestRatedMotofy} = motofiesEnvelope;\n      runInAction('loading motofies', () => {\n        this.mostEmbraced = mostEmbraced;\n        this.highestRatedMotofy = highestRatedMotofy;\n\n        motofies.forEach((motofy) => {\n          motofy.datePublished = motofy.datePublished?.split('T')[0];\n          // === Util Class ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofyRegistry.set(motofy.id, motofy);\n        });\n        this.motofyCount = motofyCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMotofy = async (id: string) => {\n    let motofy = this.getMotofy(id);\n    if (motofy) {\n      this.motofy = motofy;\n      // //test\n      return motofy;\n    } else {\n      this.loadingInitial = true;\n      try {\n        motofy = await agent.Motofies.details(id);\n        runInAction('getting motofy', () => {\n          // === why not using date here??? ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofy = motofy;\n          this.motofyRegistry.set(motofy.id, motofy);\n          this.loadingInitial = false;\n        });\n        return motofy;\n      } catch (error) {\n        runInAction('get motofy error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action rateMotofy = async (rating: string | number | undefined, motofy: IMotofy, user: IUser | null) => {\n    let newRating: IRateMotofy = {\n      id: motofy.id,\n      score: rating\n    }\n    let newScore: IMotofyScore = {\n      username: user?.userName,\n      displayName: user?.displayName,\n      score: rating,\n    };\n    try {\n      await agent.Motofies.rate(motofy.id, newRating)\n      runInAction('rating motofy', () => {\n        // this.motofy = motofy;\n        motofy.motofyScores.push(newScore);\n        this.motofyRegistry.set(motofy.id, motofy);\n        \n      })\n    } catch (error) {\n      runInAction('rating motofy error', () => {\n        console.log(error);\n      });\n    }\n  };\n\n  getMotofy = (id: string) => {\n    return this.motofyRegistry.get(id);\n  };\n\n  @action editMotofy = async (motofy: IMotofy) => {\n    this.submitting = true;\n    try {\n      await agent.Motofies.update(motofy);\n      runInAction('editing motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);\n        this.motofy = motofy;\n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction('edit motofy error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n  @action createMotofy = async (motofy: IMotofy) => {\n    \n    this.submitting = true;\n    try {\n      await agent.Motofies.create(motofy);\n      const embracer = createEmbracer(this.rootStore.userStore.user!);\n      embracer.isOwner = true;\n      let embracers = [];\n      embracers.push(embracer);\n      motofy.embracers = embracers;\n      motofy.isOwner = true;\n      runInAction('create motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);   \n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction(() => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n\n  @action deleteMotofy = async (id: string) => {\n      this.submitting = true;\n      console.log('this.motofyRegistry out of try', this.motofyRegistry)\n\n      try {\n      await agent.Motofies.delete(id);\n      runInAction('deleting Motofy', () => {\n        this.motofyRegistry.delete(id);\n        \n        console.log('this.motofyRegistry', this.motofyRegistry)\n\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete motofy error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action embraceMotofy = async (id: string) => {\n    const embracer = createEmbracer(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n\n      await agent.Motofies.embrace(id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers.push(embracer);\n          this.motofy.embraced = true;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n          this.loading = false;\n        }\n      });\n      \n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n  @action unembraceMotofy = async (id: string) => {\n    this.loading = true;\n    try {\n      await agent.Motofies.unembrace(id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers = this.motofy.embracers.filter(\n            (a) => a.username !== this.rootStore.userStore.user!.userName\n          );\n          this.motofy.embraced = false;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n        }\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n}\n\n","import { IMechanicCustomer, IMechanicCustomerToBecome, IMechanicRate, IMechanicRecommend, IRating } from './../models/mechanic';//IMechanicId, \nimport { action, observable, computed, runInAction, reaction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IMechanic } from '../models/mechanic';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { v4 as uuid } from \"uuid\";\n\n\n\nconst LIMIT = 3;\n\n\nexport default class MechanicStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.mechanicRegistry.clear();\n        this.loadMechanics();\n      }\n    )\n  }\n\n  @observable mechanicRegistry = new Map();\n  @observable mechanic: IMechanic | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable.ref hubConnection: HubConnection | null = null;\n\n\n  @observable mechanicCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @observable info: string = ''\n\n\n  @action setPredicate = (predicate: string, value: string  ) => { \n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n  @observable isCustomer: boolean;\n  // @observable hasNotCancelledCustomer: boolean = true;\n  @observable openCustomerForm: boolean = false;\n  @observable confirmCustomer: boolean = false;\n\n\n\n\n  @computed get totalPages() {\n    return Math.ceil(this.mechanicCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @action setOpenCustomerForm = () => {\n    try {\n\n      runInAction('open form', () => {\n        this.openCustomerForm = !this.openCustomerForm;\n      })\n    } catch (error) {\n\n    }\n  }\n  @action setCloseCustomerForm = () => {\n    try {\n\n      runInAction('open form', () => {\n        this.openCustomerForm = false;\n      })\n    } catch (error) {\n\n    }\n  }\n\n  @action createHubConnection = (id: string, connectionArgument: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.mechanic!.commentMechanics.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.mechanic!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .then(() => this.clearMechanic())\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    console.log(values);\n    values.id = this.mechanic!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentMechanic', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @computed get mechanicsByDate() {\n    return Array.from(this.mechanicRegistry.values())\n  }\n\n  @action setCustomer = async (status: boolean) => {\n    try {\n      runInAction('seting customer', () => {\n        this.isCustomer = status;\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  // @action setCancelCustomer = async (status: boolean) => {\n  //   try {\n  //     runInAction('seting customer', () => {\n  //       this.hasNotCancelledCustomer = false;\n  //       this.isCustomer = false;\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  @action clearMechanic = async () => {\n    this.mechanic = null;\n  }\n\n  \n\n  @action loadMechanics = async () => {\n\n  \n    this.loadingInitial = true;\n    try {\n      const mechanicsEnvelope = await agent.Mechanics.list(this.axiosParams);\n\n      const { mechanics, mechanicCount } = mechanicsEnvelope;\n      \n\n      runInAction('loading mechanics', () => {\n        mechanics.forEach((mechanic) => {\n          mechanic.datePublished = mechanic.datePublished?.split('T')[0];\n          this.mechanicRegistry.set(mechanic.id, mechanic);\n        });\n        this.mechanicCount = mechanicCount;\n\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load mechanics error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMechanic = async (id: string) => {\n    let mechanic = this.getMechanic(id);\n    if (mechanic) {\n      this.mechanic = mechanic;\n      return mechanic;\n    } else {\n      this.loadingInitial = true;\n      try {\n        mechanic = await agent.Mechanics.details(id);\n        runInAction('getting mechanic', () => {\n          this.mechanic = mechanic;\n          this.mechanicRegistry.set(mechanic.id, mechanic);\n\n          this.loadingInitial = false;\n        });\n        return mechanic;\n      } catch (error) {\n        runInAction('get mechanic error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  getMechanic = (id: string) => {\n    return this.mechanicRegistry.get(id);\n  };\n\n  @action createMechanic = async (mechanic: IMechanic) => {\n\n    this.submitting = true;\n    try {\n      await agent.Mechanics.create(mechanic);\n      runInAction('creating mechanics', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action editMechanic = async (mechanic: IMechanic) => {\n    this.submitting = true;\n    if (mechanic.email === null) mechanic.email = 'Not assigned email';\n    if (mechanic.website === null) mechanic.website = 'Not assigned website';\n    mechanic.country = mechanic.countryName;\n    console.log(mechanic);\n\n    try {\n      await agent.Mechanics.update(mechanic);\n      runInAction('creating mechanic', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.mechanic = mechanic;\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteMechanic = async (id: string) => {\n    this.submitting = true;\n    try {\n      await agent.Mechanics.delete(id);\n      runInAction('deleting mechanic', () => {\n        this.mechanicRegistry.delete(id);\n\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete mechanic error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action becomeCustomer = async (id: string, user: any, hasRecommended: string) => {\n    let customerRecommended: boolean;\n    hasRecommended === '0' ? customerRecommended = false : customerRecommended = true;\n\n    let customerToApi: IMechanicCustomerToBecome = {\n\n      mechanicId: id,\n      isCustomer: true\n    }\n    let customerForClient: IMechanicCustomer = {\n      username: user.userName,\n      displayName: user.displayName,\n      image: user.image,\n      isCustomer: true,\n      isOwner: false,\n      customerRecommended: customerRecommended,\n    }\n    try {\n      await agent.Mechanics.becomecustomer(customerToApi);\n      runInAction('become a customer', () => {\n        this.isCustomer = true;\n        this.mechanic?.customers.push(customerForClient);\n\n\n      })\n    } catch (error) {\n      console.log('error', error);\n    }\n    toast.info(\"You became a customer of the shop!\");\n  };\n\n  @action recommend = async (mechanicId: string, username: string | undefined, isRecommended: string) => {\n\n    let mechanicRecomend: IMechanicRecommend = {\n      mechanicId: mechanicId,\n      isRecommended: isRecommended\n    }\n    try {\n      await agent.Mechanics.recommend(mechanicRecomend);\n      runInAction('recommending a mechanic', () => {\n\n        if (isRecommended === '1') {\n          this.mechanic!.customers.find(x => x.username === username)!.customerRecommended = true;\n        }\n        else {\n          this.mechanic!.customers.find(x => x.username === username)!.customerRecommended = false;\n        }\n\n\n      });\n      toast.info(\"You recommended this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  @action rate = async (id: string, score: string, user: any) => {\n    let rateMechanic: IMechanicRate = {\n      id: id,\n      score: score,\n    }\n    let addRating: IRating = {\n      username: user.userName,\n      displayName: user.displayName,\n      score: score\n    }\n    try {\n      await agent.Mechanics.rate(rateMechanic);\n      runInAction('recommending a mechanic', () => {\n        // this.hasRated = true;\n        this.mechanic?.ratings.push(addRating)\n        console.log(this.mechanic!.ratings);\n      });\n      toast.info(\"You rated this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  @action addTestimonial = async (mechanicId: string, text: string, user: any) => {\n    let testimonial = {\n      mechanicId: mechanicId,\n      text: text,\n    }\n    let testimonialToUI = {\n      id: uuid(),\n      text: text,\n      dateAdded: new Date().toString()\n    }\n    try {\n      await agent.Mechanics.addtestimonial(testimonial);\n\n      runInAction('adding a testimonial to a mechanic', () => {\n\n        this.mechanic!.customers.find(x => x.username === user.userName)!.testimonial = testimonialToUI;\n      });\n      toast.info(\"You added a testimonial this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n}\n\n","import { action, observable,  runInAction } from 'mobx';//computed,\n\nimport agent from '../api/agent';\nimport {  IBrand } from '../models/brand'; //BrandFormValues,\nimport { RootStore } from './rootStore';\n\n//==non of which is actually in use before the admin panel!!!!!!!!!==\n\nexport default class BrandStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  // @observable brandRegistry = new Map();\n\n  @observable brands: IBrand[] = [];\n  // @observable brandToSelect: BrandFormValues[] = [];\n  @observable brand: IBrand | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n\n  // @observable target = '';\n\n  @action loadBrandsToSelect = async () => {\n    this.loadingInitial = true;\n    try {\n      const brands = await agent.Brands.list();\n      runInAction('loading brands', () => {\n        this.brands = brands;\n        // console.log('brands', brands);\n      })\n    } catch (error) {\n      runInAction('load brands error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  }\n\n  //==FOLLOWING IS ONLY GOING TO BE NEEDED FOR THE ADMIN PANEL===\n  // @action loadBrands = async () => {\n  //   this.loadingInitial = true;\n  //   try {\n  //     const brands = await agent.Brands.list();\n  //     runInAction('loading brands', () => {\n  //       // brands.forEach((brand) => {\n\n  //       //   //not sure if it has T as a separator // and do I need it??\n  //       //   // brand.dateOfEstablishment = brand.dateOfEstablishment?.split('T')[1];\n  //       //   //test (still need it)\n  //       // //  console.log('brand', brand.name ); \n\n  //       // //  this.brands.push(brand); // === refactor for map\n  //       // //  this.brandRegistry.set(brand.id, brand.name);\n  //       // });\n  //       console.log('brands', brands ); \n  //       //test (still need it)\n  //       // console.log('this.brandRegistry', this.brandRegistry ); \n  //       // this.brandRegistry.forEach()\n  //       // return this.brandRegistry;\n  //       this.loadingInitial = false;\n  //       return this.brands;\n  //     });\n  //   } catch (error) {\n  //     runInAction('load brands error', () => {\n  //       this.loadingInitial = false;\n  //     });\n  //     console.log(error);\n  //   }\n  // };\n\n  //??--is really needed\n  // @action loadBrand = async (id: string) => {\n  //   let brand = this.getBrand(id);\n  //   if (brand) {\n  //     this.brand = brand;\n  //     return brand;\n  //   } else {\n  //     this.loadingInitial = true;\n  //     try {\n  //       brand = await agent.Brands.details(id);\n  //       runInAction('getting brand', () => {\n  //         this.brand = brand;\n  //         this.loadingInitial = false;\n  //       });\n  //       return brand;\n  //     } catch (error) {\n  //       runInAction('get brand error', () => {\n  //         this.loadingInitial = false;\n  //       });\n  //       console.log(error);\n  //     }\n  //   }\n  // };\n\n  // @action clearBrand = () => {\n  //   this.brand = null;\n  // }\n\n  // getBrand = (id: string) => {\n  //   return this.brandRegistry.get(id);\n  // };\n\n  // @action createBrand = async (brand: IBrand) => {\n  //   this.submitting = true;\n  //   try {\n  //     await agent.Brands.create(brand);\n  //     runInAction('creating brands', () => {\n  //       this.brandRegistry.set(brand.id, brand);\n  //       this.editMode = false;\n  //       this.submitting = false;\n  //     });\n  //     history.push(`/brands/${brand.id}`)\n  //   } catch (error) {\n  //     runInAction('create brand error', () => {\n  //       this.submitting = false;\n  //     });\n  //     toast.error('Problem submitting data');\n  //     // console.log(error.response);\n  //   }\n  // };\n\n  // //LATER!!!\n  // @action editbrand = async (brand: IBrand) => {\n  //   this.submitting = true;\n  //   try {\n  //     // console.log('brand', brand);\n  //     await agent.Brands.update(brand);\n  //     runInAction('creating brand', () => {\n  //       this.brandRegistry.set(brand.id, brand);\n  //       this.brand = brand;\n  //       this.editMode = false;\n  //       this.submitting = false;\n  //     });\n  //     history.push(`/brands/${brand.id}`)\n  //   } catch (error) {\n  //     runInAction('create brand error', () => {\n  //       this.submitting = false;\n  //     });\n  //     toast.error('Problem submitting data');\n  //     // console.log(error.response);\n  //   }\n  // };\n\n  //         //LATER!!!\n  // @action deleteBrand = async (\n  //   event: SyntheticEvent<HTMLButtonElement>,\n  //   id: string\n  // ) => {\n  //   this.submitting = true;\n  //   this.target = event.currentTarget.name;\n  //   try {\n  //     await agent.Brands.delete(id);\n  //     runInAction('deleting brand', () => {\n  //       this.brandRegistry.delete(id);\n  //       this.submitting = false;\n  //       this.target = '';\n  //     });\n  //   } catch (error) {\n  //     runInAction('delete brand error', () => {\n  //       this.submitting = false;\n  //       this.target = '';\n  //     });\n  //     console.log(error);\n  //   }\n  // };\n\n  // @action openCreateForm = () => {\n  //   this.editMode = true;\n  //   this.brand = null;\n  // };\n  // @action openEditForm = (id: string) => {\n  //   this.brand = this.brandRegistry.get(id);\n  //   // console.log(this.brand?.yearOfStart);\n  //   this.editMode = true;\n  // };\n  // @action cancelSelectedBrand = () => {\n  //   this.brand = null;\n  // };\n  // @action cancelFormOpen = () => {\n  //   this.editMode = false;\n  //   // TODO: GO BACK WHEREVER YOU WERE\n  // };\n\n  // @action selectBrand = (id: string) => {\n  //   // this.selectedbrand = this.brands.find(m => m.id === id); // === refactor for map\n  //   this.brand = this.brandRegistry.get(id);\n  //   this.editMode = false;\n  // };\n}","import { IProductViewer } from './../models/product';\nimport { IProduct } from '../models/product';\nimport { observable, action, computed, runInAction, reaction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\nconst LIMIT = 12;\n\nexport default class ProductStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.productRegistry.clear();\n        this.loadProducts();\n      }\n    )\n  }\n  //--in use--\n  @observable loadingInitial = false;\n  @observable productRegistry = new Map();\n  @observable products: IProduct[] = [];\n  @observable product: IProduct | null = null;\n\n  @observable productCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n  @observable info: string = ''\n\n  @observable productFollowed = false;\n\n\n  @action setPredicate = (predicate: string, value: string) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @action setInfo = (info: string) => {\n    runInAction(() => {\n      this.info = info;\n    })\n  }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      params.append(key, value)\n    })\n    return params;\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.productCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n  //--probably will be--\n  @observable submitting = false;\n\n  @observable target = '';\n\n  @computed get productsByDate() {\n    return Array.from(this.productRegistry.values())\n\n  }\n\n  @action loadProducts = async () => {\n    this.loadingInitial = true;\n\n    try {\n      const productEnvelope = await agent.Products.list(this.axiosParams);\n      // console.log('loadProducts::', this.axiosParams)\n\n      const { products, productCount } = productEnvelope\n      // console.log('loadProducts::', products)\n      runInAction('loading products', () => {\n        products.forEach((product) => {\n\n          this.productRegistry.set(product.id, product);\n          // console.log('product:::', product);\n        });\n        // console.log('products', products);\n        this.productCount = productCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load products error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n\n\n  //--in use--\n  @action loadProduct = async (id: string) => {\n    let product = this.getProduct(id);\n    if (product) {\n      this.product = product;\n      return product;\n    } else {\n      this.loadingInitial = true;\n      try {\n        product = await agent.Products.details(id);\n        runInAction('getting product', () => {\n          this.product = product;\n          this.productRegistry.set(product.id, product);\n          this.loadingInitial = false;\n          this.product = product;\n          // console.log('product:::', toJS(product));\n        });\n        return product;\n      } catch (error) {\n        runInAction('get product error', () => {\n          this.loadingInitial = false;\n          console.log(error);\n        });\n      }\n    }\n  };\n\n  //--in use--\n  getProduct = (id: string) => {\n    return this.productRegistry.get(id);\n  };\n\n\n  @action createProduct = async (product: IProduct) => {\n    this.submitting = true;\n    try {\n      await agent.Products.create(product);\n      runInAction('creating product', () => {\n        product.viewers = [];\n        this.productRegistry.set(product.id, product);\n        this.submitting = false;\n      });\n      history.push(`/product/${product.id}`)\n    } catch (error) {\n      runInAction('create product error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n    }\n  };\n\n  @action editProduct = async (product: IProduct) => {\n    this.submitting = true;\n    try {\n      await agent.Products.update(product);\n      runInAction('editing product', () => {\n        this.productRegistry.set(product.id, product);\n        this.product = product;\n        this.submitting = false;\n      });\n      history.push(`/product/${product.id}`)\n    } catch (error) {\n      runInAction('create product error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteProduct = async (\n    id: string\n  ) => {\n    this.submitting = true;\n    try {\n      await agent.Products.delete(id);\n      runInAction('deleting product', () => {\n        this.productRegistry.delete(id);\n        // console.log('this.productRegistry', this.productRegistry)\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete product error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action visitCounter = async (id: string) => {\n    try {\n      await agent.Products.visitCounter(id);\n      runInAction('Increasing the number seen counter', () => {\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  @action markSold = async (id: string, product: IProduct) => {\n    try {\n      await agent.Products.markSold(id);\n      runInAction('Marking the product sold', () => {\n        product.isSold = true;\n        toast.info('This product is marked as sold!');\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  @action toogleActivate = async (id: string, product: IProduct) => {\n    try {\n      await agent.Products.toogleActivate(id);\n      runInAction('Marking the product sold', () => {\n        product.isActive = true;//!this.product?.isActive;\n        toast.info('This product is activated!');\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  @action setProductFollowed = async () => {\n    runInAction(() => {\n      this.productFollowed = !this.productFollowed;\n    })\n  }\n  @action followProduct = async (id: string, userName: string, displayName: string) => {\n    // console.log(\"id i\", id);\n\n    let product: IProduct = this.getProduct(id);\n    let productViewer: IProductViewer = {\n      username: userName,\n      displayName: displayName,\n    }\n    product.viewers.push(productViewer)\n    try {\n      await agent.Products.follow(id);\n      runInAction('following product', () => {\n        this.productRegistry.set(product.id, product);\n        this.productFollowed = true;\n      });\n    } catch (error) {\n\n      console.log(error);\n    }\n  };\n  @action unfollowProduct = async (id: string) => {\n    // console.log(\"id unfollow\", id);\n\n    let product: IProduct = this.getProduct(id);\n\n    try {\n      await agent.Products.unfollow(id);\n      runInAction('following product', () => {\n        this.productRegistry.set(product.id, product);\n        this.productFollowed = false;\n      });\n    } catch (error) {\n\n      console.log(error);\n    }\n  };\n\n}\n\n","import { observable, action, runInAction } from 'mobx';//, computed, reaction\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { IMotofy } from '../models/motofy';\nimport { toast } from 'react-toastify';\n\n//THIS IS TO BE SOLVED SO THAT IT IS GENERIC AS MUCH AS POSSIBLE!!!\n\nexport default class CommentStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n      this.rootStore = rootStore;\n    }\n    @observable motofy: IMotofy | null = null;\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @action createHubConnection = (motofyId: string, connectionArgument: string, motofy: IMotofy) => {\n        this.motofy = motofy;\n        this.hubConnection = new HubConnectionBuilder()\n          .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n            accessTokenFactory: () => this.rootStore.commonStore.token!,\n          })\n          .configureLogging(LogLevel.Information)\n          .build();\n    \n        this.hubConnection\n          .start()\n          .then(() => console.log(this.hubConnection!.state))\n          .then(() => {\n            // console.log('Attempting to join group');\n            if (this.hubConnection!.state === 'Connected') {\n              this.hubConnection?.invoke('AddToGroup', motofyId);\n            }\n          })\n          .catch((error) => console.log('Error establishing connection', error));\n    \n        this.hubConnection.on(connectionArgument, (comment) => {\n          runInAction(() => {\n            this.motofy!.commentMotofies.push(comment);\n          });\n        });\n    \n        this.hubConnection.on('Send', (message) => {\n          toast.info(message);\n        });\n      };\n    \n      @action stopHubConnection = () => {\n        this.hubConnection\n          ?.invoke('RemoveFromGroup', this.motofy!.id)\n          .then(() => {\n            this.hubConnection?.stop();\n          })\n          .then(() => console.log('Connection stopped!'))\n          .catch(error => console.log(error));\n      };\n    \n      @action addComment = async (values: any) => {\n        console.log(values);\n        values.motofyId = this.motofy!.id;\n        try {\n          await this.hubConnection!.invoke('SendCommentMotofy', values);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n}","import { action, observable, runInAction } from 'mobx';//computed,\n// import { SyntheticEvent } from 'react';\n// import { history } from '../..';\nimport agent from '../api/agent';\nimport { ICountry } from '../models/country'; //BrandFormValues,\n// import { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\n//==non of which is actually in use before the admin panel!!!!!!!!!==\n\nexport default class CountryStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n    @observable brandRegistry = new Map();\n\n    @observable countries: ICountry[] = [];\n    // @observable brandToSelect: BrandFormValues[] = [];\n    // @observable brand: ICountry | null = null;\n    @observable loadingInitial = false;\n    // @observable editMode = false;\n    // @observable submitting = false;\n\n    // @observable target = '';\n\n\n\n\n    @action loadCountriesToSelect = async () => {\n        this.loadingInitial = true;\n        try {\n            const countries = await agent.Countries.list();\n            runInAction('loading brands', () => {\n                this.countries = countries;\n                // console.log('countries', countries);\n            })\n        } catch (error) {\n            runInAction('load countries error', () => {\n                this.loadingInitial = false;\n\n            });\n            console.log(error);\n        }\n    }\n\n    // @action cleanCountries = async () => {\n    //     runInAction('cleaning countries', () => {\n    //         this.countries = [];\n    //     })\n    // }\n\n\n\n    // @action clearBrand = () => {\n    //     this.brand = null;\n    // }\n\n    // getBrand = (id: string) => {\n    //     return this.brandRegistry.get(id);\n    // };\n\n    // @action createBrand = async (brand: IBrand) => {\n    //     this.submitting = true;\n    //     try {\n    //         await agent.Brands.create(brand);\n    //         runInAction('creating brands', () => {\n    //             this.brandRegistry.set(brand.id, brand);\n    //             this.editMode = false;\n    //             this.submitting = false;\n    //         });\n    //         history.push(`/brands/${brand.id}`)\n    //     } catch (error) {\n    //         runInAction('create brand error', () => {\n    //             this.submitting = false;\n    //         });\n    //         toast.error('Problem submitting data');\n    //         // console.log(error.response);\n    //     }\n    // };\n}","import { action, computed, observable, runInAction } from 'mobx';//computed,\nimport { toast } from 'react-toastify';\n\nimport agent from '../api/agent';\nimport { IFeed } from '../models/feed';\nimport { RootStore } from './rootStore';\n\nconst LIMIT = 3;\n\nexport default class FeedStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  @observable feedRegistry = new Map();\n\n  @observable feeds: IFeed[] = [];\n  @observable feedCount: number = 0;\n  @observable page: number = 0;\n\n  @observable loadingInitial = false;\n\n  @computed get totalPages() {\n    return Math.ceil(this.feedCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @computed get feedByDate() {\n    return this.groupFeedItemsByDate(Array.from(this.feedRegistry.values()));\n  }\n\n  groupFeedItemsByDate(feeds: IFeed[]) {\n    const sortedFeeds = feeds.sort(\n      (a, b) => Date.parse(b.dateTriggered!) - Date.parse(a.dateTriggered!)\n    )\n    return Object.entries(\n      sortedFeeds.reduce((feeds, feed) => {\n        const date = feed.dateTriggered?.split('T')[0];\n        feeds[date!] = feeds[date!]\n          ? [...feeds[date!], feed]\n          : [feed];\n        return feeds;\n\n      }, {} as { [key: string]: IFeed[] }));\n  }\n\n  formatDate(feed: IFeed) {\n    const delimiter = '.';\n    feed.dateTriggered = feed.dateTriggered?.split(delimiter)[0];\n    feed.dateTriggered = feed.dateTriggered?.replace('T', ' ');\n  }\n\n  @action addFeedItem = async (id: string, info: string, username?: string) => {\n    console.log('id', 'info', 'username')\n    console.log(id, info, username)\n    try {\n      await agent.Feed.addFeedItem(id, info, username);\n      toast.info('Successfully ' + info);\n    } catch (error) {\n      console.log(error);\n      toast.error('Problem ' + info);\n\n    }\n  }\n\n\n\n  @action loadFeed = async () => {\n    this.loadingInitial = true;\n    try {\n      const feedEnvelope = await agent.Feed.list(LIMIT, this.page);\n      const { feeds, feedCount } = feedEnvelope;\n      // console.log(feeds);\n      runInAction('loading feed', () => {\n        feeds.forEach((feed) => {\n          this.formatDate(feed);\n          this.feedRegistry.set(feed.id, feed);\n          // console.log('feed', feed)\n\n        });\n        // this.feeds = feeds;\n        this.feedCount = feedCount;\n        this.loadingInitial = false;\n\n      })\n    } catch (error) {\n      runInAction('load countries error', () => {\n        this.loadingInitial = false;\n\n      });\n      console.log(error);\n    }\n  }\n\n}","import { action, computed, observable, reaction, runInAction } from 'mobx';\n\nimport agent from '../api/agent';\nimport {  IProfile } from '../models/profile';\nimport { RootStore } from './rootStore';\nimport { v4 as uuid } from \"uuid\";\nimport { toast } from 'react-toastify';\n\nconst LIMIT = 8;\n\n\nexport default class PeopleStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n        () => this.predicate.keys(),\n        () => {\n          this.page = 0;\n          this.peopleRegistry.clear();\n          this.loadPeople();\n        }\n      )\n  }\n\n  @observable loadingPeople = false;\n  @observable people: IProfile[] = [];\n  @observable peopleCount: number;\n  @observable peopleRegistry = new Map();\n\n\n  @observable page: number = 0;\n\n  @computed get totalPages() {\n    return Math.ceil(this.peopleCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @observable predicate = new Map();\n//   @observable searchString = '';\n\n  @action setPredicate = (predicate: string, value: string  ) => { //| Date\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n \n    }\n  }\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n\n  @computed get displayPeople () {\n    return Array.from(this.peopleRegistry.values());\n  } \n\n  @action cleanPeople = async () => {\n    runInAction(() => {\n      this.peopleRegistry.clear();\n      this.page = 0;\n    })\n  }\n  @action loadPeople = async () => {\n\n    this.loadingPeople = true;\n    try {\n      const peopleEnvelope = await agent.Profiles.listPeople(this.axiosParams);\n      const { people, peopleCount } = peopleEnvelope;\n      runInAction(() => {\n        this.loadingPeople = false;\n        people.forEach(person => {\n          person.id = uuid()\n          this.peopleRegistry.set(person.id, person);\n        })\n        this.peopleCount = peopleCount;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingPeople = false;\n      })\n      toast.error('Problem loading members');\n    }\n  }\n\n}\n","import { IPrivateMessageToDelete, IPrivateMessageToEdit } from './../models/privatemessages';\nimport { HttpTransportType, HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { observable, action, computed, runInAction } from 'mobx';\nimport { history } from '../..';\n\nimport agent from '../api/agent';\nimport { RootStore } from './rootStore';\nimport { IPrivateMessage } from '../models/privatemessages';\n\n\nconst LIMIT = 10;\n\nexport default class PrivateMessageStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n    }\n\n    @observable username: string = '';\n    @observable senderPhotoUrl: string;\n\n    @observable messageRegistry = new Map();\n    @observable loadingInitial = false;\n    @observable recipientUsername: any = '';\n\n    @observable messageThreadId: string;\n    @observable messageContent: string;\n\n    @observable messageThreadsCount = 0;\n    @observable page = 0;\n    @observable totalPages = 0;\n\n\n    @observable listOfMessagesInFocus: [string, IPrivateMessage[]] | undefined = undefined;\n    @observable index: number;\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @observable otherUser: string = '';\n\n    @action setOtherUser = async (otherUser: string) => {\n        runInAction(() => {\n            this.otherUser = otherUser;\n        })\n    }\n    @action cleanOtherUser = () => {\n        runInAction(() => {\n            this.otherUser = '';\n        })\n    }\n\n    @computed get messagesByThreadId() {\n        return this.groupMessagesByThreadId(Array.from(this.messageRegistry.values()));\n    }\n\n    groupMessagesByThreadId(messages: IPrivateMessage[]) {\n        const sortedMessages = messages.sort(\n            (a, b) => Date.parse(b.dateSent) - Date.parse(a.dateSent)\n        )\n        return Object.entries(sortedMessages.reduce((messages, message) => {\n            const threadId = message.privateMessageThreadId;\n            messages[threadId] = messages[threadId] ? [...messages[threadId], message] : [message];\n            return messages;\n        }, {} as { [key: string]: IPrivateMessage[] }));\n    }\n\n    @action createHubConnection = ( otherUsername: string) => {//messageThreadId: string\n        this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_API_MESSAGE_URL! + '?user=' + otherUsername, {\n                skipNegotiation: true,\n                transport: HttpTransportType.WebSockets,\n                accessTokenFactory: () => this.rootStore.commonStore.token!\n\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        this.hubConnection\n            .start()\n            .catch(error => console.log('Error establishing connection: ', error));\n\n        this.hubConnection.on('ReceiveMessage', message => {\n\n            runInAction(() => {\n                this.messageRegistry.set(message.id, message);\n\n            });\n            this.setViewUponNewMessage(message.privateMessageThreadId)\n        })\n        this.hubConnection.on('MessageDeleted', (messageToDelete: IPrivateMessageToDelete) => {\n\n            runInAction(() => {\n                this.messageRegistry.delete(messageToDelete.id);\n            })\n            this.setView(messageToDelete.privateMessageThreadId)\n        })\n\n\n        this.hubConnection.on('MessageEdited', (messageToEdit: IPrivateMessageToEdit) => {\n\n            this.resetViewAfterEdit(messageToEdit);\n        })\n\n    }\n\n    @action stopHubConnection = () => {\n\n        this.hubConnection?.stop();\n    }\n\n    @action addReply = async () => {\n\n        let messageToSend = {\n            recipientUsername: this.recipientUsername,\n            content: this.messageContent,\n            privateMessageThreadId: this.messageThreadId,\n            username: this.username\n        }\n\n        try {\n            await this.hubConnection!.invoke('SendMessage', messageToSend);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    @action deleteSingleMessage = async (id: string, privateMessageThreadId: string, recipientUsername: string) => {\n\n        let messageToSend = {\n            id,\n            privateMessageThreadId,\n            recipientUsername\n        }\n        try {\n            await this.hubConnection!.invoke('DeleteMessage', messageToSend)\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    @action editMessage = async (id: string, privateMessageThreadId: string, content: string, recipientUsername: string, senderPhotoUrl: string) => {\n        \n        let messageToEdit = {\n            id,\n            privateMessageThreadId,\n            content,\n            recipientUsername,\n            senderPhotoUrl\n        }\n        try {\n            await this.hubConnection!.invoke('EditMessage', messageToEdit)\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    @action loadMessages = async () => {\n        this.loadingInitial = true;\n        try {\n\n            const messagesEnvelope = await agent.PrivateMessages.list(LIMIT, this.page);\n            const { privateMessages, privateMessageThreadsCount, totalPages } = messagesEnvelope;\n            runInAction('loading messages', () => {\n                privateMessages.forEach((message) => {\n                    this.formatDate(message);\n                    this.messageRegistry.set(message.id, message);\n                });\n                this.messageThreadsCount = privateMessageThreadsCount;\n\n                this.totalPages = totalPages;\n                this.loadingInitial = false;\n            });\n        } catch (error) {\n            runInAction('load messages error', () => {\n                this.loadingInitial = false;\n            });\n            console.log(error);\n        }\n    };\n    @action setPage = (page: number) => {\n        this.page = page;\n    }\n\n\n    @action setInitialView = () => {\n        runInAction(() => {\n\n            this.listOfMessagesInFocus = this.messagesByThreadId[0]\n        })\n    }\n\n    @action setView = (id?: string) => {\n\n        runInAction(() => {\n            this.index = this.messagesByThreadId.findIndex(m => m[0] === id);\n            this.listOfMessagesInFocus = this.messagesByThreadId[this.index];\n        })\n        return this.listOfMessagesInFocus;\n    }\n    @action setViewUponNewMessage = (id?: string) => {\n\n        this.index = this.messagesByThreadId.findIndex(m => m[0] === id);\n\n        runInAction(() => {\n            if(this.listOfMessagesInFocus![0] === id){\n                this.listOfMessagesInFocus = this.messagesByThreadId[this.index];\n            }\n        })\n    }\n\n\n    private resetViewAfterEdit(messageToEdit: IPrivateMessageToEdit) {\n        runInAction(() => {\n            var index = this.listOfMessagesInFocus![1].findIndex(m => m.id === messageToEdit.id);\n            this.listOfMessagesInFocus![1][index].content = messageToEdit.content;\n        });\n    }\n\n    private formatDate(message: IPrivateMessage) {\n        const delimiter = '.';\n        message.dateSent = message.dateSent?.split(delimiter)[0];\n        message.dateSent = message.dateSent.replace('T', ' ');\n    }\n\n    @action markReadInDB = async (id: string) => {\n        try {\n            await agent.PrivateMessages.markRead(id);\n            runInAction(() => {\n                this.listOfMessagesInFocus?.[1].forEach((messages: IPrivateMessage) => {\n                    if (messages.dateRead === null) {\n                        messages.dateRead = new Date().toISOString()\n                    }\n                })\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    @action setRecipient = (username: string, userPhotoUrl: any) => {\n        this.recipientUsername = username;\n    }\n    @action setMessageThreadId = (messageThreadId: string) => {\n        this.messageThreadId = messageThreadId;\n    };\n    @action setReply = (content: string) => {\n        this.messageContent = content;\n    };\n    @action setUsername = (username: string) => {\n        this.username = username;\n\n    }\n    @action sendMessage = async (messageToSend: any) => {\n\n        try {\n            await agent.PrivateMessages.create(messageToSend);\n\n            runInAction('loading message ', () => {\n                this.rootStore.modalStore.closeModal();\n            });\n            history.push('/privateMessages');\n        } catch (error) {\n            runInAction('load thread error', () => {\n            });\n            console.log(error);\n        }\n    };\n}\n\n\n\n","import {\n    HubConnection, HubConnectionBuilder, LogLevel\n} from '@microsoft/signalr';\nimport { action, computed, observable, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport PrivateMessageStore from './privateMessageStore';\nimport { RootStore } from './rootStore';\n\n\nexport default class PresenceStore {\n\n\n    rootStore: RootStore;\n    privateMessageStore: PrivateMessageStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n        this.privateMessageStore = rootStore.privateMessageStore;\n    }\n\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @observable onlineUsersSource: string[] = [];\n    @observable onlineUsers: string[] = []\n\n    @observable counterUnread: number = 0;\n\n    @observable counterUnreadItems = new Set();\n    @observable unreadItems: string[] = [];\n\n    @computed get unreadIncomingMessages() {\n        return this.unreadItems.length;\n    }\n\n\n    @action markReadNavbar = async (username: string) => {\n\n        runInAction(() => {\n            const index = this.unreadItems.indexOf(username);\n            if (index > -1) {\n                this.unreadItems.splice(index, 1);\n            }\n        })\n    }\n\n    @action getUnreadItems = async () => {\n\n        try {\n            const result = await agent.PrivateMessages.checkUnread();\n\n            runInAction(() => {\n                if (result) {\n                    this.unreadItems = result;\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    @action createHubConnection = () => {\n        this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_API_PRESENCE_URL!, {\n\n                accessTokenFactory: () => this.rootStore.commonStore.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        this.hubConnection\n            .start()\n            .catch(error => console.log('Error establishing connection: ', error));\n\n\n        this.hubConnection.on('GetOnlineUsers', (usernames: string[]) => {\n            runInAction(() => {\n                this.onlineUsers = usernames;\n\n            })\n        })\n        this.hubConnection.on('NewMessageReceived', message => {\n\n            // console.log(message.senderDisplayName + ' has sent you a new message');\n\n\n            runInAction(() => {\n                if (this.unreadItems.indexOf(message.senderUsername) === -1) {\n                    this.unreadItems.push(message.senderUsername);\n                }\n                this.privateMessageStore.messageRegistry.set(message.id, message);\n            })\n\n        })\n    }\n\n    @action stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log(error))\n    }\n\n}","import { configure } from 'mobx';\nimport { createContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './profileStore';\nimport UserStore from './userStore';\nimport ForumPostStore from './forumPostStore';\nimport MotofyStore from './motofyStore';\nimport MechanicStore from './mechanicStore';\nimport BrandStore from './brandStore';\nimport ProductStore from './productStore';\nimport CommentStore from './commentStore';\nimport CountryStore from './countryStore';\nimport FeedStore from './feedStore';\nimport PeopleStore from './peopleStore';\nimport PrivateMessageStore from './privateMessageStore';\nimport PresenceStore from './presenceStore';\n\n// === mobx === //\nconfigure({ enforceActions: 'always' });\n\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    forumPostStore: ForumPostStore;\n    motofyStore: MotofyStore;\n    mechanicStore: MechanicStore;\n    brandStore: BrandStore;\n    productStore: ProductStore;\n    commentStore: CommentStore;\n    countryStore: CountryStore;\n    feedStore: FeedStore;\n    peopleStore: PeopleStore;\n    privateMessageStore: PrivateMessageStore;\n    presenceStore: PresenceStore;\n\n\n    constructor () {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n        this.forumPostStore = new ForumPostStore(this);\n        this.motofyStore = new MotofyStore(this);\n        this.mechanicStore = new MechanicStore(this);\n        this.brandStore = new BrandStore(this);\n        this.productStore = new ProductStore(this);\n        this.commentStore = new CommentStore(this);\n        this.countryStore = new CountryStore(this);\n        this.feedStore = new FeedStore(this);\n        this.peopleStore = new PeopleStore(this);\n        this.privateMessageStore = new PrivateMessageStore(this);\n        this.presenceStore = new PresenceStore(this);\n    }\n}\n\nexport const RootStoreContext = createContext(new RootStore());","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport \"./Navbar.css\";\n\nimport { Link, NavLink } from \"react-router-dom\";\nimport {\n  Container,\n  Dropdown,\n  Image,\n  Label,\n  Menu,\n  Popup,\n} from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nimport { useTranslation } from \"react-i18next\";\nimport i18next from \"i18next\";\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { user, logout, isLoggedIn } = rootStore.userStore;\n  const {\n    unreadIncomingMessages,\n    getUnreadItems,\n  } = rootStore.presenceStore;\n  const { setInitialView } = rootStore.privateMessageStore;\n\n  // const { createHubConnection } = rootStore.presenceStore;\n\n  const { i18n, t } = useTranslation([\"navbar\"]);\n\n  const menuRef: any = useRef();\n\n  const closeStackableMenu = () => {\n    //e: any\n    var actionMenu = menuRef.current.parentNode;\n    var actionIcon = menuRef.current;\n    actionMenu.classList.remove(\"active\");\n    actionMenu.classList.remove(\"open\");\n    actionIcon.classList.remove(\"active\");\n    actionIcon.classList.remove(\"open\");\n  };\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      menuRef.current.onclick = function (e: any) {\n        var menu = menuRef.current.parentNode;\n\n        if (!this.classList.contains(\"active\")) {\n          this.classList.add(\"active\");\n          menu.classList.add(\"open\");\n        } else {\n          this.classList.remove(\"active\");\n          menu.classList.remove(\"open\");\n        }\n\n        e.preventDefault();\n      };\n    }\n  }, [isLoggedIn]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"i18nextLng\")?.length! > 2) {\n      i18next.changeLanguage(\"en\");\n    }\n    if (isLoggedIn) {\n      getUnreadItems();\n    }\n  }, [\n    getUnreadItems,\n    isLoggedIn,\n  ]);\n\n  const handleLanguageChange = (e: string) => {\n    i18n.changeLanguage(e);\n    closeStackableMenu();\n  };\n\n  const handleViewUnread = () => {\n    closeStackableMenu();\n    setInitialView();\n  };\n\n  return (\n    <>\n      <Container>\n        <Menu\n          style={{ textAlign: \"center\" }}\n          fixed='top'\n          stackable\n          inverted\n          pointing\n        >\n          <Menu.Item as={NavLink} exact to='/'>\n            <img\n              src='/assets/logo.png'\n              alt='logo'\n              style={{ marginRight: \"10\" }}\n              onClick={closeStackableMenu}\n            />\n            Motoranza\n          </Menu.Item>\n\n          {isLoggedIn && (\n            <>\n              <Menu.Item\n                exact\n                as={NavLink}\n                to='/activities'\n                onClick={closeStackableMenu}\n              >\n                {t(\"motorcycle diaries\")}\n              </Menu.Item>\n              <Menu.Item\n                exact\n                as={NavLink}\n                to='/gallery'\n                onClick={closeStackableMenu}\n              >\n                Motofy!\n              </Menu.Item>\n              <Menu.Item\n                exact\n                as={NavLink}\n                onClick={closeStackableMenu}\n                to='/forum'\n              >\n                {\" \"}\n                {t(\"forum\")}\n              </Menu.Item>\n              <Menu.Item\n                name='mechanics'\n                exact\n                as={NavLink}\n                to='/mechanics'\n                onClick={closeStackableMenu}\n              >\n                {t(\"mechanics\")}\n              </Menu.Item>\n              <Menu.Item\n                name='market'\n                value='Market'\n                as={Link}\n                to='/shop'\n                onClick={closeStackableMenu}\n              >\n                {\" \"}\n                {t(\"market\")}\n              </Menu.Item>\n              <Menu.Item>\n                <Dropdown text={t(\"social\")} className='icon' floating labeled>\n                  <Dropdown.Menu>\n                    <Dropdown.Item\n                      name='people'\n                      as={Link}\n                      onClick={closeStackableMenu}\n                      to='/people'\n                    >\n                      {\" \"}\n                      {t(\"people\")}\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      name='people'\n                      onClick={closeStackableMenu}\n                      as={Link}\n                      to='/privateMessages'\n                    >\n                      {\" \"}\n                      {t(\"private messages\")}\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      name='feed'\n                      as={Link}\n                      onClick={closeStackableMenu}\n                      to='/feed'\n                    >\n                      {\" \"}\n                      Feed\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n                {unreadIncomingMessages > 0 && (\n                  <Label\n                    as={Link}\n                    to='/privateMessages'\n                    color='orange'\n                    onClick={() => handleViewUnread()}\n                  >\n                    {unreadIncomingMessages}\n                  </Label>\n                )}\n              </Menu.Item>\n              <div className='right menu'>\n                <Menu.Item>\n                  <Dropdown text={t(\"new\")} className='icon' floating labeled>\n                    <Dropdown.Menu>\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"motorcycle diary\")}\n                            value='MotoDiary'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/createDiary'\n                          />\n                        }\n                        content={t(\"motorcycle diary pop\")}\n                      />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text='Motofy!'\n                            value='Motofy'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/galleryForm'\n                          />\n                        }\n                        content={t(\"motofy pop\")}\n                      />\n\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"mechanic shop\")}\n                            value='Mecanic'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/mechanicForm'\n                          />\n                        }\n                        content={t(\"mechanic shop pop\")}\n                      />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"forumpost\")}\n                            value='Forum'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/forumform'\n                          />\n                        }\n                        content={t(\"forumpost pop\")}\n                      />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"product to sell\")}\n                            value='Product'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/productform'\n                          />\n                        }\n                        content={t(\"product to sell pop\")}\n                      />\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Menu.Item>\n                {user && (\n                  <>\n                    <Menu.Item position='right'>\n                      <Dropdown pointing='top left' text={t(\"Select language\")}>\n                        <Dropdown.Menu>\n                          <Dropdown.Item\n                            text={t(\"English\")}\n                            onClick={() => handleLanguageChange(\"en\")}\n                            flag='uk'\n                          />\n                          <Dropdown.Item\n                            text={t(\"Italian\")}\n                            onClick={() => handleLanguageChange(\"it\")}\n                            flag='italy'\n                          />\n                          <Dropdown.Item\n                            text={t(\"German\")}\n                            onClick={() => handleLanguageChange(\"de\")}\n                            flag='germany'\n                          />\n                          <Dropdown.Item\n                            text={t(\"French\")}\n                            onClick={() => handleLanguageChange(\"fr\")}\n                            flag='france'\n                          />\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Menu.Item>\n\n                    <Menu.Item position='right'>\n                      <Image\n                        avatar\n                        spaced='right'\n                        src={user!.image || \"/assets/user.png\"}\n                      />\n                      <Dropdown pointing='top left' text={user!.displayName}>\n                        <Dropdown.Menu>\n                          <Dropdown.Item\n                            as={Link}\n                            to={`/profile/${user!.userName}`}\n                            text={t(\"my profile\")}\n                            onClick={closeStackableMenu}\n                            icon='user'\n                          />\n                          <Dropdown.Item\n                            onClick={logout}\n                            text={t(\"logout\")}\n                            icon='power'\n                          />\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Menu.Item>\n                  </>\n                )}\n              </div>\n              <div ref={menuRef} className='hamburger '>\n                <span className='hamburger-bun'></span>\n                <span className='hamburger-patty'></span>\n                <span className='hamburger-bun'></span>\n              </div>\n            </>\n          )}\n        </Menu>\n      </Container>\n    </>\n  );\n};\nexport default observer(NavBar);\n","import React, { useContext, useState } from \"react\";\nimport { Menu, Input, Divider, Icon, SegmentGroup } from \"semantic-ui-react\";\nimport { Calendar } from \"react-widgets\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.activityStore;\n\n  const [calendarFilter, setCalendarFilter] = useState(false);\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n\n  const toggleCalendar = () => {\n    setCalendarFilter(!calendarFilter);\n  };\n  const styles = {\n    textAlign: \"center\",\n  };\n  return (\n    <SegmentGroup raised>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        {!calendarFilter && (\n          <>\n            <Menu.Item active={predicate.has(\"search\")}>\n              <Input\n                icon='search'\n                placeholder={t(\"Search all\")}\n                onKeyDown={(e: any) => handleResultSelect(e)}\n              />\n            </Menu.Item>\n            <Divider horizontal \n            content={t(\"or choose from built in filters\")}\n            />\n          </>\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.size === 0}\n            onClick={() => setPredicate(\"all\", \"true\")}\n            color={\"blue\"}\n            name={\"all\"}\n            content={t(\"Active Diaries\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isCompleted\")}\n            onClick={() => setPredicate(\"isCompleted\", \"true\")}\n            color={\"blue\"}\n            name={\"isCompleted\"}\n            content={t(\"Completed Diaries\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isHost\")}\n            onClick={() => setPredicate(\"isHost\", \"true\")}\n            color={\"blue\"}\n            name={\"host\"}\n            content={t(\"My own\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isGoing\")}\n            onClick={() => setPredicate(\"isGoing\", \"true\")}\n            color={\"blue\"}\n            name={\"username\"}\n            content={t(\"Diaries I follow\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"iFollow\")}\n            onClick={() => setPredicate(\"iFollow\", \"true\")}\n            color={\"blue\"}\n            name={\"country\"}\n            content={t(\"By people I follow\")}\n            style={styles}\n          />\n        )}\n        <Menu.Item\n          active={calendarFilter}\n          color={\"blue\"}\n          content={!calendarFilter ? t(\"Select Diaries After A Date\")\n          : <span><Icon name=\"arrow left\"/>{ t(\"Go back to built-in filters\")}</span> }\n          style={styles}\n          onClick={toggleCalendar}\n        />\n      </Menu>\n      {calendarFilter && (\n          <Calendar\n            onChange={(date) => setPredicate(\"startDate\", date!)}\n            value={predicate.get(\"startDate\") || new Date()}\n          />\n      )}\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ActivityListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst SearchDiaries = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.activityStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchDiaries;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst ActivityMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.activityStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info}</div>\n\n  );\n};\n\nexport default observer(ActivityMobileInfo);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport SearchDiaries from \"../modals/SearchDiaries\";\nimport ActivityMobileInfo from \"./ActivityMobileInfo\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.activityStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  const handleSearch = () => {\n    setPredicate(\"calendar\", \"true\");\n    openModal(<SearchDiaries />);\n  };\n\n  useEffect(()=>{\n    setInfo(t('Active diaries'))\n\n  },[setInfo, t])\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"isCompleted\":\n        setInfo(t(\"Completed diaries\"));\n        break;\n      case \"isGoing\":\n        setInfo(t(\"Diaries I Follow\"));\n        break;\n      case \"isHost\":\n        setInfo(t(\"My diaries\"));\n        break;\n      case \"calendar\":\n        setInfo(t(\"Search diaries\"));\n        break;\n      default:\n        setInfo(t(\"Active diaries\"));\n        break;\n    }\n  };\n\n\n  return (\n    <>\n      <Menu fluid widths={5} style={{ top: \"200px\" }}>\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isCompleted\")}\n          onClick={() => {\n            setPredicate(\"isCompleted\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"hourglass end\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isGoing\")}\n          onClick={() => {\n            setPredicate(\"isGoing\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isHost\")}\n          onClick={() => {\n            setPredicate(\"isHost\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"user circle\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"calendar\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n        {/* <Menu.Item style={{textAlign:\"left\"}}>\n        <DatePicker\n          onChange={(date) => setPredicate(\"startDate\", date!)}\n          withPortal\n        />\n      </Menu.Item> */}\n      </Menu>\n      <ActivityMobileInfo />\n    </>\n  );\n};\n\nexport default observer(ActivityMobileFilters);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IAttendee } from '../../../app/models/activity';\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst styles = {\n  borderColor: 'green',\n  borderWidth: 2\n}\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\n\n  return (\n    <List horizontal>\n      {attendees.map((attendee) => (\n        <List.Item key={attendee.username}>\n          <Popup\n            header={attendee.displayName}\n            trigger={\n              <Image\n                size='mini'\n                circular\n                src={attendee.image || '/assets/user.png'}\n                bordered\n                style={attendee.following ? styles : null}\n              />\n            }\n          />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ActivityListItemAttendees;\n","import React, {\n  // useEffect, // , { useContext }\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Accordion, Button, Item, Segment } from \"semantic-ui-react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport ActivityListItemAttendees from \"./ActivityListItemAttendees\";\n\nimport { useTranslation } from \"react-i18next\";\n// import i18next from \"i18next\";\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\n  const { t } = useTranslation([\"diaries\"]);\n\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n\n  const when = t(\"when\");\n  const starting_point = t(\"starting_point\");\n  const destination = t(\"destination\");\n\n  const panels = [\n    {\n      key: \"when\",\n      title: when ,\n      content: [\"On \" + format(activity.date, \"MMMM d yyyy h:mm:a\")].join(\" \"),\n    },\n    {\n      key: \"starting_point\",\n      title: starting_point,\n      content: [\"In \" + activity.city + \", \" + activity.departure].join(\" \"),\n    },\n    {\n      key: \"destination\",\n      title:destination,\n      content: [activity.destination],\n    },\n  ];\n\n  // const descriptionUiShort = activity.description.substring(0, 60);\n  // const seeMore = \"...see more\";\n\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Item.Group>\n          <Item>\n            {/* <Item.Content> */}\n            {/* <Item.Description>\n                {activity.isHost && (\n                  <Label\n                    // pointing='below'\n                    basic\n                    color='teal'\n                    content={userMessage}\n                  />\n                )}\n                {activity.isGoing && !activity.isHost && (\n                  <Label\n                    // pointing='below'\n                    basic\n                    color='green'\n                    content={namedMessage}\n                    //\n                  />\n                )}\n              </Item.Description> */}\n            <Item.Image\n              size='tiny'\n              circular\n              src={host.image || \"/assets/user.png\"}\n              style={{ marginBottom: 3 }}\n            />\n            {/* </Item.Content> */}\n            <Item.Content\n              verticalAlign='middle'\n              style={{ textAlign: \"center\" }}\n            >\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                <h2>{activity.title}</h2>\n              </Item.Header>\n              <Item.Meta>\n                by{\" \"}\n                <Link to={`/profile/${host.username}`}>\n                  {\" \"}\n                  {host.displayName}\n                </Link>\n              </Item.Meta>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        {/* <Icon name='clock' /> {format(activity.date, 'h:mm:a')}\n        <Icon name='marker' /> Starting Point: {activity.venue}, {activity.city}\n        <Icon name='marker' /> Destination: {activity.destination}  */}\n\n        <Accordion fluid panels={panels} styled exclusive={false} />\n      </Segment>\n      <Segment clearing>\n        <Item.Group>\n          <Item.Description as={Link} to={`/activities/${activity.id}`}>\n            <span>{activity.description.substring(0, 60)}</span> <span>...see more</span>\n          </Item.Description>\n        </Item.Group>\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendees attendees={activity.attendees} />\n      </Segment>\n      <Segment secondary>\n        <Button\n          as={Link}\n          to={`/activities/${activity.id}`}\n          // floated='right'\n          content={t(\"Check This Diary\")}\n          color='blue'\n          fluid\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityListItem;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nconst ActivityList = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { activitiesByDate } = rootStore.activityStore;\n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Item.Group divided>\n            {activities.map((activity) => (\n              <ActivityListItem key={activity.id} activity={activity} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityList);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\nimport ActivityMobileFilters from \"./ActivityMobileFilters\";\nimport ActivityList from \"./ActivityList\";\n\n//REFACTOR or delete!!!\n// import ActivityListItemMissedSearch from \"./ActivityListItemMissedSearch\";\n\nconst ActivityDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n    // activityHit,\n    // activityMax\n  } = rootStore.activityStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadActivities().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <ActivityMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <ActivityListItemPlaceholder />\n        ) : \n        // (\n        //   <>\n        //     {(activityHit === false && activityMax === false) ? (\n        //       <ActivityListItemMissedSearch />\n        //     ) : \n            (\n              <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && page + 1 < totalPages}\n                initialLoad={false}\n              >\n                <ActivityList />\n              </InfiniteScroll>\n            )\n          }\n          {/* </>\n        )} */}\n      </Grid.Column>\n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n          <ActivityFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column width={11}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","import { AxiosResponse } from 'axios';\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface IProps {\n  error: AxiosResponse;\n  text?: string ;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({ error, text  }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {error.data && Object.keys(error.data.errors).length > 0 && (\n          <Message.List>\n              {Object.values(error.data.errors).flat().map((err: any, i) => (\n                  <Message.Item key={i}>{err}</Message.Item>\n              ))}\n          </Message.List>\n      )}\n      {text && <Message.Content content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { Form, FormFieldProps, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\n    \nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error },\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {/* type='text' was and error */}\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n\n","import { FORM_ERROR } from \"final-form\";\nimport React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport {\n  combineValidators,\n  isRequired,\n  matchesField,\n  composeValidators,\n  createValidator,\n  matchesPattern,\n} from \"revalidate\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  \n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n\n  const regexRule = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n\n  const validate = combineValidators({\n    username: isRequired({ message: t(\"Username is required\") }),\n    displayName: isRequired({ message: t(\"Display Name is required\") }),\n    password: composeValidators(\n      isRequired({ message: t(\"Password is required\") }),\n      matchesPattern((regexRule))({message: t(\"Password requires a minimum of eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\")})\n    )(),\n    \n    email: composeValidators (\n      isRequired({ message: t(\"Email is required\") }),\n      isValidEmail({ message: t(\"Invalid email address\") }),\n    )(),\n    confirmPassword: composeValidators(\n      isRequired({ message: t(\"Confirmation of password is required\") }),\n      matchesField(\n        \"password\",\n        \"confirmPassword\"\n      )({\n        message: t(\"Passwords do not match\"),\n      })\n    )(),\n  });\n\n  return (\n    <FinalForm\n      onSubmit={(values: any) =>\n        register(values)\n          .then(() => addFeedItem(uuid(), \"Registered\", values.username))\n          .catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit,\n      }) => (\n        <Form onSubmit={handleSubmit} error={submitError}>\n          <Header\n            as='h2'\n            content={t(\"Sign up to Motoranza\")}\n            color='teal'\n            textAlign='center'\n          />\n          <Field\n            name='username'\n            component={TextInput}\n            placeholder={t(\"Username\")}\n          />\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder={t(\"Display Name\")}\n          />\n          <Field name='email' component={TextInput} placeholder={t(\"Email\")} />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder={t(\"Password\")}\n            type='password'\n          />\n          <Field\n            name='confirmPassword'\n            component={TextInput}\n            placeholder={t(\"Confirm Password\")}\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage error={submitError} />\n          )}\n\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content={t(\"Register\")}\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import { FORM_ERROR } from \"final-form\";\nimport React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  combineValidators,\n  composeValidators,\n  createValidator,\n  isRequired,\n} from \"revalidate\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst RequestResetPasswordForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { handleForgottenPassword } = rootStore.userStore;\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n  const validate = combineValidators({\n    email: composeValidators(\n      isRequired({ message: t(\"Email is required\") }),\n      isValidEmail({ message: t(\"Invalid email address\") })\n    )(),\n  });\n\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        handleForgottenPassword(values).catch((error) => ({\n          [FORM_ERROR]: error,\n        }))\n      }\n      validate={validate}\n      render={({ handleSubmit, submitting, invalid, pristine }) => (\n        <Form onSubmit={handleSubmit} autoComplete='off'>\n          <Header\n            as='h2'\n            content={t('Reset password')}\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='email' component={TextInput} placeholder={t(\"Email\")} />\n\n          <Button\n            disabled={invalid || pristine}\n            loading={submitting}\n            color='teal'\n            content={t('Send me the reset link')}\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RequestResetPasswordForm;\n","import { FORM_ERROR } from \"final-form\";\nimport React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport RegisterForm from \"./RegisterForm\";\nimport ResetPasswordForm from \"./RequestResetPasswordForm\";\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n\n  const { openModal, setSize, closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    email: isRequired({ message: t(\"Email is required\") }),\n    password: isRequired({ message: t(\"Password is required\") }),\n  });\n  return (\n    <>\n      <FinalForm\n        onSubmit={(values: IUserFormValues) =>\n          login(values).catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n        }\n        validate={validate}\n        render={({\n          handleSubmit,\n          submitting,\n          submitError,\n          invalid,\n          pristine,\n          dirtySinceLastSubmit,\n        }) => (\n          <Form onSubmit={handleSubmit} error={submitError} autoComplete='off'>\n            <Header\n              as='h2'\n              content={t(\"Login to Motoranza\")}\n              color='teal'\n              textAlign='center'\n            />\n            <Field\n              name='email'\n              component={TextInput}\n              placeholder={t(\"Email\")}\n            />\n            <Field\n              name='password'\n              component={TextInput}\n              placeholder={t(\"Password\")}\n              type='password'\n            />\n            {submitError && !dirtySinceLastSubmit && (\n              <ErrorMessage\n                error={submitError}\n                text={t(\"Invalid email address or password\")}\n              />\n            )}\n            <Button\n              disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n              loading={submitting}\n              color='teal'\n              content={t(\"Login\")}\n              fluid\n            />\n          </Form>\n        )}\n      />\n      <div className='ui two buttons' style={{marginTop:\"1rem\"}}>\n        <Button\n          basic\n          color='teal'\n          onClick={() => {\n            closeModal();\n            setSize(\"mini\");\n            openModal(<ResetPasswordForm />);\n          }}\n        >\n          {t(\"Forgot your password?\")}\n        </Button>\n        {/* onClick={ openModal(<RegisterForm />)} */}\n        <Button color='teal' onClick={()=>{closeModal(); setSize(\"mini\"); openModal(<RegisterForm />)}}>\n          {t(\"Don't have an account yet? Sign Up!\")}\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { Fragment, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Segment } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterForm from \"../user/RegisterForm\";\nimport \"./Homepage.css\";\nimport { useTranslation } from \"react-i18next\";\n\nconst HomePage = () => {\n  const token = window.localStorage.getItem(\"jwt\");\n  const rootStore = useContext(RootStoreContext);\n  const { isLoggedIn, user } = rootStore.userStore;\n  const { openModal, setSize } = rootStore.modalStore;\n\n  const { t } = useTranslation(\"home\");\n\n  return (\n    <Segment inverted textAlign='center' vertical className='masthead'>\n      <Container textAlign='center' className=\"home-container\" style={{    marginLeft:\"auto\", marginRight:\"auto\"}}>\n        <Header as='h1' inverted style={{marginLeft:\"5rem\"}}>\n          <span style={{ color: \"#FA5\" }}>M</span>OTORANZA\n        </Header>\n        {isLoggedIn && user && token ? (\n          <Fragment>\n            <Header as='h2' inverted>\n              {t(\"welcome back to motoranza\")} {user.displayName}\n            </Header>\n            <Button\n              as={Link}\n              to='/activities'\n              size='huge'\n              inverted\n              className='btn'\n            >\n              {t(\"enter motoranza\")}\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Header as='h2' inverted content={t(\"Welcome to Motoranza\")} />\n            <Button\n              onClick={() => {\n                setSize(\"tiny\");\n                openModal(<LoginForm />);\n              }}\n              to='/login'\n              size='huge'\n              inverted\n              className=\"usr-btn\"\n            >\n              {t(\"login to enter\")}\n            </Button>\n            <Button\n              onClick={() => {\n                setSize(\"tiny\");\n                openModal(<RegisterForm />);\n              }}\n              size='huge'\n              inverted\n              className=\"usr-btn\"\n            >\n              {t(\"register to enter\")}\n            </Button>\n          </Fragment>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default HomePage;\n","import { IComment } from \"./comment\";\n\nexport interface IActivitiesEnvelope {\n  activities: IActivity[];\n  activityCount: number;\n}\n\nexport interface IActivity {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  date: Date;\n  city: string;\n  countryName: string;\n  countryId: string;\n  departure: string;\n  destination: string;\n  isGoing: boolean;\n  isHost: boolean;\n  isActive: boolean;\n  attendees: IAttendee[];\n  comments: IComment[];\n  diaryEntries: IDiaryEntry[];\n  motorcycleBrandId: string;\n  motorcycleBrandName: string;\n  motorcycleBrandLogoUrl: string;\n}\n\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n  time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  motorcycleBrandId: string = '';\n  motorcycleBrandName: string = '';\n  motorcycleBrandLogoUrl: string = '';\n  category: string = '';\n  description: string = '';\n  date?: Date = undefined;\n  time?: Date = undefined;\n  city: string = '';\n  countryName: string = '';\n  countryId: string = '';\n  departure: string = '';\n  destination: string = '';\n  //TODO:motorcycleBrandId, name etc...\n\n\n  constructor(init?: IActivityFormValues) {\n    if (init && init.date) {\n      init.time = init.date;\n    }\n    Object.assign(this, init);\n  }\n}\n\nexport interface IAttendee {\n  username: string;\n  displayName: string;\n  image: string;\n  isHost: boolean;\n  following?: boolean;\n}\nexport interface IDiaryEntry {\n  id: string;\n  body: string;\n  dayNumber: string;\n  entryDate: Date;\n  locationCity: string;\n  locationCountry: string;\n  road: string;\n  weather: string;\n  numberOfKilometers: number;\n  photoUrl: string;\n  mood: string;\n  file: any;\n  activityId: string;\n}\n\nexport class DiaryEntryFormValues {\n  id?: string = undefined;\n  mood: string = '';\n  body: string = '';\n  entryDate: Date;\n  locationCity: string = '';\n  locationCountry: string = '';\n  photoUrl: string = '';\n\n}\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n            search \n            selection\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput","export const category = [\n    { key: 'cityRidding', text: 'City Ridding', value: 'City Ridding' },\n    { key: 'outdoors', text: 'Outdoors', value: 'Outdoors' },\n    { key: 'byTheSea', text: 'By The Sea', value: 'By The Sea' },\n    { key: 'mountains', text: 'Mountains', value: 'Mountains' },\n    { key: 'cruise', text: 'Cruise', value: 'Cruise' },\n    { key: 'offRoad', text: 'Off Road', value: 'Off Road' },\n    { key: 'racing', text: 'Racing', value: 'Racing' },\n    { key: 'outToLunch', text: 'Out To Lunch', value: 'Out To Lunch' },\n    { key: 'goToPlaces', text: 'Go To Places', value: 'Go To Places' },\n    { key: 'rockAndRoll', text: 'Rock And Roll', value: 'Rock And Roll' },\n    { key: 'heavyMetal', text: 'Heavy Metal', value: 'Heavy Metal' },\n    { key: 'gang', text: 'Gang', value: 'Gang' }\n  ];","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <DateTimePicker \n            placeholder={placeholder}\n            value={input.value || null}\n            onChange={input.onChange}\n            onBlur={input.onBlur}\n            onKeyDown={(e) => e.preventDefault()}\n            date={date}\n            time={time}\n            {...rest}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default DateInput","import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Form, Grid, Label, Segment } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from 'revalidate';\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity,\n  } = rootStore.activityStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const {loadBrandsToSelect, brands } = rootStore.brandStore;\n  const [editMode, setEditMode] = useState(false);\n\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired( { message: t(\"City is required\") }),\n    departure: isRequired( { message: t(\"Place of departure is required\")}),\n    destination: isRequired( { message: t(\"Place of destination is required\")}),\n    date: isRequired({ message: t(\"Date is required\") }),\n    time: isRequired( { message: t(\"Time is required\") }),\n  });\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadBrandsToSelect();\n\n    loadCountriesToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n      setLoading(true);\n      loadActivity(match.params.id)\n      .then((activity) => setActivity(new ActivityFormValues(activity)))\n      .finally(() => setLoading(false));\n    }\n  }, [loadBrandsToSelect, loadActivity, match.params.id, loadCountriesToSelect]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    // console.log('brands in edit',toJS(brands));\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: newId,\n        isHost: true,\n        isActive: true,\n        diaryEntries: []\n      };\n      createActivity(newActivity);\n      addFeedItem(newId, 'Added Motocycle Diary')\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column \n      computer={10} mobile={16}\n      >\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                {editMode && <Label content={t('Title')}/>}\n                <Field\n                  name='title'\n                  placeholder={t('Title')}\n                  value={activity.title}\n                  component={TextInput}\n                />\n\n                  {!editMode && (\n                    <Field\n                      name='motorcycleBrandName'\n                      placeholder={t(\"Your motorcycyle brand\")} \n                      options={brands}\n                      component={SelectInput}\n                    />\n                  )} \n                  {editMode && <Label content={t('Description')}/>}\n                <Field\n                  placeholder={t('Description')}\n                  name='description'\n                  value={activity.description}\n                  rows={3}\n                  component={TextAreaInput}\n                />\n                {editMode && <Label content={t('Category')}/>}\n                <Field\n                  placeholder={t('Category')}\n                  name='category'\n                  options={category}\n                  value={activity.category}\n                  component={SelectInput}\n                />{editMode && <Label content={t('Date and Time')}/>}\n                <Form.Group widths='equal'>\n                  <Field\n                    placeholder={t('Date')}\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder={t('Time')}\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                  {editMode && <Label content={t('Country')}/>}\n                    <Field\n                      placeholder={t('Country')}\n                      name='countryName'\n                      options={countries}\n                      component={SelectInput}\n                    />\n                {editMode && <Label content={t('City')}/>}\n                <Field\n                  placeholder={t('City')}\n                  name='city'\n                  value={activity.city}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Departure/Starting Point')}/>}\n                <Field\n                  name='departure'\n                  placeholder={t('Departure/Starting Point')}\n                  value={activity.departure}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Destination')}/>}\n                <Field\n                  placeholder={t('Destination')}\n                  name='destination'\n                  value={activity.destination}\n                  component={TextInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content={t('Submit')}\n                ></Button>\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content={t('Cancel')}\n                ></Button>\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n      <Grid.Column width={3} />\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IEmbracer } from '../../../app/models/motofy';\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\nconst styles = {\n  borderColor: 'green',\n  borderWidth: 2\n}\nconst GalleryListItemEmbracers: React.FC<IProps> = ({ embracers }) => {\n  return (\n    <List horizontal>\n      {embracers.map(embracer => (\n        <List.Item key={embracer.username}>\n          \n            <Popup\n                header={embracer.displayName}\n                trigger={\n                <Image size='mini' \n                circular \n                src={embracer.image || '/assets/user.png'} \n                bordered\n                style={embracer.following ? styles : null}\n                />\n              }\n            />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default GalleryListItemEmbracers;\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Icon,\n  Item,\n  Segment,\n  Image,\n  Grid,\n  Divider,\n  Header,\n  Popup,\n} from \"semantic-ui-react\";\n\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport GalleryListItemEmbracers from \"./GalleryListItemEmbracers\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  motofy: IMotofy;\n}\n\nconst GalleryListItem: React.FC<IProps> = ({ motofy }) => {\n\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Item>\n          <Divider horizontal>\n            <Header as='h4'>\n              <Item.Meta>\n                {\" \"}\n                {motofy.name}, {motofy.brandName}\n              </Item.Meta>\n            </Header>\n          </Divider>\n          <Item.Group>\n            <Link to={`/gallery/${motofy.id}`}>\n              <img\n                className='ui centered big image'\n                src={motofy.photoUrl! || \"/assets/user.pn\"}\n                alt='Motofy!'\n              />\n            </Link>\n          </Item.Group>\n          <Divider horizontal>\n            <Header as='h4'>\n              {t(\"Info\")}\n            </Header>\n          </Divider>\n          <Grid\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              display: \"flex\",\n              textAlign: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid.Row>\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Popup\n                  header={motofy.brandName}\n                  className='computer only'\n                  trigger={\n                    <Image\n                      size='tiny'\n                      src={motofy.brandLogoUrl || \"/assets/user.pn\"}\n                      centered\n                    />\n                  }\n                />\n              </Grid.Column>\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Item.Header as={Link} to={`/gallery/${motofy.id}`}>\n                  {motofy.name}\n                </Item.Header>\n                <Item.Meta>\n                  {motofy.city}, {motofy.countryName}\n                </Item.Meta>\n              </Grid.Column>\n\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Icon name='motorcycle' /> {motofy.model}\n              </Grid.Column>\n\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Icon name='road' /> {motofy.numberOfKilometers} Km\n              </Grid.Column>\n            </Grid.Row>\n\n          \n          </Grid>\n        </Item>\n\n     \n\n        <Divider horizontal>\n          <Header as='h4'>\n            {t(\"Embraced by\")}\n          </Header>\n        </Divider>\n        <GalleryListItemEmbracers embracers={motofy.embracers} />\n      </Segment>\n      <Segment clearing>\n        <Button\n          as={Link}\n          to={`/gallery/${motofy.id}`}\n          fluid\n          content={t(\"View This \") + motofy.brandName}\n          color='blue'\n        ></Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GalleryListItem);\n","import React, { Fragment, useContext } from 'react';\nimport {  Item } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport GalleryListItem from './GalleryListItem';\nimport { IMotofy } from '../../../app/models/motofy';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst GalleryList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {motofiesByDate } = rootStore.motofyStore;\n\n\n  return (\n\n      <Item.Group divided>\n        {motofiesByDate.map((motofy:IMotofy) => (\n\n          <Fragment key={motofy.id}>\n            <GalleryListItem motofy={motofy} />\n          </Fragment>\n          \n        ))}\n      </Item.Group>\n   \n  );\n};\n// }\n\nexport default observer(GalleryList);\n","import React, { useContext } from \"react\";\nimport { Segment, Grid, Header, Item } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst GalleryChamps: React.FC<{ motofy: IMotofy, info:string }> = ({\n  motofy,\n  info\n}) => {\n  // const motofy = { ...champ };\n  const rootStore = useContext(RootStoreContext);\n\n  const { closeModal } = rootStore.modalStore;\n\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Link to={`/gallery/${motofy.id}`} onClick={() => closeModal()}>\n          <Grid>\n            <Grid.Column width={16}>\n              <Header\n                // icon={\"certificate\"}\n                attached\n                color={\"teal\"}\n                content={info}\n              />\n            </Grid.Column>\n            <Grid.Column width={16}>\n              <Grid.Row>\n              <Item.Image src={motofy.photoUrl} bordered fluid/>\n              </Grid.Row>\n              <Grid.Row>\n                <Item.Group>\n                  <Item>\n                    <Item.Content>\n                      <Item.Header>\n                        <p>{motofy.name}</p>\n                      </Item.Header>\n                      <Item.Description>\n                        {/* {motofy.model}, */}\n                        <p>\n                          {/* {motofy.brandName}, {\" \"} */}\n                          {motofy.city}, {motofy.countryName},{\" \"}\n                        </p>\n                        {/* {motofy.yearOfProduction} */}\n                      </Item.Description>\n\n                      {/* <p>{motofy.name}</p> */}\n                    </Item.Content>\n                  </Item>\n                </Item.Group>\n              </Grid.Row>\n            </Grid.Column>\n          </Grid>\n        </Link>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryChamps;\n","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Input, Divider } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport GalleryChamps from \"../modals/GalleryChamps\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GalleryFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, mostEmbraced, highestRatedMotofy } =\n    rootStore.motofyStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const handleOpenChamps = (info: string) => {\n    switch (info) {\n      case 'Most Embraced':\n        openModal(<GalleryChamps motofy={mostEmbraced} info={info}/>);\n        break;\n      default:\n        openModal(<GalleryChamps motofy={highestRatedMotofy} info={info}/>);\n        break;\n    }\n  };\n\n  const styles = {\n    textAlign: \"center\",\n    cursor: \"pointer\",\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Divider horizontal content={t(\"or choose from built in filters\")} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"globe\"}\n          content={t(\"All motofies\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => setPredicate(\"bestRated\", \"true\")}\n          color={\"blue\"}\n          name={\"bestRated\"}\n          icon={\"hand spock\"}\n          content={t(\"Best Rated\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"mostEmbraced\")}\n          onClick={() => setPredicate(\"mostEmbraced\", \"true\")}\n          color={\"blue\"}\n          name={\"mostEmbraced\"}\n          icon={\"winner\"}\n          content={t(\"Most Embraced\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"iEmbraced\")}\n          onClick={() => setPredicate(\"iEmbraced\", \"true\")}\n          color={\"blue\"}\n          name={\"username\"}\n          icon={\"heart\"}\n          content={t(\"I Embraced\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          content={t(\"By people I follow\")}\n          icon={\"users\"}\n          style={styles}\n        />\n \n        <Divider horizontal content={t('champs at the moment')} />\n        <Menu.Item\n          style={styles}\n          content={t('Most Embraced')}\n          onClick={() => handleOpenChamps('Most Embraced')}\n        />\n\n        <Menu.Item\n          style={styles}\n          content={t('Highest Rated')}\n          onClick={() => handleOpenChamps('Highest Rated')}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(GalleryFilters);\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchGallery = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.motofyStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchGallery;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst GalleryMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.motofyStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info}</div>\n  );\n};\n\nexport default observer(GalleryMobileInfo);\n","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\"; //, useState\nimport { useTranslation } from \"react-i18next\";\n// Input,\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n// import GalleryChamps from \"../modals/GalleryChamps\";\nimport SearchGallery from \"../modals/SearchGallery\";\nimport GalleryMobileInfo from \"./GalleryMobileInfo\";\n\nconst GalleryMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    predicate,\n    setPredicate,\n    setInfo\n    // mostEmbraced, highestRatedMotofy\n  } = rootStore.motofyStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  useEffect(()=>{\n    setInfo(t('All motofies'))\n  },[setInfo, t])\n\n\n  // const handleOpenChamps = (info: string) => {\n  //   switch (info) {\n  //     case 'Most Embraced':\n  //       openModal(<GalleryChamps motofy={mostEmbraced} info={info}/>);\n  //       break;\n  //     default:\n  //       openModal(<GalleryChamps motofy={highestRatedMotofy} info={info}/>);\n  //       break;\n  //   }\n  // };\n\n  const handleSearch = () => {\n    setPredicate(\"calendar\", \"true\");\n    openModal(<SearchGallery />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case 'bestRated':\n       setInfo (t('Best rated'))\n        break;\n      case 'mostEmbraced':\n       setInfo (t('Most embraced'))\n        break;\n      case 'iEmbraced':\n       setInfo (t('Motofies I embraced'))\n        break;\n      case 'iFollow':\n       setInfo (t('By people I follow'))\n        break;\n      case 'calendar':\n       setInfo (t('Search motofies'))\n        break;\n      default:\n       setInfo (t('All motofies'))\n        break;\n    }\n  }\n\n  return (\n    <>\n    <Menu fluid widths={6}>\n      <Menu.Item\n        active={predicate.size === 0}\n        onClick={() => {setPredicate(\"all\", \"true\"); handleSetInfo()}}\n        color={\"blue\"}\n        icon={\"home\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"bestRated\")}\n        onClick={() => {setPredicate(\"bestRated\", \"true\"); handleSetInfo()}}\n        color={\"blue\"}\n        icon={\"winner\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"mostEmbraced\")}\n        onClick={() => {setPredicate(\"mostEmbraced\", \"true\"); handleSetInfo()}}\n        color={\"blue\"}\n        icon={\"thumbs up outline\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"iEmbraced\")}\n        onClick={() => {setPredicate(\"iEmbraced\", \"true\"); handleSetInfo()}}\n        color={\"blue\"}\n        icon={\"heart\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"iFollow\")}\n        onClick={() => {setPredicate(\"iFollow\", \"true\"); handleSetInfo()}}\n        color={\"blue\"}\n        icon={\"eye\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"calendar\")}\n        onClick={() => {handleSearch(); handleSetInfo()}}\n        color={\"blue\"}\n        icon={\"search\"}\n      />\n      {/* <Menu.Item\n          // style={styles}\n          icon={\"sun\"}\n          // content='Most Embraced'\n          onClick={() => handleOpenChamps('Most Embraced')}\n          />\n\n        <Menu.Item\n          // style={styles}\n          icon={\"moon\"}\n          // content='Highest Rated'\n          onClick={() => handleOpenChamps('Highest Rated')}\n        /> */}\n    </Menu>\n    <GalleryMobileInfo/>\n    </>\n  );\n};\n\nexport default observer(GalleryMobileFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst GalleryListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid \n    //   style={{ marginTop: 50 }}\n      >\n        <Segment.Group>\n          <Segment \n          style={{ minHeight: 110 }}\n          >\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default GalleryListItemPlaceholder;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Loader,\nimport GalleryList from \"./GalleryList\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport GalleryFilters from \"./GalleryFilters\";\nimport GalleryMobileFilters from \"./GalleryMobileFilters\";\nimport GalleryListItemPlaceholder from \"./GalleryListItemPlaceholder\";\n\nconst GalleryDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadMotofies, loadingInitial, setPage, page, totalPages } =\n    rootStore.motofyStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMotofies().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMotofies();\n  }, [loadMotofies]);\n\n  return (\n    <Grid>\n\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n\n        <GalleryMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <GalleryListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <GalleryList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n    \n      \n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n           <GalleryFilters />\n        </Sticky>\n      </Grid.Column>\n\n      <Grid.Column computer={11} mobile={16}>\n      <Loader active={loadingNext}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GalleryDashboard);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Item,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IMechanic } from \"../../../app/models/mechanic\";\n\nconst mechanicImageStyle = {\n  filter: \"brightness(95%) contrast(70%) drop-shadow(1px 1px 1px teal)\",\n};\n\nconst testPositionStyles = {\n  textAlign: 'center'\n}\n\nconst MechanicListItem: React.FC<{ mechanic: IMechanic }> = ({ mechanic }) => {\n  const { t } = useTranslation([\"mechanics\"]);\n  return (\n    <Segment.Group raised>\n      <Segment raised>\n        <Header as='h1' floated='right' style={{color: 'rgb(58,\t98,\t139)'}}>\n          {mechanic.name}\n        </Header>\n        <Divider clearing />\n        <Item>\n          <Item.Group>\n            <Grid>\n              <Grid.Column width={5}>\n                <Item>\n                  <Item.Image\n                    style={mechanicImageStyle}\n                    size='small'\n                    rounded\n                    src={mechanic.photoUrl}\n                  />\n                </Item>\n              </Grid.Column>\n              <Divider vertical />\n              <Grid.Column width={6}>\n                <Item style={testPositionStyles}>\n                  <Item.Content>\n                    <Item.Header as='h2'>{t(\"Customers\")}</Item.Header>\n                   { mechanic.ratings !== undefined &&<Item.Extra as='h1'>{mechanic.ratings.length}</Item.Extra>}\n                  </Item.Content>\n                </Item>\n              </Grid.Column>\n              <Divider vertical />\n              <Grid.Column width={5}>\n                <Item style={testPositionStyles}>\n                  <Item.Content>\n                    <Item.Header as='h2'>{t(\"Rating\")}</Item.Header>\n                    {mechanic.averageRating !== undefined && <Item.Extra as='h1'>\n                      {mechanic.averageRating}\n                    </Item.Extra>}\n                  </Item.Content>\n                </Item>\n              </Grid.Column>\n            </Grid>\n          </Item.Group>\n        </Item>\n      </Segment>\n      <Segment>\n        <Grid>\n          <Grid.Column width={5}>\n            <Icon name='history' /> {t(\"In business since\")} {mechanic.yearOfStart}\n          </Grid.Column>\n          <Grid.Column width={6} style={testPositionStyles}>\n            <Icon name='envelope outline' /> {mechanic.city},{\" \"}\n            {mechanic.countryName}, {mechanic.address}\n          </Grid.Column>\n          <Grid.Column width={5} style={testPositionStyles}>\n            <Icon name='mail' /> {mechanic.email || 'email N/A'}\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment clearing>\n        <Button\n          as={Link}\n          to={`/mechanics/${mechanic.id}`}\n          fluid\n          content={t('View')}\n          color='instagram'\n        ></Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default MechanicListItem;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Item } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport MechanicListItem from './MechanicListItem';\n\nconst MechanicList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { mechanicsByDate } = rootStore.mechanicStore;\n\n  return (\n      <Item.Group divided>\n        {mechanicsByDate.map((mechanic) => (\n          <MechanicListItem mechanic={mechanic} key={mechanic.id} />\n        ))}\n      </Item.Group>\n  );\n};\n\nexport default observer(MechanicList);\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Menu, Dropdown, Input, Divider } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\nconst MechanicFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.mechanicStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const { t } = useTranslation([\"mechanics\"]);\n\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\n  const styles = {\n    textAlign: \"center\"\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n\n        <Menu.Item>\n          <Dropdown\n            placeholder={t('Search by country')}\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"arrows alternate\"}\n          content={t(\"All\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"isCustomer\")}\n          onClick={() => setPredicate(\"isCustomer\", \"true\")}\n          color={\"blue\"}\n          name={\"isCustomer\"}\n          icon={\"info\"}\n          content={t(\"My Shops (customer)\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"mostRecommended\")}\n          onClick={() => setPredicate(\"mostRecommended\", \"true\")}\n          color={\"blue\"}\n          name={\"mostRecommended\"}\n          icon={\"heart outline\"}\n          content={t(\"Most Recommended\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => setPredicate(\"bestRated\", \"true\")}\n          color={\"blue\"}\n          name={\"bestRated\"}\n          icon={\"heart\"}\n          content={t(\"Best Rated\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          content={t(\"By people I follow\")}\n          style={ styles }\n          icon={\"users\"}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(MechanicFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst MechanicListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default MechanicListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchMechanic = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.mechanicStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder='Search all...'\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchMechanic;\n","import React, { useContext, useEffect } from \"react\";\nimport {  Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchMechanicByCountry = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.mechanicStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n  const { closeModal } = rootStore.modalStore;\n\n  //!!Warning Mem Leak\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\nconst handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n           <Dropdown\n            placeholder='Filter by country'\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchMechanicByCountry;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst MechanicMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.mechanicStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info}</div>\n  );\n};\n\nexport default observer(MechanicMobileInfo);","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport SearchMechanic from \"../modals/SearchMechanic\";\nimport SearchMechanicByCountry from \"../modals/SearchMechanicByCountry\";\nimport MechanicMobileInfo from \"./MechanicMobileInfo\";\n\nconst MechanicMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.mechanicStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  \n  useEffect(()=>{\n    setInfo(t('All mechanics'))\n  },[setInfo, t])\n\n  const { openModal } = rootStore.modalStore;\n\n  const handleSearch = () => {\n    setPredicate(\"search\", \"true\");\n    openModal(<SearchMechanic />);\n  };\n  const handleSearchByCountry = () => {\n    // setPredicate(\"all\", \"true\");\n    setPredicate(\"country\", \"true\");\n    openModal(<SearchMechanicByCountry />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"isCustomer\":\n        setInfo(t(\"I am customer\"));\n        break;\n      case \"mostRecommended\":\n        setInfo(t(\"Most recommended\"));\n        break;\n      case \"bestRated\":\n        setInfo(t(\"Best rated\"));\n        break;\n      case \"iFollow\":\n        setInfo(t(\"Mechanics I follow\"));\n        break;\n      case \"country\":\n        setInfo(t(\"Search by country\"));\n        break;\n      case \"search\":\n        setInfo(t(\"Search all\"));\n        break;\n      default:\n        setInfo(t(\"All mechanics\"));\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Menu fluid widths={7} >\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isCustomer\")}\n          onClick={() => {\n            setPredicate(\"isCustomer\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"heart outline\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"mostRecommended\")}\n          onClick={() => {\n            setPredicate(\"mostRecommended\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"chess king\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => {\n            setPredicate(\"bestRated\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"winner\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => {\n            setPredicate(\"iFollow\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"country\")}\n          onClick={() => {\n            handleSearchByCountry();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"globe\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"search\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n      </Menu>\n      <MechanicMobileInfo />\n    </>\n  );\n};\n\nexport default observer(MechanicMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Rail,\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport MechanicList from \"./MechanicList\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport MechanicFilters from \"./MechanicFilters\";\nimport MechanicListItemPlaceholder from \"./MechanicListItemPlaceholder\";\nimport MechanicMobileFilters from \"./MechanicMobileFilters\";\n\nconst MechanicDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadMechanics, loadingInitial, setPage, page, totalPages } =\n    rootStore.mechanicStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMechanics().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMechanics();\n  }, [loadMechanics]);\n\n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <MechanicMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <MechanicListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <MechanicList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n          <MechanicFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDashboard);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content,\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Link } from 'react-router-dom';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport { observer } from 'mobx-react-lite';\nimport { formatDistance } from 'date-fns';\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createHubConnection,\n    stopHubConnection,\n    addComment,\n    activity,\n  } = rootStore.activityStore;\n\n  const { t } = useTranslation([\"comments\"]);\n\n\n  useEffect(() => {\n    createHubConnection(activity!.id);\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, activity]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>{t(\"Comment This Diary\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{maxWidth:'none'}}>\n          {activity &&\n            activity.comments &&\n            activity.comments.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                  <div>\n                      {formatDistance(\n                        new Date(comment.createdAt),\n                        new Date()\n                      )}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field \n                name='body'\n                component={TextAreaInput}\n                rows={2}\n                placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  fluid\n                  color='instagram'\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailedChat);\n","import React, { Fragment, useContext } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activityId: string;\n}\nconst ConfirmDeactivate: React.FC<IProps> = ({ activityId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deactivateActivity } = rootStore.activityStore;\n  const {\n    addFeedItem,\n  } = rootStore.feedStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeactivateActivity = (id: string) => {\n    deactivateActivity(id)\n      .then(() => addFeedItem(id, \"Deactivated Motocycle Diary\"))\n      .then(() => closeModal())\n      .finally(() => history.push(`/activities`));\n  };\n\n  const cancelDeactivateActivity = () => {\n    closeModal();\n  };\n\n  let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeactivateActivity(activityId)}\n            color='teal'\n            content={t('Yes, I finished my trip!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeactivateActivity()}\n            content={t('No, keep it active')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDeactivate;\n","import React, { Fragment, useContext } from \"react\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activityId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ activityId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteActivity } = rootStore.activityStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteActivity = (id: string) => {\n    deleteActivity(id)\n    //   .then(() => addFeedItem(id, \"Deactivated Motocycle Diary\"))\n      .then(() => closeModal());\n    //   .finally(() => history.push(`/activities`));\n  };\n\n  const cancelDeleteActivity = () => {\n    closeModal();\n  };\n\n  // let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this? You cannot go back...')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteActivity(activityId)}\n            color='teal'\n            content={t('Yes, delete it')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteActivity()}\n            content={t(\"No, don't delete\")}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  Button,\n  // Grid,\n  // GridColumn,\n} from \"semantic-ui-react\"; \nimport { IActivity } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport ConfirmDeactivate from \"../modals/ConfirmDeactivate\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityDetailedManager: React.FC<{ activity: IActivity }> = ({activity}) => {\n\n  const rootStore = useContext(RootStoreContext);\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const { openModal } = rootStore.modalStore;\n\n  const handleCompleteActivity = (id: string) => {\n    openModal(<ConfirmDeactivate activityId={id} />);\n    setManaging(false);\n  };\n  const handleDeleteActivity = (id: string) => {\n    openModal(<ConfirmDelete activityId={id} />);\n    setManaging(false);\n  };\n  const handleCancelAttendance = (id: string) => {\n    cancelAttendance();\n    addFeedItem(id, \"Left Motorcycle Diary\");\n    setManaging(false);\n  };\n  const handleAttendActivity = (id: string) => {\n    attendActivity();\n    addFeedItem(id, \"Joined Motorcycle Diary\");\n    setManaging(false);\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n  return (\n    <Segment.Group raised>\n      {/* {activity.isActive && ( */}\n        <Segment clearing attached='bottom'>\n          {activity.isHost ? (\n            <Fragment>\n              {!managing ? (\n                <Button onClick={toggleManaging} color='instagram' fluid>\n                  {t(\"Manage your diary\")}\n                </Button>\n              ) : (\n                <div className='ui five buttons'>\n                 \n                      <Button\n                        as={Link}\n                        to={`/createDiaryEntry/${activity.id}`}\n                        color='yellow'\n                        basic\n                      >\n                       {t(\"New Day\")}\n                      </Button>\n                   \n                      <Button\n                        as={Link}\n                        to={`/manage/${activity.id}`}\n                        color='pink'\n                        basic\n                      >\n                        {t(\"Edit\")}\n                      </Button>\n                  \n                      <Button\n                        onClick={() => {\n                          handleDeleteActivity(activity.id!);\n                        }}\n                        color='google plus'\n                      >\n                        {t(\"Delete\")}\n                      </Button>\n\n                      <Button\n                        onClick={() => {\n                          handleCompleteActivity(activity.id!);\n                        }}\n                        color='vk'\n                      >\n                        {t(\"Complete\")}\n                      </Button>\n  \n                      <Button\n                        onClick={() => {\n                          setManaging(false);\n                        }}\n                      >\n                        {t(\"Cancel\")}\n                      </Button>\n                   \n                </div>\n              )}\n            </Fragment>\n          ) : activity.isGoing \n          ? (\n            <Button\n              loading={loading}\n              onClick={() => handleCancelAttendance(activity.id)}\n            >\n              {t(\"Stop following this diary\")}\n            </Button>\n          ) : (\n            <Button\n              loading={loading}\n              onClick={() => handleAttendActivity(activity.id)}\n              color='teal'\n            >\n              {t(\"Become a part of it\")}\n            </Button>\n          )}\n        </Segment>\n      {/* )} */}\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityDetailedManager);\n","import React from \"react\";\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityDetailedInfo: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const { t } = useTranslation([\"diaries\"]);\n\n  return (\n    <Segment.Group raised>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='pencil alternate' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p style={{ whiteSpace: \"pre-wrap\" }}>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            \n            {t(\"Started in:\")}\n            <span>\n              {activity.city}, {activity.departure}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='map pin' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"Going to:\")} <span>{activity.destination}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='globe' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"In country:\")}\n            <span>{activity.countryName}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='gem outline' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"In category:\")}\n            <span>{activity.category}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='motorcycle' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"You are driving:\")}\n            <span>{activity.motorcycleBrandName}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityDetailedInfo;\n","import { formatDistance } from \"date-fns\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Grid,\n  GridColumn,\n  Header,\n  Image,\n  Label,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IActivity, IDiaryEntry } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  diary: IDiaryEntry;\n  activity: IActivity;\n}\nconst SeeDiaryEntry: React.FC<IProps> = ({ diary, activity }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { closeModal } = rootStore.modalStore;\n  const { deleteDiaryEntry } = rootStore.activityStore;\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n\n  const { diaryEntries } = activity;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const [actualDiary, setActualDiary] = useState(diary);\n\n  const counter = parseInt(actualDiary.dayNumber);\n  const numberDiaries = activity.diaryEntries.length;\n\n  const handleChange = async (diaryDay: number) => {\n    var diary: IDiaryEntry = diaryEntries.find(\n      (diary) => parseInt(diary.dayNumber) === diaryDay\n    )!;\n    setActualDiary(diary);\n  };\n\n  const handleDeleteEntry = async (id: string) => {\n    deleteDiaryEntry(diary, activity);\n  };\n\n  return (\n    <Fragment>\n      <Container text>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          <Grid>\n            <Grid.Column width={3}>\n              <Image src={host.image} size='tiny' circular />\n              <p>{t(\"You are driving:\")} {activity.motorcycleBrandName}</p>\n            </Grid.Column>\n            <Grid.Column width={10}>\n              <Header as='h2' color='pink'>\n                {t(\"Day\")} {actualDiary.dayNumber} {t(\"of\")} {activity.title}\n              </Header>\n              <p>\n                {\" \"}\n                {t(\"Published\")}{\" \"}\n                {formatDistance(new Date(actualDiary.entryDate), new Date(), {\n                  addSuffix: true,\n                })}\n              </p>\n              <Header.Subheader color='pink'>\n                <Link\n                  to={`/profile/${host.username}`}\n                  onClick={() => closeModal()}\n                >\n                  {t(\"by\")} {host.displayName}\n                </Link>\n                <p>\n                  {\" \"}\n                  {t(\"Started in\")} {activity.city}, {activity.countryName}\n                </p>\n                <p>\n                  {\" \"}\n                  {t(\"At the moment in\")} {actualDiary.locationCity},{\" \"}\n                  {actualDiary.locationCountry}\n                </p>\n              </Header.Subheader>\n            </Grid.Column>\n            <Grid.Column width={3} style={{ color: \"red\" }}>\n              <Grid.Row>\n                <Image\n                  src={activity.motorcycleBrandLogoUrl}\n                  size='tiny'\n                  circular\n                />\n              </Grid.Row>\n              {activity.isHost && (\n                <Grid.Row>\n                  <GridColumn width={8}>\n                    <Button\n                      circular\n                      icon='edit outline'\n                      as={Link}\n                      to={`/manageDiaryEntry/${actualDiary.id}/${activity.id}`}\n                      onClick={() => closeModal()}\n                    />\n                  </GridColumn>\n                  <GridColumn width={8}>\n                    {Number(actualDiary.dayNumber) === numberDiaries && (\n                      <Button\n                        circular\n                        icon='delete'\n                        onClick={() => {\n                          handleDeleteEntry(actualDiary.id);\n                          closeModal();\n                        }}\n                      />\n                    )}\n                  </GridColumn>\n                </Grid.Row>\n              )}\n            </Grid.Column>\n          </Grid>\n        </Segment>\n        <Segment>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column computer={9} mobile={16}>\n                <Image src={actualDiary.photoUrl} size='large' floated='left' />\n              </Grid.Column>\n              <Grid.Column computer={7} mobile={16}>\n                <Segment attached>\n                  <p>{t(\"At the moment in\")} {actualDiary.locationCity}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Feeling\")} {actualDiary.mood}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Road was\")} {actualDiary.road}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Weather was\")} {actualDiary.road}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Made\")} {actualDiary.numberOfKilometers} {t(\"kilometers\")} </p>\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Segment attached>\n                <Label content={t(\"What happened today?\")}/>\n                <p style={{ whiteSpace: \"pre-wrap\" }}>{actualDiary.body}</p>\n              </Segment>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column width={5}>\n                <Button\n                  className='mobile hidden'\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) - 1)\n                  }\n                  content={t('Previous day')}\n                  icon='angle left'\n                  disabled={counter === 1}\n                />\n                <Button\n                  className='mobile only'\n                  circular\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) - 1)\n                  }\n                  icon='angle left'\n                  disabled={counter === 1}\n                />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <Button fluid onClick={() => closeModal()} content={t('Quit')} />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <Button\n                  className='mobile hidden'\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) + 1)\n                  }\n                  content={t(\"Next day\")}\n                  icon='angle right'\n                  disabled={counter === numberDiaries}\n                />\n                <Button\n                  className='mobile only'\n                  fluid\n                  circular\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) + 1)\n                  }\n                  icon='angle right'\n                  disabled={counter === numberDiaries}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default SeeDiaryEntry;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport {\n  Segment,\n  List,\n  Item,\n  Divider,\n  SegmentGroup,\n} from \"semantic-ui-react\";\nimport { IActivity, IDiaryEntry } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SeeDiaryEntry from \"../modals/SeeDiaryEntry\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activity: IActivity;\n}\nconst ActivityDetailedSidebarRight: React.FC<IProps> = ({ activity }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  const { diaryEntries } = activity;\n\n  const handleOpenDiaryModal = (diary: IDiaryEntry) => {\n    openModal(<SeeDiaryEntry diary={diary} activity={activity} />);\n  };\n  //mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()`\n  // to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())`\n  //to sort & update in place\n  const diariesByDate = diaryEntries\n    .slice()\n    .sort((a, b) => parseInt(b.dayNumber) - parseInt(a.dayNumber));\n\n    const day = t(\"Day\");\n    const days = t(\"Days\");\n\n  return (\n    <SegmentGroup raised>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {diaryEntries.length} {diaryEntries.length === 1 ? day : days}{\" \"}\n        {t(\"passed\")}\n      </Segment>\n      <Segment attached textAlign='center'>\n        <List relaxed divided>\n          {diariesByDate.map((entry) => (\n            <div key={entry.id}>\n              <Item\n                as='h4'\n                onClick={() => handleOpenDiaryModal(entry)}\n                style={{ cursor: \"pointer\" }}\n              >\n                {t(\"Day number \")}\n                {entry.dayNumber}\n                {/* <Image\n                  size='small'\n                  src={entry.photoUrl || \"/assets/user.png\"}\n                /> */}\n                <div className='ui segment'>\n                  <img\n                    className='ui centered medium image'\n                    src={entry.photoUrl || \"/assets/user.png\"}\n                    alt='DayPhoto'\n                  />\n                </div>\n              </Item>\n              <Divider horizontal />\n            </div>\n          ))}\n        </List>\n      </Segment>\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityDetailedSidebarRight);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\"; // , { Fragment, useContext }\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header } from \"semantic-ui-react\"; //, Image\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n  const { t } = useTranslation([\"diaries\"]);\n\n  return (\n    <Segment style={{ padding: \"0\" }} raised>\n      <Segment textAlign='center'>\n        <Header as='h2'>\n          {activity.title}\n          <Header.Subheader>\n            <span>\n              {t(\"Hosted by\")}{\" \"}\n              <Link to={`/profile/${host.username}`}>\n                <strong>{host.displayName}</strong>\n              </Link>\n            </span>\n            <span>\n              {\", \"} on {format(activity.date, \"eeee do MMMM\")}{\" \"}\n            </span>\n          </Header.Subheader>\n        </Header>\n      </Segment>\n    </Segment>\n  );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  List,\n  Image,\n} from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\n// import { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst AllAttendeesList: React.FC<IProps> = ({ attendees }) => {\n  // const rootStore = useContext(RootStoreContext);\n\n  // const { closeModal } = rootStore.modalStore;\n\n  return (\n\n        <List animated relaxed verticalAlign='middle' >\n          {attendees.map((attendee) => (\n            <List.Item key={attendee.username} style={{ position: \"relative\" }}>\n       \n              \n              <Image avatar size='mini' src={attendee.image || \"/assets/user.png\"} />\n\n              <List.Content verticalAlign='middle'>\n                <List.Header as='h4'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </List.Header>\n                {attendee.following && (\n                  <List.Description style={{ color: \"green\" }}>Following</List.Description>\n                )}\n              </List.Content>\n            </List.Item>\n          ))}\n        </List>\n  );\n};\n\n\nexport default observer(AllAttendeesList);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  List,\n  Item,\n  Label,\n  Image,\n  SegmentGroup,\n} from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport AllAttendeesList from \"../modals/AllAttendeesList\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst ActivityDetailedSidebarLeft: React.FC<IProps> = ({ attendees }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal, setSize } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const handleShowAll = () => {\n    setSize(\"mini\");\n    openModal(<AllAttendeesList attendees={attendees} />);\n  };\n\n  const person = t(\"Person\");\n  const persons = t(\"People\");\n  return (\n    <SegmentGroup raised>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {attendees.length} {attendees.length === 1 ? person : persons }{\" \"}\n        {t(\"following\")}\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.slice(0, 10).map((attendee) => (\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\n              {attendee.isHost && (\n                <Label\n                  style={{ position: \"absolute\" }}\n                  color='teal'\n                  corner='right'\n                >\n                  {t(\"Host\")}\n                </Label>\n              )}\n\n              <Image size='mini' src={attendee.image || \"/assets/user.png\"} />\n\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h4'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && (\n                  <Item.Extra style={{ color: \"green\" }}>{t(\"Following\")}</Item.Extra>\n                )}\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n        {attendees.length > 10 && (\n          <span style={{ cursor: \"pointer\" }} onClick={handleShowAll}>\n            {t(\"and\")} {attendees.length - 10} {t(\"more\")}\n          </span>\n        )}\n      </Segment>\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityDetailedSidebarLeft);\n","import { observer } from \"mobx-react-lite\";\nimport React, {useContext, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedManager from \"./ActivityDetailedManager\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebarRight \nfrom \"./ActivityDetailedSidebarRight\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedSidebarLeft \nfrom \"./ActivityDetailedSidebarLeft\";\nimport { useTranslation } from \"react-i18next\";\n\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadActivity, activity, loadingInitial} = rootStore.activityStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  useEffect(() => {\n    loadActivity(match.params.id);\n  }, [loadActivity, match.params.id, history]);\n\n  if (loadingInitial || !activity ) return <LoadingComponent content={t('Loading activity...')} />;\n\n\n  return (\n    <Grid>\n      <Grid.Column computer={3} mobile={16} className={'mobile hidden'}>\n      <ActivityDetailedSidebarLeft attendees={activity!.attendees} />\n      </Grid.Column>\n      <Grid.Column computer={10} mobile={16}>\n \n          <ActivityDetailedHeader activity={activity!} />\n          <ActivityDetailedInfo activity={activity!} />\n          <ActivityDetailedManager activity={activity!} />\n          <ActivityDetailedChat />\n\n      </Grid.Column>\n      <Grid.Column computer={3} mobile={16} className={'hideScroll'} >\n          <ActivityDetailedSidebarRight activity={activity!} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form, Grid, Header } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  hasLengthLessThan,\n  isRequired,\n} from \"revalidate\";\n\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst validate = combineValidators({\n  content: composeValidators(\n    isRequired(\"Body\"),\n    hasLengthGreaterThan(1)({\n      message: \"Body needs to be at least 2 characters\",\n    }),\n    hasLengthLessThan(255)({\n      message: \"Maximum number of characters is 500\",\n    })\n  )(),\n});\n\ninterface IProps {\n  recipientUsername: string;\n  username: string;\n}\n\nconst ContactForm: React.FC<IProps> = ({ recipientUsername, username }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { sendMessage } = rootStore.privateMessageStore;\n  const { closeModal } = rootStore.modalStore;\n\n  const [loading] = useState(false);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let messageToSend = {\n      recipientUsername: recipientUsername,\n      username: username,\n      content: values.content,\n    };\n    sendMessage(messageToSend);\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <FinalForm\n          validate={validate}\n          onSubmit={handleFinalFormSubmit}\n          render={({ handleSubmit, invalid, pristine }) => (\n            <Form onSubmit={handleSubmit} loading={loading}>\n              <Header\n                as='h2'\n                content='Send message'\n                color='teal'\n                textAlign='center'\n              />\n              <Field\n                name='content'\n                rows={4}\n                placeholder='content'\n                component={TextAreaInput}\n              />\n              <Button\n                disabled={invalid || pristine}\n                floated='right'\n                color='teal'\n                type='submit'\n                content='submit'\n              />\n              <Button\n                floated='right'\n                disabled={loading}\n                type='button'\n                content='cancel'\n                onClick={() => closeModal()}\n              />\n            </Form>\n          )}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ContactForm);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    productId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ productId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteProduct } = rootStore.productStore;\n  const { closeModal } = rootStore.modalStore;\n\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteProduct = (id: string) => {\n    deleteProduct(id);\n    closeModal();\n    history.push('/shop');\n  };\n\n  const cancelDeleteProduct = () => {\n    closeModal();\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteProduct(productId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteProduct()}\n            content={t('No, cancel')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Grid, Icon, Image, Button, Label } from \"semantic-ui-react\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ContactForm from \"../../profiles/forms/ContactForm\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst ProductDetailedInfo: React.FC<{ product: IProduct }> = ({ product }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n  const {\n    followProduct,\n    productFollowed,\n    unfollowProduct,\n    setProductFollowed,\n    markSold,\n  } = rootStore.productStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { user } = rootStore.userStore;\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    product.viewers.forEach((viewer) => {\n      if (viewer.username === user?.userName) {\n        setProductFollowed();\n      }\n    });\n  }, [\n    product.sellerUsername,\n    product.id,\n    setProductFollowed,\n    product.viewers,\n    user,\n  ]);\n\n  const handleDeleteProduct = (id: string) => {\n    openModal(<ConfirmDelete productId={id} />);\n  };\n  const handleFollowProduct = (id: string) => {\n    followProduct(id, user!.userName, user!.displayName);\n    addFeedItem(id, \"Added to favorites\");\n  };\n  const handleMarkSold = (id: string) => {\n    markSold(id, product);\n    addFeedItem(id, \"Marked Sold\");\n  };\n  const handleUnfollowProduct = (id: string) => {\n    unfollowProduct(id);\n    addFeedItem(id, \"Removed from favorites\");\n  };\n  const styles = { minWidth: \"10em\" };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Grid stackable columns={2}>\n      <Grid.Column width={8}>\n        <Segment raised>\n          <Grid>\n            <Grid.Column width={2}>\n              <Icon size='large' color='grey' name='info' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Title\")}{\" \"}\n              </Label>\n              {product.title}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='monero' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Price\")}{\" \"}\n              </Label>\n              {product.price} €\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='calendar' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Published\")}{\" \"}\n              </Label>\n              {formatDistance(new Date(product.datePublished), new Date(), {\n                addSuffix: true,\n              })}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='certificate' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Category\")}{\" \"}\n              </Label>\n              {product.category}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='copyright' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Brand\")}{\" \"}\n              </Label>\n              {product.brand}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='id badge outline' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Model\")}{\" \"}\n              </Label>\n              {product.model}\n            </Grid.Column>\n          </Grid>\n          {product.sellerUsername !== user?.userName && (\n            <>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='location arrow' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"City\")}{\" \"}\n                  </Label>\n                  {product.city}\n                </Grid.Column>\n              </Grid>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='map marker alternate' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"Country\")}{\" \"}\n                  </Label>\n                  {product.countryName}\n                </Grid.Column>\n              </Grid>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='user' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"Seller\")}{\" \"}\n                  </Label>\n                  <Link to={`/profile/${product.sellerUsername}`}>\n                    {\" \"}\n                    {product.sellerDisplayName}\n                  </Link>\n                </Grid.Column>\n              </Grid>\n              {product.phoneNumber && (\n                <Grid verticalAlign='middle'>\n                  <Grid.Column width={2}>\n                    <Icon name='phone' size='large' color='grey' />\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                    <Label color='yellow' horizontal>\n                      {t(\"Contact number\")}{\" \"}\n                    </Label>\n                    {product.phoneNumber}\n                  </Grid.Column>\n                </Grid>\n              )}\n              {product.description && (\n                <Grid verticalAlign='middle'>\n                  <Grid.Column width={2}>\n                    <Icon name='info circle' size='large' color='grey' />\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                    <Label style={styles} color='yellow' horizontal>\n                      {t(\"Description\")}{\" \"}\n                    </Label>\n                    {product.description}\n                  </Grid.Column>\n                </Grid>\n              )}\n            </>\n          )}\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={16}>\n              {product.sellerUsername !== user?.userName ? (\n                <div className='ui two buttons'>\n                  <Button\n                    basic\n                    content={t(\"Contact the seller\")}\n                    color='blue'\n                    onClick={() => {\n                      openModal(\n                        <ContactForm\n                          recipientUsername={product.sellerUsername}\n                          username={user?.userName!}\n                        />\n                      );\n                    }}\n                  />\n                  <Button\n                    color='instagram'\n                    content={\n                      productFollowed === true\n                        ? t(\"Unfollow this product\")\n                        : t(\"Follow this product\")\n                    }\n                    onClick={() => {\n                      if (!productFollowed) {\n                        handleFollowProduct(product.id);\n                      } else {\n                        handleUnfollowProduct(product.id);\n                      }\n                    }}\n                  />\n                </div>\n              ) : (\n                <Fragment>\n                  {!managing ? (\n                    <Button onClick={toggleManaging} color='instagram' fluid>\n                      {t(\"Manage\")}\n                    </Button>\n                  ) : (\n                    <div className='ui four buttons'>\n                      <Button\n                        basic\n                        color='olive'\n                        content={t(\"Mark sold\")}\n                        disabled={product.isSold}\n                        onClick={() => handleMarkSold(product.id!)}\n                      />\n                        <Button\n                        as={Link}\n                        to={`/manageProduct/${product.id}`}\n                        color='pink'\n                        basic\n                      >\n                        {t(\"Edit\")}\n                      </Button>\n\n                      <Button\n                        onClick={() => {\n                          handleDeleteProduct(product.id!);\n                        }}\n                        color='red'\n                      >\n                        {t(\"Delete\")}\n                      </Button>\n\n                    \n                      <Button\n                        onClick={() => {\n                          setManaging(false);\n                        }}\n                      >\n                        {t(\"Cancel\")}\n                      </Button>\n                    </div>\n                  )}\n                </Fragment>\n              )}\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </Grid.Column>\n\n      <Grid.Column width={8}>\n        <Segment raised>\n          {product.isSold && (\n            <Label style={{ position: \"absolute\" }} color='red' corner='right'>\n              SOLD\n            </Label>\n          )}\n          <Image src={product.photoUrl} fluid />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductDetailedInfo);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ProductDetailsStatistics: React.FC<{ product: IProduct }> = ({\n  product,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n\n    loadingInitial,\n    visitCounter,\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    visitCounter(product.id);\n  }, [product, visitCounter]);\n\n  if (loadingInitial || !product)\n    return <LoadingComponent content={t('Loading product details...')} />;\n\n  return (\n    <Segment raised>\n      <Header as='h2' icon textAlign='center'>\n        <Icon name='shopping basket' circular />\n        <Header.Content>{product.title}</Header.Content>\n        <Header sub>\n          {t(\"The\")} {product.title} {t(\"is published\")}{\" \"}\n          {formatDistance(new Date(product.datePublished), new Date(), {\n            addSuffix: true,\n          })}\n          , {t(\"seen\")} {product.numberSeen} {t(\"times and expires\")} {\" \"} \n          {formatDistance(new Date(product.inactivityExpirationDate), new Date(), {\n            addSuffix: true,\n          })}\n           \n        </Header>\n\n        <Header.Subheader>\n          {product.numberFollowed !== 0 &&\n            t(\"The\") +\n              product.title +\n              t(\"is in favorites of\") +\n              (product.numberFollowed > 1\n                ? product.numberFollowed + t(\"people\")\n                : product.numberFollowed + t(\"person\"))}\n        </Header.Subheader>\n      </Header>\n    </Segment>\n  );\n};\n\nexport default observer(ProductDetailsStatistics);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductDetailedInfo from \"./ProductDetailedInfo\";\nimport ProductDetailsStatistics from \"./ProductDetailsStatistics\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ProductDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    product,\n    loadProduct,\n    loadingInitial,\n    visitCounter\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    loadProduct(match.params.id); \n    visitCounter(match.params.id);\n  }, [loadProduct, match.params.id, visitCounter]); \n\n  if (loadingInitial || !product )\n    return <LoadingComponent content={t('Loading product details...')} />;\n\n  return (\n    <Grid>\n      <Grid.Row>\n          <Grid.Column width={16}>\n         \n          <ProductDetailsStatistics product={product}/>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n\n      <Grid.Column width={16}>\n        <ProductDetailedInfo product={product} />\n      </Grid.Column>\n      </Grid.Row>\n      \n      \n    </Grid>\n  );\n};\n\nexport default observer(ProductDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to the main page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../stores/rootStore';\n\nconst ModalContainer = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {modal: {open, body, size}, closeModal } = rootStore.modalStore;\n  return (\n    <Modal open={open} onClose={closeModal} size={size}>\n      <Modal.Content>{body}</Modal.Content>\n     \n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useTranslation } from 'react-i18next';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface IProps {\n  setFiles: (files: object[]) => void;\n}\n\nconst dropZoneStyles = {\n  border: 'dashed 3px',\n  borderColor: '#eee',\n  borderRadius: '5px',\n  paddingTop: '30px',\n  textAlign: 'center' as 'center',\n  height: '200px',\n};\n\nconst dropZoneActive = {\n  borderColor: 'green',\n};\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    setFiles(\n      acceptedFiles.map((file: any) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n    );\n  }, [setFiles]);\n  const { t } = useTranslation([\"widget\"]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style={\n        isDragActive ? { ...dropZoneStyles, ...dropZoneActive } : dropZoneStyles\n      }\n    >\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge'/>\n      <Header content={t('Drop image here or click to select file')}/>\n    </div>\n  );\n};\n\nexport default PhotoWidgetDropzone;\n","import React, { useRef } from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n  setImage: (file: Blob) => void;\n  imagePreview: string;\n}\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\n  const cropper = useRef<Cropper>(null);\n\n  const cropImage = () => {\n    if (\n      cropper.current &&\n      typeof cropper.current.getCroppedCanvas() === 'undefined'\n    ) {\n      return;\n    }\n    cropper &&\n      cropper.current &&\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n        setImage(blob);\n      }, 'image/jpeg');\n  };\n  return (\n    <Cropper\n      ref={cropper}\n      src={imagePreview}\n      style={{ height: 200, width: '100%' }}\n      // Cropper.js options\n      initialAspectRatio={1 / 1}\n      preview='.img-preview'\n      guides={false}\n      viewMode={1}\n      dragMode='move'\n      scalable={true}\n      cropBoxMovable={true}\n      cropBoxResizable={true}\n      crop={cropImage}\n      //   ref={cropperRef}\n    />\n  );\n};\n\nexport default PhotoWidgetCropper;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { Header, Grid, Button } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\nimport { useTranslation } from \"react-i18next\";\n// import { RootStoreContext } from \"../../stores/rootStore\";\n\ninterface IProps {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n  const [files, setFiles] = useState<any[]>([]);\n  const [image, setImage] = useState<Blob | null>(null);\n\n  const { t } = useTranslation([\"widget\"]);\n\n\n  // == this is to clean up the uploaded file from memory ==\n  useEffect(() => {\n \n      return () => {\n        files.forEach((file) => URL.revokeObjectURL(file.preview));\n    };\n  });\n\n  return (\n    <Fragment>\n      <Grid>\n     \n\n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header color='teal' sub content={t('Step 1 - Add Photo')} />\n          <PhotoWidgetDropzone setFiles={setFiles} />\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header sub color='teal' content={t('Step 2 - Resize image')} />\n          {files.length > 0 && (\n            <PhotoWidgetCropper\n              setImage={setImage}\n              imagePreview={files[0].preview}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={1} />\n       \n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header sub color='teal' content={t('Step 3 - Preview & Upload')} />\n          {files.length > 0 && (\n            <Fragment>\n              <div\n                className='img-preview'\n                style={{ minHeight: '200px', overflow: 'hidden' }}\n              />\n              <Button.Group widths={2}>\n                <Button\n                  positive\n                  icon='check'\n                  loading={loading}\n                  onClick={() => uploadPhoto(image!)}\n                />\n                <Button \n                icon='close'\n                disabled={loading}\n                onClick={() => setFiles([])}\n                />\n              </Button.Group>\n            </Fragment>\n          )}\n        </Grid.Column>       \n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PhotoUploadWidget);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst ProfilePhotos = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    isCurrentUser,\n    uploadPhoto,\n    uploadingPhoto,\n    setMainPhoto,\n    loading,\n    deletePhoto,\n  } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\n  const [target, setTarget] = useState<string | undefined>(undefined);\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\n    undefined\n  );\n  const handleUplaodImage = (photo: Blob) => {\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\n  };\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n          <Header floated='left' icon='image' content={t('Photos')} />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={addPhotoMode ? t('Cancel') : t('Add Photo')}\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handleUplaodImage}\n              loading={uploadingPhoto}\n            />\n          ) : (\n            <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n              {profile &&\n                profile.photos.map((photo) => (\n                  <Card key={photo.id}>\n                    <Image src={photo.url} />\n                    {isCurrentUser && (\n                      <Button.Group fluid widths={2}>\n                        <Button\n                          name={photo.id}\n                          basic\n                          positive\n                          content={t('Main')}\n                          onClick={(e) => {\n                            setMainPhoto(photo);\n                            setTarget(e.currentTarget.name);\n                          }}\n                          disabled={photo.isMain}\n                          loading={loading && target === photo.id}\n                        />\n                        <Button\n                          name={photo.id}\n                          disabled={photo.isMain}\n                          onClick={(e) => {\n                            deletePhoto(photo);\n                            setDeleteTarget(e.currentTarget.name)\n                          }}\n                          loading={loading && deleteTarget === photo.id}\n                          basic\n                          negative\n                          icon='trash'\n                        />\n                      </Button.Group>\n                    )}\n                  </Card>\n                ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfilePhotos);\n","import React from 'react';\nimport { IProfile } from '../../app/models/profile';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { observer } from 'mobx-react-lite';\nimport { combineValidators, isRequired } from 'revalidate';\nimport { Form, Button } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport TextAreaInput from '../../app/common/form/TextAreaInput';\nimport { useTranslation } from 'react-i18next';\n\n\ninterface IProps {\n  updateProfile: (profile: Partial<IProfile>) => void;\n  profile: IProfile;\n}\n\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    displayName: isRequired({ message: t(\"Display Name is required\") })\n  });\n  \n  return (\n    <FinalForm\n      onSubmit={updateProfile}\n      validate={validate}\n      initialValues={profile!}\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder={t('Display Name')}\n            value={profile!.displayName}\n          />\n          <Field\n            name='bio'\n            component={TextAreaInput}\n            rows={3}\n            placeholder={t('Bio')}\n            value={profile!.bio}\n          />\n          <Button \n            loading={submitting}\n            floated='right'\n            disabled={invalid || pristine}\n            positive\n            content={t('Update profile')}\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default observer(ProfileEditForm);","import React, { useContext, useState } from 'react';\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileEditForm from './ProfileEditForm';\nimport { observer } from 'mobx-react-lite';\nimport { useTranslation } from 'react-i18next';\n\nconst ProfileDescription = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  const [editMode, setEditMode] = useState(false);\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={t(\"About\") + \" \" + profile!.displayName}\n          />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={editMode ? t('Cancel') : t('Edit Profile')}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\n          ) : (\n            <span>{profile!.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileDescription);","import React from 'react';\nimport { Card, Image, Icon} from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IProfile } from '../../app/models/profile';\nimport { useTranslation } from 'react-i18next';\n\ninterface IProps{\n    profile: IProfile\n}\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\n  const { t } = useTranslation([\"social\"]);\n\n  return (\n    <Card as={Link} to={`/profile/${profile.username}`}>\n      <Image src={profile.image || '/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName || 'display name'}</Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div>\n          <Icon name='user' />\n          {profile.followersCount} {t(\"Followers\")}\n        </div>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default ProfileCard;\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    followings,\n    loading,\n    activeTab\n  } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  return (\n    <Tab.Pane loading={loading}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user circle'\n            content={\n              activeTab === 7\n                ? t(\"People following\") +' '+ profile!.displayName \n                : t(\"People\") + ' ' + profile!.displayName + \" \" + t(\"is following\")\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n              {followings.map((profile) => (\n                  <ProfileCard key={profile.username} profile={profile}/>\n              ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default ProfileFollowings;\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { useTranslation } from 'react-i18next';\n\n\nconst ProfileEvents = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserActivities,\n    profile,\n    loadingActivities,\n    userActivities\n  } = rootStore.profileStore!;\n\n  const { t } = useTranslation([\"social\"]);\n  const panes = [\n    { menuItem: t('Active'), pane: { key: 'active' } },\n    { menuItem: t('Completed'), pane: { key: 'completed' } },\n    { menuItem: t('In future'), pane: { key: 'in future' } },\n  ];\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 0:\n        predicate = 'active';\n        break;\n      case 1:\n        predicate = 'completed';\n        break;\n      case 2:\n        predicate = 'in future';\n        break;\n      default:\n        break;\n    }\n    loadUserActivities(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='blogger' content={t('Motorcycle Diaries')} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userActivities.map((activity: IUserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.id}`}\n                key={activity.id}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileEvents);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { IUserMotofy } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ProfileMotofies = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserMotofies, profile, loadingMotofies, userMotofies } =\n    rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n  const panes = [\n    { menuItem: t(\"Embraced\"), pane: { key: \"iEmbraced\" } },\n    { menuItem: t(\"Published\"), pane: { key: \"iPublished\" } },\n    { menuItem: t(\"Rated\"), pane: { key: \"iRated\" } },\n  ];\n\n  useEffect(() => {\n    loadUserMotofies(profile!.username);\n  }, [loadUserMotofies, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iPublished\";\n        break;\n      case 2:\n        predicate = \"iRated\";\n        break;\n      default:\n        predicate = \"iEmbraced\";\n        break;\n    }\n    loadUserMotofies(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingMotofies}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='motorcycle' content={\"Motofies\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userMotofies.map((motofy: IUserMotofy) => (\n              <Card as={Link} to={`/gallery/${motofy.id}`} key={motofy.id}>\n                <Image\n                  src={motofy.photoUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{motofy.name}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(motofy.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(motofy.yearOfProduction), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileMotofies);\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport {  IUserForumpost } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { useTranslation } from 'react-i18next';\n\n\nconst ProfileForumposts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserForumposts,\n    profile,\n    loadingForumposts,\n    userForumposts\n  } = rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t('Asked'), pane: { key: 'iAsked' } },\n    { menuItem: t('Rated'), pane: { key: 'iRated' } },\n  ];\n  useEffect(() => {\n    loadUserForumposts(profile!.username);\n  }, [loadUserForumposts, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'iRated';\n        break;\n      default:\n        predicate = 'iAsked';\n        break;\n    }\n    loadUserForumposts(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingForumposts}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='question circle' content={'Forumposts'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userForumposts.map((forumpost: IUserForumpost) => (\n              <Card\n                as={Link}\n                to={`/forum/${forumpost.id}`}\n                key={forumpost.id}\n              >\n                <Image\n                  src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{forumpost.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(forumpost.dateAdded), 'do LLL')}</div>\n                    <div>{format(new Date(forumpost.dateAdded), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileForumposts);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { IUserMechanic } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ProfileMechanics = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserMechanics, profile, loadingMechanics, userMechanics } =\n  rootStore.profileStore!;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t(\"Published\"), pane: { key: \"iPublished\" } },\n    { menuItem: t(\"Rated\"), pane: { key: \"iRated\" } },\n    { menuItem: t(\"Recommended\"), pane: { key: \"iRecommend\" } },\n  ];\n\n  useEffect(() => {\n    loadUserMechanics(profile!.username);\n  }, [loadUserMechanics, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    // let predicate = undefined ?? 'iEmbraced';\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iRated\";\n        break;\n      case 2:\n        predicate = \"iRecommend\";\n        break;\n      default:\n        predicate = \"iPublished\";\n        break;\n    }\n    loadUserMechanics(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingMechanics}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='servicestack' content={\"Mechanics\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userMechanics.map((mechanic: IUserMechanic) => (\n              <Card\n                as={Link}\n                to={`/mechanics/${mechanic.id}`}\n                key={mechanic.id}\n              >\n                <Image\n                  src={mechanic.photoUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{mechanic.name}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(mechanic.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(mechanic.datePublished), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileMechanics);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport {  IUserProduct } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ProfileProducts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserProducts, profile, loadingProducts, userProducts } =\n  rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t(\"I am selling\"), pane: { key: \"iAmSelling\" } },\n    { menuItem: t(\"I sold\"), pane: { key: \"iSold\" } },\n  ];\n  useEffect(() => {\n    loadUserProducts(profile!.username);\n  }, [loadUserProducts, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iSold\";\n        break;\n      case 2:\n        predicate = \"iAmSelling\";\n        break;\n      default:\n       \n        break;\n    }\n    loadUserProducts(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingProducts}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='calendar' content={\"Products\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userProducts.map((product: IUserProduct) => (\n              <Card\n                as={Link}\n                to={`/product/${product.id}`}\n                key={product.id}\n              >\n                <Image\n                  src={product.pictureUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{product.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(product.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(product.datePublished), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileProducts);\n","import React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport ProfilePhotos from \"./ProfilePhotos\";\nimport ProfileDescription from \"./ProfileDescription\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileMotofies from \"./ProfileMotofies\";\nimport ProfileForumposts from \"./ProfileForumposts\";\nimport ProfileMechanics from \"./ProfileMechanics\";\nimport ProfileProducts from \"./ProfileProducts\";\nimport { useTranslation } from \"react-i18next\";\n\n// const panes = [\n//   { menuItem: \"About\", render: () => <ProfileDescription /> },\n//   { menuItem: \"Photos\", render: () => <ProfilePhotos /> },\n//   {\n//     menuItem: \"Motofies!\",\n//     render: () => <ProfileMotofies />,\n//   },\n//   {\n//     menuItem: \"Motorcycle Diaries\",\n//     render: () => <ProfileActivities />,\n//   },\n//   {\n//     menuItem: \"Forumposts\",\n//     render: () => <ProfileForumposts />,\n//   },\n//   {\n//     menuItem: \"Mechanics\",\n//     render: () => <ProfileMechanics />,\n//   },\n//   {\n//     menuItem: \"Products\",\n//     render: () => <ProfileProducts />,\n//   },\n//   {\n//     menuItem: \"Followers\",\n//     render: () => <ProfileFollowings />,\n//   },\n//   {\n//     menuItem: \"Followings\",\n//     render: () => <ProfileFollowings />,\n//   },\n// ];\nconst mobilePanes = [\n  {\n    menuItem: { key: \"About\", icon: \"user\" },\n    render: () => <ProfileDescription />,\n  },\n  {\n    menuItem: { key: \"Photos\", icon: \"image\" },\n    render: () => <ProfilePhotos />,\n  },\n  {\n    menuItem: { key: \"Motofies!\", icon: \"motorcycle\" },\n    render: () => <ProfileMotofies />,\n  },\n  {\n    menuItem: { key: \"Motorcycle Diaries\", icon: \"blogger\" },\n    render: () => <ProfileActivities />,\n  },\n  {\n    menuItem: { key: \"Forumposts\", icon: \"question circle\" },\n    render: () => <ProfileForumposts />,\n  },\n  {\n    menuItem: { key: \"Mechanics\", icon: \"servicestack\" },\n    render: () => <ProfileMechanics />,\n  },\n  {\n    menuItem: { key: \"Products\", icon: \"shopping bag\" },\n    render: () => <ProfileProducts />,\n  },\n  {\n    menuItem: { key: \"Followers\", icon: \"user circle\" },\n    render: () => <ProfileFollowings />,\n  },\n  {\n    menuItem: { key: \"Followings\", icon: \"users\" },\n    render: () => <ProfileFollowings />,\n  },\n];\n\ninterface IProps {\n  setActiveTab: (activeIndex: any) => void;\n}\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\n\n  const { t } = useTranslation([\"social\"]);\n\n\n  const panes = [\n    { menuItem: t(\"About\"), render: () => <ProfileDescription /> },\n    { menuItem: t(\"Photos\"), render: () => <ProfilePhotos /> },\n    {\n      menuItem: \"Motofies!\",\n      render: () => <ProfileMotofies />,\n    },\n    {\n      menuItem: t(\"Motorcycle Diaries\"),\n      render: () => <ProfileActivities />,\n    },\n    {\n      menuItem: t(\"Forumposts\"),\n      render: () => <ProfileForumposts />,\n    },\n    {\n      menuItem: t(\"Mechanics\"),\n      render: () => <ProfileMechanics />,\n    },\n    {\n      menuItem: t(\"Products\"),\n      render: () => <ProfileProducts />,\n    },\n    {\n      menuItem: t(\"Followers\"),\n      render: () => <ProfileFollowings />,\n    },\n    {\n      menuItem: t(\"Followings\"),\n      render: () => <ProfileFollowings />,\n    },\n  ];\n  return (\n    <>\n      <Tab\n        className='mobile hidden'\n        menu={{ fluid: true, vertical: true }}\n        menuPosition='right'\n        panes={panes}\n        onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n      />\n      {/* , style:{width: '0.9em' */}\n      <Tab\n        className='mobile only'\n        menu={{ fluid: true, style:{fontSize: '0.85em'} }}\n        panes={mobilePanes}\n        onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n      />\n    </>\n  );\n};\n// == so that the switching is disabled ==\n// activeIndex={1}\n\nexport default ProfileContent;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport {\n  Segment,\n  Item,\n  Header,\n  Button,\n  Grid,\n  Statistic,\n  Divider,\n  Reveal,\n  Icon,\n} from \"semantic-ui-react\";\nimport { IProfile } from \"../../app/models/profile\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport ContactForm from \"./forms/ContactForm\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  profile: IProfile;\n  loading: boolean;\n  isCurrentUser: boolean;\n  follow: (username: string) => void;\n  unfollow: (username: string) => void;\n}\nconst ProfileHeader: React.FC<IProps> = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { onlineUsers } = rootStore.presenceStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const handleSendMessage = () => {\n    openModal(\n      <ContactForm\n        recipientUsername={profile.username}\n        username={user!.userName}\n      />\n    );\n  };\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column computer={12} mobile={16}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size='tiny'\n                src={profile.image || \"/assets/user.png\"}\n              />\n              <Item.Content verticalAlign='middle'>\n                <Header as='h1'>\n                {onlineUsers.includes(profile.username) && (\n                  <Icon\n                    name='check circle'\n                    className='isOnline'\n                    bordered\n                    circular\n                    size='small'\n                  />\n                )}\n                  {profile.displayName}\n                \n                </Header>\n              </Item.Content>\n              {user?.userName !== profile.username && (\n                <Button\n                  circular\n                  content={t(\"Send Message\")}\n                  onClick={handleSendMessage}\n                />\n              )}\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column computer={4} mobile={16}>\n          <Statistic.Group widths={2}>\n            <Statistic label={t(\"Followers\")} value={profile.followersCount} />\n            <Statistic label={t(\"Following\")} value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          {!isCurrentUser && (\n            <Reveal animated='move'>\n              <Reveal.Content visible style={{ width: \"100%\" }}>\n                <Button\n                  fluid\n                  color='instagram'\n                  content={\n                    profile.following ? t(\"Following\") : t(\"Not following\")\n                  }\n                />\n              </Reveal.Content>\n              <Reveal.Content hidden>\n                <Button\n                  loading={loading}\n                  fluid\n                  basic\n                  color={profile.following ? \"red\" : \"instagram\"}\n                  content={profile.following ? t(\"Unfollow\") : t(\"Follow\")}\n                  onClick={\n                    profile.following\n                      ? () => [\n                          unfollow(profile.username),\n                          addFeedItem(\n                            uuid(),\n                            \"Unfollows You\",\n                            profile.username\n                          ),\n                        ]\n                      : () => [\n                          follow(profile.username),\n                          addFeedItem(\n                            uuid(),\n                            \"Started Following You\",\n                            profile.username\n                          ),\n                        ]\n                  }\n                />\n              </Reveal.Content>\n            </Reveal>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(ProfileHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\ninterface RouteParams {\n  username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {}\n\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    loadingProfile,\n    loadProfile,\n    follow,\n    unfollow,\n    isCurrentUser,\n    loading,\n    setActiveTab,\n  } = rootStore.profileStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  useEffect(() => {\n    loadProfile(match.params.username);\n  }, [loadProfile, match]);\n\n  if (loadingProfile) return <LoadingComponent content={t('Loading profile...')} />;\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <ProfileHeader\n          // username={user?.userName!}\n          profile={profile!}\n          isCurrentUser={isCurrentUser}\n          follow={follow}\n          unfollow={unfollow}\n          loading={loading}\n        />\n        <ProfileContent setActiveTab={setActiveTab} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProfilePage);\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Link } from \"react-router-dom\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { observer } from \"mobx-react-lite\";\nimport { formatDistance } from \"date-fns\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst GaleryDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, motofy } =\n    rootStore.motofyStore;\n\n  const connectionArgument = \"RecieveMotofyComment\";\n\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n\n    createHubConnection(motofy!.id, connectionArgument); \n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, motofy]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Comment this motofy\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{maxWidth:'none'}}>\n          {motofy &&\n            motofy.commentMotofies &&\n            motofy.commentMotofies.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  fluid\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    \n    </Fragment>\n  );\n};\n\nexport default observer(GaleryDetailedChat);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  motofyId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ motofyId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteMotofy } = rootStore.motofyStore;\n  const { closeModal } = rootStore.modalStore;\n  const {addFeedItem} = rootStore.feedStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteMotofy = (id: string) => {\n    addFeedItem(id, 'Deleted Motofy');\n    deleteMotofy(id);\n    closeModal();\n    history.push(`/gallery`);\n  };\n\n  const cancelDeleteMotofy = () => {\n    closeModal();\n  };\n\n  let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteMotofy(motofyId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteMotofy()}\n            content={t('No, keep it')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Item, Header, Button, Image, Icon } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst motofyImageStyle = {\n  filter: \"brightness(90%)\",\n  border: \"white solid 1px\",\n  borderRadius: \"5px\",\n};\n// const buttonOwnerStyle = {\n//   borderRadius: \"7px\",\n//   width: \"40%\",\n// };\nconst buttonVisitorStyle = {\n  borderRadius: \"7px\",\n  backgroundColor: \"rgb(29, 115, 152)\",\n};\n\nconst motofyImageTextStyle = {\n  position: \"absolute\",\n  top: \"10%\",\n  left: \"10%\",\n  fontSize: \"1rem\",\n  color: \"#FFD700\",\n  backgroundColor: \"lightblue\",\n  borderRadius: \"50%\",\n};\n\ninterface IProps {\n  motofy: IMotofy;\n}\nconst GaleryDetailedHeader: React.FC<IProps> = ({ motofy }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const { embraceMotofy, unembraceMotofy, loading } = rootStore.motofyStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  const handleDeleteMotofy = (id: string) => {\n    openModal(<ConfirmDelete motofyId={id} />);\n  };\n  const handleEmbraceMotofy = (id: string) => {\n    embraceMotofy(id);\n    addFeedItem(id, \"Embraced Motofy\");\n  };\n  const handleUnembraceMotofy = (id: string) => {\n    unembraceMotofy(id);\n    addFeedItem(id, \"Unembraced Motofy\");\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={motofy!.photoUrl || `/assets/placeholder.png`}\n          fluid\n          style={motofyImageStyle}\n        />\n        <Segment basic style={motofyImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='large'\n                  content={motofy.name}\n                  style={{ color: \"white\" }}\n                />\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached='bottom'>\n        {motofy.publisherUsername === user!.userName ? (\n          <Fragment>\n            {!managing ? (\n              <Button onClick={toggleManaging} color='instagram' fluid>\n                {t(\"Manage\")}\n              </Button>\n            ) : (\n              <div className='ui three buttons'>\n                <Button\n                  as={Link}\n                  to={`/manageGallery/${motofy.id}`}\n                  color='pink'\n                  basic\n                >\n                  {t(\"Edit\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    handleDeleteMotofy(motofy.id!);\n                  }}\n                  color='google plus'\n                \n                >\n                  {t(\"Delete\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    setManaging(false);\n                  }}\n                  // color='grey'\n                  // basic\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </div>\n            )}\n          </Fragment>\n        ) : motofy.embraced ? (\n          <Button\n            style={buttonVisitorStyle}\n            negative\n            loading={loading}\n            fluid\n            onClick={() => handleUnembraceMotofy(motofy.id!)}\n          >\n            {t(\"Embraced\")}\n          </Button>\n        ) : (\n          <Button\n            style={buttonVisitorStyle}\n            loading={loading}\n            fluid\n            onClick={() => handleEmbraceMotofy(motofy.id)}\n            color='teal'\n          >\n            <Icon name='heart' />\n            {t(\"Embrace\")}\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GaleryDetailedHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { Item, ItemExtra, Rating, RatingProps, Segment } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface IProps {\n  motofy: IMotofy;\n}\nconst GaleryDetailedRating: React.FC<IProps> = ({ motofy }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { rateMotofy } = rootStore.motofyStore;\n  const { user } = rootStore.userStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  let username = user?.userName;\n  const [rated, setRated] = useState(false);\n  const [userRated, setUserRated] = useState<string | number | undefined>();\n\n\n  useEffect(() => {\n\n    if(motofy.motofyScores.length > 0) {\n\n      if (motofy.motofyScores.some((x) => x.username === username)) {\n        setUserRated(\n          motofy.motofyScores.find((x) => x.username === username).score\n        );\n        setRated(true);\n      } \n     \n    }\n\n\n  }, [motofy.motofyScores, username]); \n\n\n  const handleRate = (e: any, rating: RatingProps) => {\n\n    rateMotofy(rating.rating, motofy, user);\n    setUserRated(rating.rating);\n    e.preventDefault();\n    setRated(true);\n  };\n  return (\n    <Segment.Group>\n      <Segment style={{\n          display: 'flex', \n          flexDirection: 'column', \n          textAlign: 'center', \n          justifyContent: 'space-around'}}>\n        <Item.Group>\n\n        <Item.Header>{t(\"Average Rating:\")} {motofy.averageRating}</Item.Header>\n        {motofy.publisherUsername !== user!.userName ? (\n          <Fragment>\n            <Rating\n              icon='star'\n              size='large'\n              onRate={(e, rating) => {\n                handleRate(e, rating);\n              }}\n              defaultRating={motofy.averageRating}\n              maxRating={5}\n              disabled={rated}\n            />\n            {userRated ? (\n              <ItemExtra>{t(\"You Gave This Motofy \")} {userRated} {t(\"Stars\")}</ItemExtra>\n            ) : (\n              <ItemExtra>{t(\"You Have Not Rated Yet\")}</ItemExtra>\n            )}\n          </Fragment>\n        ) : (\n          <Fragment>{t(\"NB: You cannot rate your own motofy\")}</Fragment>\n        )}\n        </Item.Group>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GaleryDetailedRating);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, List, Item, Label, Image, Grid } from \"semantic-ui-react\";\nimport { IEmbracer } from \"../../../app/models/motofy\";\nimport { useTranslation } from \"react-i18next\";\n\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\n\nconst GaleryDetailedSidebar: React.FC<IProps> = ({ embracers }) => {\n  const { t } = useTranslation([\"gallery\"]);\n  \n  const person = t(\"Person\");\n  const persons = t(\"People\");\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {embracers.length} {embracers.length === 1 ? person : persons}{\" \"}\n        {t(\"embraced\")}\n      </Segment>\n      <>\n        <List divided>\n          <Item.Group divided>\n            {embracers.map((embracer) => (\n              <Segment key={embracer.username} style={{ position: \"relative\" }}>\n                <Grid>\n                  <Grid.Column width={4}>\n                    <Image\n                      size='mini'\n                      circular\n                      src={embracer.image || \"/assets/user.png\"}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={12}>\n                        <Link to={`/profile/${embracer.username}`}>\n                          <Item.Extra as='h5'>\n                            {embracer.displayName}\n                           \n                          </Item.Extra>\n\n                          {embracer.isOwner && (\n                            <Label\n                              style={{ position: \"top\" }}\n                              color='teal'\n                              corner='right'\n                            >\n                              Pub\n                            </Label>\n                          )}\n                        </Link>\n                      </Grid.Column>\n                </Grid>\n              </Segment>\n            ))}\n          </Item.Group>\n        </List>\n      </>\n    </Fragment>\n  );\n};\n\nexport default observer(GaleryDetailedSidebar);\n","import React from \"react\";\nimport { Segment, Grid, Icon, Image, GridRow } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GalleryDetailedInfo: React.FC<{ motofy: IMotofy }> = ({ motofy }) => {\n  const iconStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: \"right\",\n    justifyContent: \"center\",\n  };\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  return (\n    <Segment.Group>\n      <Segment\n        attached='top'\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          textAlign: \"left\",\n          justifyContent: \"center\",\n          // color: 'red'\n        }}\n      >\n        <Grid verticalAlign='middle'>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Image size='mini' src={motofy.brandLogoUrl} />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <p>\n                <strong>{motofy.brandName} - </strong> {motofy.model}\n              </p>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Icon\n                size='large'\n                color='teal'\n                name='info'\n                style={{ iconStyle }}\n              />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <p style={{ whiteSpace: \"pre-wrap\" }}>{motofy.description}</p>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Icon name='calendar' size='large' color='teal' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <span>{t(\"Made\")} {motofy.yearOfProduction}</span>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {t(\"In\")} {motofy.city}, {motofy.countryName}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='motorcycle' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {\" \"}\n              {t(\"Engine\")} {motofy.cubicCentimeters}{t(\"cc\")}, {t(\"done\")}{\" \"}\n              {motofy.numberOfKilometers} {t(\"kilometers\")}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='euro sign' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {\" \"}\n              {t(\"Price paid\")} {motofy.pricePaid} {t(\"Euro\")}, {t(\" present value\")}{\" \"}\n              {motofy.estimatedValue} Euro\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryDetailedInfo;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport GaleryDetailedChat from \"./GaleryDetailedChat\";\nimport GaleryDetailedHeader from \"./GaleryDetailedHeader\";\nimport GaleryDetailedRating from \"./GaleryDetailedRating\";\nimport GaleryDetailedSidebar from \"./GaleryDetailedSidebar\";\nimport GalleryDetailedInfo from \"./GalleryDetailedInfo\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DetailParams {\n  id: string;\n}\nconst GaleryDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { motofy, loadMotofy, loadingInitial } = rootStore.motofyStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  useEffect(() => {\n    loadMotofy(match.params.id);\n  }, [loadMotofy, match.params.id]);\n\n  if (loadingInitial || !motofy)\n    return <LoadingComponent content={t('Loading motofies...')} />;\n\n  return (\n    <Grid>     \n      <Grid.Column computer={12} mobile={16} >\n        <GaleryDetailedHeader motofy={motofy} />\n        <GaleryDetailedRating motofy={motofy}/>\n        <GalleryDetailedInfo motofy={motofy} />\n\n        <GaleryDetailedChat />\n      </Grid.Column>\n     \n      <Grid.Column computer={4} mobile={16} >\n        <GaleryDetailedSidebar embracers={motofy.embracers} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GaleryDetails);\n","import { formatDistance } from \"date-fns\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Divider,\n  Header,\n  Icon,\n  Item,\n  Label,\n  Segment,\n} from \"semantic-ui-react\";\nimport HeaderSubHeader from \"semantic-ui-react/dist/commonjs/elements/Header/HeaderSubheader\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumListItem: React.FC<{ forumpost: IForumpost }> = ({ forumpost }) => {\n  const { t } = useTranslation([\"forum\"]);\n\n  const Response = \" \" + t(\"Response\");\n  const Responses = \" \" + t(\"Responses\");\n  const Member = \" \" + t(\"Member\");\n  const Members = \" \" + t(\"Members\");\n  const Rating = \" \" + t(\"Rating\");\n  const Ratings = \" \" + t(\"Ratings\");\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Header as='h1' floated='right'>\n          {forumpost.title}\n          <HeaderSubHeader></HeaderSubHeader>\n        </Header>\n        <HeaderSubHeader floated='right'>\n          <Label pointing='below' content={forumpost.category} />\n\n          {/* <p>\n          Posted by{\" \"}\n          <Link to={`/profile/${forumpost.userName}`}>\n            {forumpost.displayName}\n          </Link>\n          </p> */}\n        </HeaderSubHeader>\n\n        <Divider clearing />\n        <Item>\n          <Item.Image\n            size='tiny'\n            // circular\n            src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n            floated='left'\n          />\n          <Item.Content>\n            <Item.Description>\n              <>{forumpost.body}</>\n            </Item.Description>\n\n            <Item.Extra></Item.Extra>\n          </Item.Content>\n        </Item>\n      </Segment>\n\n      <Segment>\n        <Icon name='clock' /> {t(\"Posted\")}{\" \"}\n        {formatDistance(new Date(forumpost.dateAdded), new Date())} {t(\"ago by\")}{\" \"}\n        <Link to={`/profile/${forumpost.userName}`}>\n          {forumpost.displayName}\n        </Link>\n        {forumpost.commenters?.length! > 0 && (\n          <Segment>\n            {forumpost.numberOfComents! > 1\n              ? forumpost.numberOfComents + Response\n              : forumpost.numberOfComents + Responses}{\" \"}\n            {t(\"from\")}{\" \"}\n            {forumpost.commenters?.length! > 1\n              ? forumpost.commenters?.length + Members\n              : forumpost.commenters?.length + Member}\n          </Segment>\n        )}\n        {forumpost.forumpostRatings?.length! > 0 && (\n          <Segment>\n            {forumpost.forumpostRatings!.length > 1\n              ? forumpost.forumpostRatings?.length + Ratings\n              : forumpost.forumpostRatings?.length + Rating}{\" \"}\n            {t(\"from\")}{\" \"}\n            {forumpost.forumpostRatings?.length! > 1\n              ? forumpost.forumpostRatings?.length + Members\n              : forumpost.forumpostRatings?.length + Member}\n          </Segment>\n        )}\n      </Segment>\n      <Segment>\n        <Button\n          as={Link}\n          to={`/forum/${forumpost.id}`}\n          fluid\n          content={t('View')}\n          color='instagram'\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ForumListItem;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ForumListItem from \"./ForumListItem\";\n\nconst ForumList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { forumpostsByDate } = rootStore.forumPostStore; //forumposts,\n\n  return (\n    <Fragment>\n      {forumpostsByDate.map(([group, forumposts]) => (\n        <Fragment key={group}>\n          <Item.Group divided>\n            {forumposts.map((forumpost) => (\n              <ForumListItem forumpost={forumpost} key={forumpost.id} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ForumList);\n","export const category = [\n    { key: 'Offer information', text: 'Offer information', value: 'Offer information' },\n    { key: 'Ask for assistance', text: 'Ask for assistance', value: 'Ask for assistance' },\n    { key: 'Ask for advice', text: 'Ask for advice', value: 'Ask for advice' },\n  ];","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Dropdown, Input, Divider } from \"semantic-ui-react\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.forumPostStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const styles = {\n    textAlign: \"center\"\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Menu.Item>\n          <Dropdown\n            placeholder={t('Filter by category')}\n            selection\n            fluid\n            search\n            options={category}\n            onChange={handleOnChange}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"arrows alternate\"}\n          content={t(\"All Posts\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iAsked\")}\n          onClick={() => setPredicate(\"iAsked\", \"true\")}\n          color={\"blue\"}\n          name={\"iAsked\"}\n          icon={\"question circle outline\"}\n          content={t(\"I Asked\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iRated\")}\n          onClick={() => setPredicate(\"iRated\", \"true\")}\n          color={\"blue\"}\n          name={\"iRated\"}\n          icon={\"heart outline\"}\n          content={t(\"I rated\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"trending\")}\n          onClick={() => setPredicate(\"trending\", \"true\")}\n          color={\"blue\"}\n          name={\"trending\"}\n          icon={\"globe\"}\n          content={t(\"Trending\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          icon={\"users\"}\n          content={t(\"By people I follow\")}\n          style={ styles }\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ForumListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n      {/* style={{ marginTop: 50 }} */}\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ForumListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchForum = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.forumPostStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchForum;\n","import React, { useContext } from \"react\";\nimport { Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst SearchForumByCategory = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.forumPostStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Dropdown\n          placeholder={t('Filter by category')}\n          selection\n          fluid\n          search\n          options={category}\n          onChange={handleOnChange}\n          clearable\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchForumByCategory;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst ForumMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.forumPostStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info}</div>\n  );\n};\n\nexport default observer(ForumMobileInfo);","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SearchForum from \"../modals/SearchForum\";\nimport SearchForumByCategory from \"../modals/SearchForumByCategory\";\nimport ForumMobileInfo from \"./ForumMobileInfo\";\n\nconst ForumMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.forumPostStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  \n  useEffect(()=>{\n    setInfo(t('All posts'))\n  },[setInfo, t])\n\n  const handleSearch = () => {\n    setPredicate(\"search\", \"true\");\n    openModal(<SearchForum />);\n  };\n  const handleSearchByCategory = () => {\n    setPredicate(\"category\", \"true\");\n    openModal(<SearchForumByCategory />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"iAsked\":\n        setInfo(t(\"My posts\"));\n        break;\n      case \"iRated\":\n        setInfo(t(\"Posts I rated\"));\n        break;\n      case \"trending\":\n        setInfo(t(\"Trending\"));\n        break;\n      case \"iFollow\":\n        setInfo(t(\"Posts I follow\"));\n        break;\n      case \"category\":\n        setInfo(t(\"Search by category\"));\n        break;\n      case \"search\":\n        setInfo(t(\"Search all\"));\n        break;\n      default:\n        setInfo(t(\"All posts\"));\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Menu fluid widths={7}>\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iAsked\")}\n          onClick={() => {\n            setPredicate(\"iAsked\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"user circle\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iRated\")}\n          onClick={() => {\n            setPredicate(\"iRated\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"heart outline\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"trending\")}\n          onClick={() => {\n            setPredicate(\"trending\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"diamond\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => {\n            setPredicate(\"iFollow\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"category\")}\n          onClick={() => {\n            handleSearchByCategory();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"filter\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"search\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n      </Menu>\n      <ForumMobileInfo />\n    </>\n  );\n};\n\nexport default observer(ForumMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Button,\nimport ForumList from \"./ForumList\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ForumFilters from \"./ForumFilters\";\nimport ForumListItemPlaceholder from \"./ForumListItemPlaceholder\";\nimport ForumMobileFilters from \"./ForumMobileFilters\";\n\nconst ForumDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadForumPosts, loadingInitial, setPage, page, totalPages } =\n    rootStore.forumPostStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadForumPosts().then(() => setLoadingNext(false));\n  };\n  useEffect(() => {\n    loadForumPosts();\n  }, [loadForumPosts]);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column mobile={16} tablet={16} className='mobile only'>\n          <ForumMobileFilters />\n        </Grid.Column>\n        <Grid.Column computer={11} mobile={16}>\n          {loadingInitial && page === 0 ? (\n            <ForumListItemPlaceholder />\n          ) : (\n            <InfiniteScroll\n              pageStart={0}\n              loadMore={handleGetNext}\n              hasMore={!loadingNext && page + 1 < totalPages}\n              initialLoad={false}\n            >\n              <ForumList />\n            </InfiniteScroll>\n          )}\n        </Grid.Column>\n        <Grid.Column width={5} className='mobile hidden'>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <ForumFilters />\n          </Sticky>\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default observer(ForumDashboard);\n","import { IComment } from \"./comment\";\n\nexport interface IForumpostEnvelope {\n  forumposts: IForumpost[];\n  forumpostCount: number\n\n}\n\nexport interface IForumpost {\n  id: string;\n  title: string;\n  body: string;\n  // dateAdded: Date;\n  dateAdded: string;\n  displayName: string;\n  userName: string;\n  authorPhotoUrl: string;\n  category: string;\n  commentForumPosts: IComment[];\n  numberOfComents?: number;\n  commenters?: IComment [];\n  forumpostRatings?: any [];\n  forumpostRating: number;\n}\n\nexport class ForumpostFormValues {\n  id?: string;\n  title: string = '';\n  body: string = '';\n  // dateAdded: Date = '';\n  dateAdded: string = '';\n  // displayName: string = '';\n  category: string = '';\n\n  constructor(init?: ForumpostFormValues) {\n    if (init)\n      Object.assign(this, init);\n  }\n}\n\nexport interface IRateForumpost {\n  id: string;\n  rating: string;\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button, Form, Grid, Label, Segment } from \"semantic-ui-react\";\nimport { ForumpostFormValues } from \"../../../app/models/forumpost\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n}\nconst ForumForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createForumpost, editForumpost, submitting, loadForumPost } =\n    rootStore.forumPostStore;\n\n  const { user } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [editMode, setEditMode] = useState(false);\n\n  const [forumpost, setForumpost] = useState(new ForumpostFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    body: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n  });\n\n  useEffect(() => {\n    if (match.params.id) {\n      setEditMode(true);\n\n      setLoading(true);\n      loadForumPost(match.params.id)\n        .then((forumpost) => setForumpost(new ForumpostFormValues(forumpost)))\n        .finally(() => setLoading(false));\n    }\n  }, [loadForumPost, match.params.id, setEditMode]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const { ...forumpost } = values;\n    if (!forumpost.id) {\n      let newForumpost = {\n        ...forumpost,\n        id: newId,\n        dateAdded: new Date().toISOString(),\n        displayName: user?.displayName,\n        userName: user?.userName,\n      };\n      createForumpost(newForumpost);\n      addFeedItem(newId, \"Added Forumpost\");\n    } else {\n      editForumpost(forumpost);\n    }\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column \n      computer={10} mobile={16}\n      >\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={forumpost}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                {editMode && <Label content={t('Title')} />}\n\n                <Field\n                  placeholder={t('Title')}\n                  name='title'\n                  value={forumpost.title}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Body')} />}\n\n                <Field\n                  placeholder={t('Body')}\n                  name='body'\n                  rows={4}\n                  value={forumpost.body}\n                  component={TextAreaInput}\n                />\n                {editMode && <Label content={t('Category')} />}\n\n                <Field\n                  placeholder={t('Category')}\n                  name='category'\n                  options={category}\n                  value={forumpost.category}\n                  component={SelectInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content={t('Submit')}\n                />\n                <Button\n                  floated='right'\n                  disabled={loading}\n                  type='button'\n                  content={t('Cancel')}\n                  onClick={\n                    forumpost.id\n                      ? () => history.push(`/forum/${forumpost.id}`)\n                      : () => history.push(\"/forum\")\n                  }\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumForm);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, forumpost } =\n    rootStore.forumPostStore;\n\n  const connectionArgument = \"RecieveForumPostComment\";\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n    createHubConnection(forumpost!.id, connectionArgument); //, mechanic!\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, forumpost]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Comments\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{ maxWidth: \"none\" }}>\n          {forumpost &&\n            forumpost.commentForumPosts &&\n            forumpost.commentForumPosts.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumDetailedChat);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Segment, Image, Item } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\n\nconst activityImageStyle = {\n  filter: \"brightness(90%)\",\n};\n\nconst activityImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"15%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\nconst ForumDetailedHeader: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n \n  return (\n    <Segment.Group raised>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment basic style={activityImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <p>{forumpost.category}</p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      \n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedHeader);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Grid, Icon, Divider, Rating } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ForumDetailedInfo: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { rated } = rootStore.forumPostStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n\n  return (\n    <Segment.Group>\n      <Segment attached='top' textAlign='center'>\n        <Grid>\n          <Grid.Column width={8}>\n            <Grid.Row>\n              <h1>{forumpost.title}</h1>\n              {forumpost.forumpostRating > 0 && (\n                <Rating\n                  icon='star'\n                  size='large'\n                  defaultRating={forumpost.forumpostRating}\n                  maxRating={5}\n                />\n              )}\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Link to={`/profile/${forumpost.userName}`}>\n              <img\n                className='ui centered circular tiny image'\n                src={forumpost.authorPhotoUrl || \"/assets/user.png\"}\n                alt='user'\n              />\n            </Link>\n          </Grid.Column>\n        </Grid>\n        <Divider vertical>{t(\"By\")} {forumpost.displayName}</Divider>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='info' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <i>\n              <span>\n                {t(\"Posted\")}{\" \"}\n                {formatDistance(new Date(forumpost.dateAdded), new Date())}\n              </span>{\" \"}\n              {t(\"ago in\")} <span>'{forumpost.category}' {t(\"category\")} </span>\n              {forumpost.numberOfComents! > 0 && (\n                <span>, {t(\"so far with\")} {forumpost.numberOfComents} {t(\"comments\")} </span>\n              )}\n              {forumpost.forumpostRating > 0 && (\n                <span>\n                  , {t(\"rated\")} {forumpost.forumpostRating.toFixed(2)}\n                </span>\n              )}\n              {rated && <span>, {t(\"you already rated\")} </span>}\n            </i>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={16}>\n            <span style={{ whiteSpace: \"pre-wrap\" }}>{forumpost.body}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedInfo);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n// import { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  forumpostId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ forumpostId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {deleteForumpost } = rootStore.forumPostStore;\n \n  const { closeModal } = rootStore.modalStore;\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteForumpost = (id: string) => {\n    deleteForumpost(id)\n    //   .then(() => addFeedItem(id, \"Deactivated Motocycle Diary\"))\n      .then(() => closeModal())\n      .finally(() => history.push(`/forum`));\n  };\n\n  const cancelDeleteForumpost = () => {\n    closeModal();\n  };\n\n  // let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Irreversible action! Are you sure you want to do this?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteForumpost(forumpostId)}\n            color='teal'\n            content={t('Yes, delete it')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteForumpost()}\n            content={t(\"No, don't delete\")}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Button } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst ForumDetailedManager: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n  const [managing, setManaging] = useState(false);\n\n  const handleDeleteForumpost = () => {\n    openModal(<ConfirmDelete forumpostId={forumpost.id} />);\n    setManaging(false);\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <>\n      <Segment clearing attached='bottom'>\n        <>\n          {!managing ? (\n            <Button onClick={toggleManaging} color='instagram' fluid>\n              {t(\"Manage your post\")}\n            </Button>\n          ) : (\n            <div className='ui three buttons'>\n\n          \n                <Button\n                  as={Link}\n                  to={`/manageForum/${forumpost.id}`}\n                  color='pink'\n                  basic\n                >\n                  {t(\"Edit\")}\n                </Button>\n           \n                <Button\n                  onClick={handleDeleteForumpost}\n                  color='google plus'\n                  // fluid\n                >\n                  {t(\"Delete\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    setManaging(false);\n                  }}\n                  // color='grey'\n                  // fluid\n                >\n                  {t(\"Cancel\")}\n                </Button>\n            </div>\n          )}\n        </>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(ForumDetailedManager);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Segment, Grid, Button } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ForumDetailedRating: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n  const { setRating } = rootStore.forumPostStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [rated, setRated] = useState(false);\n  const { t } = useTranslation([\"forum\"]);\n\n\n  useEffect(() => {\n\n    if (forumpost.forumpostRatings!.length > 0) {\n      \n      forumpost.forumpostRatings?.forEach((rating) => {\n        if (rating.authorUsername === user?.userName) {\n          setRated(true);\n        } \n      });\n    }\n  }, [forumpost, user]);\n\n  const handleRating = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    data: any\n  ) => {\n    setRated(true);\n    setRating(forumpost.id, data.content);\n    addFeedItem(forumpost.id, 'Rated Forumpost')\n  };\n\n  return (\n    <>\n    {user?.userName !== forumpost.userName && !rated && (\n        \n        <Segment attached>\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Interesting')}\n              />\n            </Grid.Column>\n\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Usefull')}\n              />\n            </Grid.Column>\n\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Helping')}\n              />\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      )}\n    </>\n  );\n};\n\nexport default observer(ForumDetailedRating);\n","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, List, Item, Image, Grid } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\n\nconst ForumDetailedSidebar: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const { t } = useTranslation([\"forum\"]);\n  const person = \" \" + t(\"person\");\n  const people = \" \" + t(\"people\");\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {forumpost.commenters?.length !== undefined &&\n\n        forumpost.commenters?.length > 1 ? forumpost.commenters?.length  + people : forumpost.commenters?.length+ person \n        }\n          {\" \"}{t(\"participating\")}\n      </Segment>\n\n      <Segment attached>\n        <List relaxed divided>\n          <Item.Group divided>\n            {forumpost.commenters?.map((commenter) => (\n              <Segment key={commenter.id}>\n                <Grid>\n                  <Grid.Column width={6}>\n                    <Image size='mini' circular src={commenter.image} />\n                  </Grid.Column>\n                  <Grid.Column width={10}>\n                    <Link to={`/profile/${commenter.username}`}>\n                      <Item.Header as='h3'>{commenter.displayName}</Item.Header>\n                    </Link>\n                  </Grid.Column>\n                </Grid>\n              </Segment>\n            ))}\n          </Item.Group>\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumDetailedSidebar);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ForumDetailedChat from \"./ForumDetailedChat\";\nimport ForumDetailedHeader from \"./ForumDetailedHeader\";\nimport ForumDetailedInfo from \"./ForumDetailedInfo\";\nimport ForumDetailedManager from \"./ForumDetailedManager\";\nimport ForumDetailedRating from \"./ForumDetailedRating\";\nimport ForumDetailedSidebar from \"./ForumDetailedSidebar\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ForumDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { forumpost, loadForumPost, loadingInitial, rated } =\n    rootStore.forumPostStore;\n\n  const { user } = rootStore.userStore;\n  const { t } = useTranslation([\"forum\"]);\n\n\n  useEffect(() => {\n    loadForumPost(match.params.id);\n  }, [loadForumPost, match.params.id]);\n\n  if (loadingInitial || !forumpost)\n    return <LoadingComponent content={t('Loading forum post details...')} />;\n\n  return (\n    <Grid>\n      <Grid.Column computer={11} mobile={16}>\n        <ForumDetailedInfo forumpost={forumpost} />\n        {user?.userName !== forumpost.userName && !rated && (\n          <ForumDetailedRating forumpost={forumpost} />\n        )}\n\n        {/* {forumpost.userName === formattedUser.username && ( */}\n        {forumpost.userName === user?.userName && (\n          <ForumDetailedManager forumpost={forumpost} />\n        )}\n        <ForumDetailedChat />\n      </Grid.Column>\n      <Grid.Column computer={5} mobile={16}>\n        <Grid.Row className='mobile hidden'>\n          <ForumDetailedHeader forumpost={forumpost} />\n        </Grid.Row>\n        <ForumDetailedSidebar forumpost={forumpost} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumDetails);\n","export const ratingOptions = [\n    {\n      key: \"1\",\n      text: \"Not satisfied at all\",\n      value: \"1\",\n    },\n    {\n      key: \"2\",\n      text: \"It could be better, but ok\",\n      value: \"2\",\n    },\n    { key: \"3\", text: \"Satified\", value: \"3\" },\n    { key: \"4\", text: \"Very satisfied\", value: \"4\" },\n    {\n      key: \"5\",\n      text: \"Totally happy\",\n      value: \"5\",\n    },\n  ];\n","export const yesNo = [\n    { key: \"Yes\", text: \"Yes\", value: \"1\" },\n    { key: \"No\", text: \"No\", value: \"0\" },\n  ];","import React, { Fragment, useContext } from \"react\";\n// import { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { IUser } from \"../../../app/models/user\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    mechanicId: string;\n    username: string | undefined;\n    rating: string;\n    testimonial: string;\n    user: IUser | null;\n    hasRecommended: string;\n}\nconst ConfirmBecomeCustomer: React.FC<IProps> = ({ hasRecommended, mechanicId, rating, testimonial, user}) => {\n// const ConfirmBecomeCustomer = () => {\n  const rootStore = useContext(RootStoreContext);\n  // const { user } = rootStore.userStore;\n\n  const { \n    // becomeCustomer, \n    becomeCustomer, recommend, rate, addTestimonial,\n    setCloseCustomerForm } = rootStore.mechanicStore;//, setHasBecomeCustomer\n  const { closeModal } = rootStore.modalStore;\n\n  const handleBecomeCustomer = (id: string) => {\n\n    setCloseCustomerForm();\n\n    becomeCustomer(mechanicId, user, hasRecommended)\n    .then(() => recommend(mechanicId, user?.userName, hasRecommended))\n    .then(() => rate(mechanicId, rating, user))\n    .then(() => addTestimonial(mechanicId, testimonial, user))\n    .catch(error => console.log(error));\n\n    closeModal();\n  };\n\n  const cancelBecomeCustomer = () => {\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content='Become a customer of this moto shop?'\n          color='teal'\n          textAlign='center'\n        />\n        <Fragment>\n          <Button\n            // fluid\n            onClick={() => handleBecomeCustomer('id')}\n            color='teal'\n            content='Yes, gladly!'\n            floated='left'\n          />\n          <Button\n            // fluid\n            onClick={() => cancelBecomeCustomer()}\n            content='No, cancel'\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmBecomeCustomer;\n","import React, { useContext} from \"react\";//, useState \n// import { Field } from \"react-final-form\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\n\n// import { useHistory } from \"react-router\";\nimport {\n  Header,\n  Button,\n  Grid,\n  Form,\n  Segment,\n  Checkbox,\n  Label,\n} from \"semantic-ui-react\";\n// import { IUser } from \"../../../app/models/user\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nimport { ratingOptions } from \"../../../app/common/options/ratingOptions\";\nimport { yesNo}   from '../../../app/common/options/yesNoOptions';\n\nimport {\n  combineValidators,\n    composeValidators,\n    hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport ConfirmBecomeCustomer from \"../modals/ConfirmBecomeCustomer\";\nimport { useTranslation } from \"react-i18next\";\n\nconst validate = combineValidators({\n  recommend: isRequired(\"recommend\"),\n  rating: isRequired(\"rating\"),\n    testimonial: composeValidators(\n      isRequired(\"Testimonial\"),\n      hasLengthGreaterThan(4)({\n        message: \"Testimonial needs to be at least 25 characters\",\n      })\n    )(),\n});\n\n\n\ninterface IProps {\n  mechanicId: string;\n}\nconst CustomerForm: React.FC<IProps> = ({ mechanicId }) => {\n  const rootStore = useContext(RootStoreContext);\n    const { user } = rootStore.userStore;\n    const { openModal } = rootStore.modalStore;\n\n    const { t } = useTranslation([\"forms\"]);\n\n\n    const { \n      setCloseCustomerForm , \n      } = rootStore.mechanicStore;\n\n  const handleFinalFormSubmit = (values: any) => {\n    \n    let username = user?.userName;\n    let rating = values.rating;\n    let hasRecommended = values.recommend;\n    let testimonial = values.testimonial;\n\n    openModal(<ConfirmBecomeCustomer mechanicId={mechanicId} \n        username={username} \n        rating={rating}\n        hasRecommended={hasRecommended}\n        testimonial={testimonial}\n        user={user}\n        />);\n    \n\n  };\n\n  const handleChange = (key: any, value: any) => {\n    \n    if (value.checked === true){\n        // setAgreeTermsAndServices(value.checked);\n    } else {\n        // setAgreeTermsAndServices(value.checked);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Segment clearing>\n          <Header\n            as='h2'\n            content={t('Register as a customer of this mechanic is enabling you to review, evaluate, comment and more...')}\n            color='teal'\n            textAlign='center'\n          />\n          <FinalForm\n            validate={validate}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit}>\n                <Field\n                  name='rating'\n                  placeholder={t('How would you evaluate this shop?')}\n                  options={ratingOptions}\n                  component={SelectInput}\n                />\n                <Field\n                  name='recommend'\n                  placeholder={t('Would you recommend this shop?')}\n                  options={yesNo}\n                  component={SelectInput}\n                />\n                <Field\n                  name='testimonial'\n                  rows={4}\n                  placeholder={t('Please write a couple of words about your experience with this mechanic shop')}\n                  component={TextAreaInput}\n                />\n                <Checkbox\n                  name='checkForUpdates'\n                  onChange={(e, data) => handleChange(e, data)}\n                  />\n                <Label onClick={()=> console.log('open modal')} content={t('I have read and understood the rules of a portal')}/>\n\n                <Button\n                  floated='right'\n                  type='button'\n                  content={t(\"No, don't register me\")}\n                  onClick={() => setCloseCustomerForm()}\n                />\n                <Button\n                  floated='right'\n                  disabled={invalid || pristine}\n                  positive\n                  type='submit'\n                  content={t('Yes, register me as a customer')}\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default CustomerForm;\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { useTranslation } from \"react-i18next\";\n\nconst MechanicDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, mechanic } =\n    rootStore.mechanicStore;\n\n  const connectionArgument = \"RecieveMechanicComment\";\n\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n    createHubConnection(mechanic!.id, connectionArgument); //, mechanic!\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, mechanic]);\n  \n\n  // const handleTest = (event: FormEvent<HTMLTextAreaElement>) => {\n\n  //   const {name, value} = event.currentTarget;\n\n  // }\n\n\n  return (\n    <>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Chat about this mechanic\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{ maxWidth: \"none\" }}>\n          {mechanic &&\n            mechanic.commentMechanics &&\n            mechanic.commentMechanics.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>{\" \"}\n                    {t(\"ago\")}\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                  // onChange={handleTest}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  loading={submitting}\n                  fluid\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(MechanicDetailedChat);\n","import { observer } from \"mobx-react-lite\";\nimport React\n// , { \n//   Fragment, \n//   useCallback, \n//   useContext, \n//   useEffect \n// } \nfrom \"react\"; //useCallback,\nimport { useTranslation } from \"react-i18next\";\n// import { Link } from \"react-router-dom\";\nimport { Segment, Item, Header, \n  // Button, \n  Image } from \"semantic-ui-react\";\nimport { IMechanic\n  // , IMechanicCustomer \n} from \"../../../app/models/mechanic\";\n// import { RootStoreContext } from \"../../../app/stores/rootStore\";\n// import ConfirmDelete from \"../modals/ConfirmDelete\";\n\n// import LoadingComponent from '../../../app/layout/LoadingComponent';\n\nconst mechanicImageStyle = {\n  filter: \"brightness(90%) contrast(50%) drop-shadow(4px 4px 8px teal)\",\n};\n\nconst mechanicImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"5%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\nconst MechanicDetailedHeader: React.FC<{ mechanic: IMechanic }> = ({mechanic}) => {\n  const { t } = useTranslation([\"mechanics\"]);\n\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={mechanic.photoUrl || `/assets/placeholder.png`}\n          fluid\n          style={mechanicImageStyle}\n          rounded\n        />\n        <Segment basic style={mechanicImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='huge'\n                  content={mechanic.name}\n                  style={{ color: \"white\" }}\n                />\n                <p>{t(\"In business since\")} {mechanic.yearOfStart}</p>\n                <p>\n                  {t(\"Posted by\")} <strong>{mechanic.publisher}</strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedHeader);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Segment, Grid, Icon, List, Popup, Image, Label } from \"semantic-ui-react\";\nimport { IMechanic } from \"../../../app/models/mechanic\";\n\nconst MechanicDetailedInfo: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const { t } = useTranslation([\"mechanics\"]);\n\n  return (\n    <Segment.Group raised>\n      {mechanic.brands.length>0 && <Segment attached='top'>\n        <Label pointing='below'> <Icon name='trademark' />\n        {/* <img src={mechanic.photoUrl!} alt='Mechanic'/> */}\n        {' '} {t(\"Specialized in\")} {' '} {mechanic.brands.length} {' '} {t(\"brands\")}</Label>\n        <Grid>\n          <>\n            <Grid.Column width={1}>\n              <Icon size='large' color='teal' name='trademark' />\n            </Grid.Column>\n            <Grid.Column width={15}>\n              <List horizontal>\n                {mechanic.brands.map((brand: any) => (\n                  <List.Item key={brand.name}>\n                    <Popup\n                      header={brand.name}\n                      trigger={\n                        <Image\n                          size='mini'\n                          circular\n                          src={brand.logoUrl || \"/assets/user.png\"}\n                          bordered\n                        />\n                      }\n                    />\n                  </List.Item>\n                ))}\n              </List>\n            </Grid.Column>\n          </>\n        </Grid>\n      </Segment>}\n      <Segment attached>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{mechanic.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{t(\"In business since\")}: {mechanic.yearOfStart}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='address card' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {mechanic.city}, {mechanic.countryName}, {mechanic.address}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='tty' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{t(\"Phone number\")}: {mechanic.phone || t(\"Phone not available\")}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='envelope open' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {t(\"Email address\")}: {mechanic.email || t(\"Email address not available\")}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='internet explorer' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{t(\"Website\")}: {mechanic.website || t(\"Website not available\")}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n\n      <Segment attached='bottom'>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar check outline' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {t(\"Published\")}:{\" \"} \n              {formatDistance(new Date(mechanic.datePublished), new Date())}\n            </span>{\" \"}\n            {t(\"ago\")}\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedInfo);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    mechanicId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ mechanicId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteMechanic } = rootStore.mechanicStore;\n  const { closeModal } = rootStore.modalStore;\n\n  const handleDeleteMechanic = (id: string) => {\n    deleteMechanic(id);\n    closeModal();\n    history.push(`/mechanics`);\n  };\n\n  const cancelDeleteMechanic = () => {\n    closeModal();\n  };\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteMechanic(mechanicId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteMechanic()}\n            content={t('No, cancel')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, {\n  Fragment,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Button, Item} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst MechanicDetailedManager: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n  const { user } = rootStore.userStore;\n\n  const { t } = useTranslation([\"mechanics\"]);\n\n  const [managing, setManaging] = useState(false);\n\n  const {\n    isCustomer,\n    setCustomer,\n    setOpenCustomerForm,\n    openCustomerForm,\n    setCloseCustomerForm,\n  } = rootStore.mechanicStore;\n\n  const handleView = useCallback(\n    (localMechanic: any) => {\n      localMechanic.customers.forEach((customer: IMechanicCustomer) => {\n        if (user!.userName === customer.username) setCustomer(true);\n      });\n    },\n    [setCustomer, user]\n  );\n\n  useEffect(() => {\n    handleView(mechanic);\n    return () => {\n      setCustomer(false);\n      setCloseCustomerForm();\n    };\n  }, [handleView, mechanic, setCustomer, setCloseCustomerForm]);\n\n  const handleDeleteMechanic = (id: string) => {\n    openModal(<ConfirmDelete mechanicId={id} />);\n  };\n  const handleBecomeCustomer = () => {\n    setOpenCustomerForm();\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Segment.Group>\n      <Segment clearing raised>\n        <Item>{mechanic.name}</Item>\n        {mechanic.publisherUsername !== user?.userName && (\n          <Fragment>\n            {!isCustomer && !openCustomerForm && (\n              <Button\n                onClick={() => {\n                  handleBecomeCustomer();\n                }}\n                color='instagram'\n                fluid\n              >\n                {t(\"Register As Customer\")}\n              </Button>\n            )}\n          </Fragment>\n        )}\n        {mechanic.publisherUsername === user?.userName &&\n          (!managing ? (\n            <Button onClick={toggleManaging} color='instagram' fluid>\n              {t(\"Manage mechanic\")}\n            </Button>\n          ) : (\n            <div className='ui three buttons'>\n              <Button\n                as={Link}\n                to={`/manageMechanic/${mechanic.id}`}\n                color='pink'\n                basic\n              >\n                {t(\"Edit\")}\n              </Button>\n\n              <Button\n                onClick={() => {\n                  handleDeleteMechanic(mechanic.id!);\n                }}\n                color='red'\n              >\n                {t(\"Delete\")}\n              </Button>\n\n              <Button\n                onClick={() => {\n                  setManaging(false);\n                }}\n              >\n                {t(\"Cancel\")}\n              </Button>\n            </div>\n          ))}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedManager);\n","import { formatDistance } from \"date-fns\";\n// import { toJS } from \"mobx\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Image,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n \n    customer: IMechanicCustomer\n    mechanic:IMechanic\n}\nconst ShowTestimonial: React.FC<IProps> = ({  customer, mechanic }) => {\n  const rootStore = useContext(RootStoreContext);\n\n//   console.log('customer', customer)\n//   console.log('mechanic', toJS(mechanic))\n\n  const { closeModal } = rootStore.modalStore;\n\n  return (\n    <Fragment>\n      <Container text>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          <Grid>\n           \n            <Grid.Column width={10}>\n           \n              <p>\n               \n                Published {\" \"}\n                {formatDistance(\n                  new Date(customer.testimonial?.dateAdded!),\n                  new Date()\n                )}{\" \"}\n                ago{\" \"}\n              </p>\n              <Header.Subheader as='h2' color='pink'>\n                <Link\n                  to={`/profile/${customer.username}`}\n                  onClick={() => closeModal()}\n                >\n                  by {customer.displayName}\n                </Link>\n              \n              </Header.Subheader>\n            </Grid.Column>\n            <Grid.Column width={3}>\n             \n              <Image src={mechanic.photoUrl} size='small' floated=\"left\"/>\n            </Grid.Column>\n           \n          </Grid>\n        </Segment>\n        <Segment>\n              <Image src={customer.image} size='tiny' circular floated=\"left\"/>\n         \n          \n              <p style={{ whiteSpace: 'pre-wrap' }}>{customer.testimonial?.text}</p>\n             \n         \n              <Button fluid onClick={() => closeModal()} content='Close' />\n         \n        </Segment>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default ShowTestimonial;\n","import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  List,\n  Item,\n  Image,\n  Grid,\n  Label,\n  Button,\n  Popup,\n} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ShowTestimonial from \"../modals/ShowTestimonial\";\n\n\nconst MechanicDetailedSidebar: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const mechanicShop = toJS(mechanic);\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mechanics\"]);\n\n\n  const handleShowTestimonial = (customer: IMechanicCustomer, mechanic:IMechanic) => {\n    openModal(<ShowTestimonial customer={customer} mechanic={mechanic}/>);\n  };\n  return (\n    <>\n      <Fragment>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          {mechanicShop.customers && mechanicShop.customers.length > 1 \n          ? mechanicShop.customers.length + t(\"People are customers\") : mechanicShop.customers.length + t(\"Person is customer\")}  \n           {t(\"of this shop\")}\n        </Segment>\n        <>\n          <List divided>\n            <Item.Group divided>\n              {mechanicShop.customers &&\n                mechanicShop.customers.map((customer) => (\n                  <Segment key={customer.username}>\n                    <Grid>\n                      <Grid.Column width={4}>\n                        <Image\n                          size='mini'\n                          circular\n                          src={customer.image || \"/assets/user.png\"}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={10}>\n                        <Link to={`/profile/${customer.username}`}>\n                          <Item.Extra as='h5'>\n                            {customer.displayName}\n                            {customer.customerRecommended && (\n                              <p style={{ color: \"green\" }}>{t(\"Recommending\")}</p>\n                            )}\n                          </Item.Extra>\n\n                          {customer.isOwner && (\n                            <Label\n                              style={{ position: \"top\" }}\n                              color='teal'\n                              corner='right'\n                            >\n                              {t(\"Owner\")}\n                            </Label>\n                          )}\n                        </Link>\n                      </Grid.Column>\n                      <Grid.Column width={2}>\n                        {customer.testimonial && (\n                        <Popup \n                          content={customer.displayName + t(\"'s testimony about\") + mechanic.name} \n                          className='computer large screen only'\n                          trigger={\n                            <Button\n                              circular\n                              icon='comment alternate'\n                              color='instagram'\n                              // className='hidePopup'\n                              onClick={() => \n                                handleShowTestimonial(customer, mechanic) \n                              }\n                            />\n                          }\n                        />\n                        )}\n                      </Grid.Column>\n                    </Grid>\n                  </Segment>\n                ))}\n            </Item.Group>\n          </List>\n        </>\n      </Fragment>\n    </>\n  );\n};\n\nexport default observer(MechanicDetailedSidebar);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport CustomerForm from \"../form/CustomerForm\";\nimport MechanicDetailedChat from \"./MechanicDetailedChat\";\nimport MechanicDetailedHeader from \"./MechanicDetailedHeader\";\nimport MechanicDetailedInfo from \"./MechanicDetailedInfo\";\nimport MechanicDetailedManager from \"./MechanicDetailedManager\";\nimport MechanicDetailedSidebar from \"./MechanicDetailedSidebar\";\n\ninterface DetailParams {\n  id: string;\n}\nconst MechanicDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { t } = useTranslation([\"mechanics\"]);\n\n  const [ready, setReady] = useState(false);\n\n  const {\n    mechanic,\n    loadMechanic,\n    loadingInitial,\n    openCustomerForm,\n    isCustomer,\n  } = rootStore.mechanicStore;\n\n  useEffect(() => {\n      loadMechanic(match.params.id);  \n      setReady(true)   \n  }, [loadMechanic, match.params.id]); \n\n  if (loadingInitial || !mechanic || !ready)\n    return <LoadingComponent content={t('Loading mechanic shop...')} />;\n\n  return (\n    <Grid>\n    \n      <Grid.Column computer={11} mobile={16} >\n        <MechanicDetailedHeader mechanic={mechanic} />\n        <MechanicDetailedManager mechanic={mechanic}/>\n         { openCustomerForm && <CustomerForm mechanicId={mechanic.id} />}\n        <MechanicDetailedInfo mechanic={mechanic} />\n       {isCustomer  && <MechanicDetailedChat />}\n      </Grid.Column>\n     \n      <Grid.Column computer={4} mobile={16} >\n        <MechanicDetailedSidebar mechanic={mechanic} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDetails);\n","import { IComment } from \"./comment\";\n\nexport interface IMechanicsEnvelope {\n    mechanics: IMechanic[];\n    mechanicCount: number;\n}\nexport interface IMechanic {\n    id: string;\n    // author: string | null;\n    photoUrl: string | null;\n    name: string;\n    publisher: string;\n    publisherUsername: string;\n    owner: string;\n    description: string;\n    yearOfStart: string;//Date;\n    datePublished: string;// Date | undefined;\n    country: string;\n    countryName: string;\n    countryId: string;\n    city: string;\n    address: string;\n    email: string;\n    phone: string;\n    website: string;\n    commentMechanics: IComment[];\n    file: Blob;\n    customers: IMechanicCustomer[];\n    averageRating: string;\n    ratings: IRating[];\n    brands: any;\n\n}\n\nexport interface IRating {\n    username: string;\n    displayName: string;\n    score: string;\n}\n\nexport interface IMechanicCustomer {\n    username: string;\n    displayName: string;\n    image: string;\n    isOwner: boolean;\n    isCustomer: boolean;\n    customerRecommended: boolean;\n    testimonial?: IMechanicTestimonial;             \n}\nexport interface IMechanicCustomerToBecome {\n    mechanicId: string;\n    isCustomer: boolean;             \n}\n\nexport interface IMechanicTestimonial {\n    id: string;\n    text: string;\n    dateAdded: string;\n}\n\nexport interface IMechanicRate {\n    id: string;\n    score: string;\n}\nexport interface IMechanicRecommend {\n    mechanicId: string;\n    isRecommended: string;\n}\n\n\nexport class MechanicFromValues {\n    id?: string;\n    photoUrl: string = '';\n    name: string = '';\n    owner: string = '';\n    description: string = '';\n    yearOfStart: string = '';\n    datePublished: string = '';\n    country: string = '';\n    countryName: string= '';\n    countryId: string= '';\n    city: string = '';\n    address: string = '';\n    email: string= '';\n    phone: string= '';\n    website: string= '';\n    customers: IMechanicCustomer[];\n    file: Blob;\n    brands = [] ;\n\n\n\n    constructor(init?: MechanicFromValues ) {\n        if (init)\n        Object.assign(this, init);\n    }\n}","export const year = [\n    { key: '1990', text: '1990', value: '1990' },\n    { key: '1991', text: '1991', value: '1991' },\n    { key: '1992', text: '1992', value: '1992' },\n    { key: '1993', text: '1993', value: '1993' },\n    { key: '1994', text: '1994', value: '1994' },\n    { key: '1995', text: '1995', value: '1995' },\n    { key: '1996', text: '1996', value: '1996' },\n    { key: '1997', text: '1997', value: '1997' },\n    { key: '1998', text: '1998', value: '1998' },\n    { key: '1999', text: '1999', value: '1999' },\n    { key: '2000', text: '2000', value: '2000' },\n    { key: '2001', text: '2001', value: '2001' },\n    { key: '2002', text: '2002', value: '2002' },\n    { key: '2003', text: '2003', value: '2003' },\n    { key: '2004', text: '2004', value: '2004' },\n    { key: '2005', text: '2005', value: '2005' },\n    { key: '2006', text: '2006', value: '2006' },\n    { key: '2007', text: '2007', value: '2007' },\n    { key: '2008', text: '2008', value: '2008' },\n    { key: '2009', text: '2009', value: '2009' },\n    { key: '2010', text: '2010', value: '2010' },\n    { key: '2011', text: '2011', value: '2011' },\n    { key: '2012', text: '2012', value: '2012' },\n    { key: '2013', text: '2013', value: '2013' },\n    { key: '2014', text: '2014', value: '2014' },\n    { key: '2015', text: '2015', value: '2015' },\n    { key: '2016', text: '2016', value: '2016' },\n    { key: '2017', text: '2017', value: '2017' },\n    { key: '2018', text: '2018', value: '2018' },\n    { key: '2019', text: '2019', value: '2019' },\n    { key: '2020', text: '2020', value: '2020' },\n    { key: '2021', text: '2021', value: '2021' },\n    { key: '2022', text: '2022', value: '2022' },\n  ];","export const motoOptions = [\n    'Love & peace and safe riding' ,\n    'Take care of yourself and others' ,\n    'Drinking and riding - do in only never!' ,\n    'With a good wind in your face' ,\n    'Wave your hand to brothers and sisters <3' ,\n  ];","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectMultiple: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    multiple,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value || []}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n            search \n            selection\n            multiple={true}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectMultiple","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n  Label,\n} from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { MechanicFromValues } from \"../../../app/models/mechanic\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport { year } from \"../../../app/common/options/yearOptions\";\n\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n  createValidator,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport SelectMultiple from \"../../../app/common/form/SelectMultiple\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ownerOptions = [\n  { key: \"Owner\", text: \"Owner\", value: \"Owner\" },\n  { key: \"Customer\", text: \"Customer\", value: \"Customer\" },\n];\ninterface DetailParams {\n  id: string;\n}\nconst MechanicForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  history,\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createMechanic, editMechanic, submitting, loadMechanic } =\n    rootStore.mechanicStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n  const validate = combineValidators({\n    name: isRequired({ message: \"Name is required\" }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    // photoUrl: isRequired(\"Photo\"),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired( { message: t(\"City is required\") }),\n    address: isRequired( { message: t(\"Address is required\") }),\n    phone: composeValidators(\n      isNumeric({ message: t(\"Phone must be numeric value\") }),\n      isRequired({ message: t(\"Phone is required\") }),\n      hasLengthGreaterThan(8)({\n        message: t(\"Phone needs to be at least 9 characters\"),\n      })\n    )(),\n    email: isValidEmail(),\n    yearOfStart: isRequired({ message: t(\"Year of start is required\") }),\n    brands: isRequired({ message: t(\"Brand is required\") }),\n  });\n\n  const { user } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const { loadBrandsToSelect, brands } = rootStore.brandStore;\n\n  const [mechanic, setMechanic] = useState(new MechanicFromValues());\n  const [loading, setLoading] = useState(false);\n\n  const [uploaded, setUploaded] = useState(false);\n\n  const [edited, setEdited] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n    loadBrandsToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n\n      setLoading(true);\n      setUploaded(true);\n      setEdited(true);\n\n      loadMechanic(match.params.id)\n        .then((mechanic) => {\n          setMechanic(new MechanicFromValues(mechanic));\n        })\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [\n    loadCountriesToSelect,\n    loadMechanic,\n    match.params.id,\n    loadBrandsToSelect,\n  ]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const { ...mechanic } = values;\n    let owner: boolean = values.owner === \"Owner\" ? true : false;\n    let customer = {\n      username: user?.userName,\n      displayName: user?.displayName,\n      image: user?.image,\n      isOwner: owner,\n      isCustomer: !owner,\n      customerRecommended: !owner,\n      testimonial: values.description,\n    };\n    if (!mechanic.id) {\n      let newMechanic = {\n        ...mechanic,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        publisherUsername: user?.userName,\n        customers: [customer],\n      };\n      createMechanic(newMechanic);\n      addFeedItem(newId, \"Added Mechanic\");\n    } else {\n      editMechanic(mechanic);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n\n  if (!ready) return <LoadingComponent content={t(\"Loading values...\")} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column\n          // width={10}\n          computer={10}\n          mobile={16}\n        >\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={mechanic}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  {editMode && <Label content={t(\"Name\")} />}\n\n                  <Field\n                    placeholder={t(\"Name\")}\n                    name='name'\n                    value={mechanic.name}\n                    component={TextInput}\n                  />\n\n                  {!editMode && (\n                    <Field\n                      name='owner'\n                      placeholder={t(\"Are you owner or customer of this shop?\")}\n                      options={ownerOptions}\n                      value={mechanic.owner}\n                      component={SelectInput}\n                    />\n                  )}\n                  {!editMode && (\n                    <Field\n                      name='brands'\n                      placeholder={t(\"What brands are you specialized in *\")}\n                      options={brands}\n                      multiple\n                      component={SelectMultiple}\n                    />\n                  )}\n\n                  {!editMode && (\n                    <Field\n                      name='countryName'\n                      placeholder={t(\"Country\")} //\n                      options={countries}\n                      component={SelectInput}\n                    />\n                  )}\n\n                  {!editMode && (\n                    <Field\n                      name='city'\n                      placeholder={t(\"City\")}\n                      value={mechanic.city}\n                      component={TextInput}\n                    />\n                  )}\n                  {editMode && <Label content={t(\"Address *\")} />}\n\n                  <Field\n                    placeholder={t(\"Address *\")}\n                    name='address'\n                    value={mechanic.address}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Phone *\")} />}\n\n                  <Field\n                    placeholder={t(\"Phone *\")}\n                    name='phone'\n                    value={mechanic.phone}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content='Email' />}\n\n                  <Field\n                    placeholder={t(\"Email\")}\n                    name='email'\n                    value={mechanic.email}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Website\")} />}\n\n                  <Field\n                    placeholder={t(\"Website\")}\n                    name='website'\n                    value={mechanic.website}\n                    component={TextInput}\n                  />\n                  {!editMode && (\n                    <Field\n                      name='yearOfStart'\n                      placeholder={t(\"Year of Start *\")}\n                      value={mechanic.yearOfStart}\n                      options={year}\n                      component={SelectInput}\n                    />\n                  )}\n                  {editMode && <Label content={t(\"Description\")} />}\n\n                  <Field\n                    name='description'\n                    raws={3}\n                    placeholder={t(\"Description\")}\n                    value={mechanic.description}\n                    component={TextAreaInput}\n                  />\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    positive\n                    floated='right'\n                    type='submit'\n                    content={toast(\"Submit\")}\n                  />\n                  <Button\n                    onClick={\n                      mechanic.id\n                        ? () => history.push(`/mechanics/${mechanic.id}`)\n                        : () => history.push(\"/mechanicForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t(\"Cancel\")}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{mechanic.name}</Header>\n              <Image size='large' bordered src={mechanic.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(MechanicForm);\n","import { IComment } from \"./comment\";\n\nexport interface IMotofyEnvelope {\n    motofies: IMotofy[];\n    motofyCount: number;\n    mostEmbraced: IMotofy;\n    highestRatedMotofy: IMotofy;\n}\nexport interface IMotofy {\n    id: string;\n    name: string;\n    publisherUsername: string;\n    publisherDisplayName: string;\n    brandId: string;\n    brandName: string;\n    brandLogoUrl: string;\n    model: string;\n    cubicCentimeters: string;\n    photoUrl?: string | null;\n    description?: string;\n    yearOfProduction?: string;// Date;\n    datePublished?: string;\n    city: string;\n\n    countryName: string;\n    countryId: string;\n\n    pricePaid: string;\n    estimatedValue: string;\n    numberOfKilometers: string; \n    embraced: boolean;\n    isOwner: boolean;\n    embracers: IEmbracer[];\n    commentMotofies: IComment[];\n    file: Blob;\n\n    motofyScores: any[];\n    averageRating: string;\n}\n\nexport interface IMotofyFormValues extends Partial<IMotofy>{//, Partial<IBrand> \n\n}\n\nexport class MotofyFormValues implements IMotofyFormValues {\n    id?: string = '';\n    name: string = '';\n    // brand: string= '';\n    brandId: string= '';\n    brandName: string= '';\n    model: string= '';\n    cubicCentimeters: string= '';\n    photoUrl: string  = '';\n    description: string= '';\n    yearOfProduction: string= '';\n    // datePublished?: Date = undefined;\n    datePublished?: string= '';\n    city: string= '';\n    countryName: string= '';\n    countryId: string= '';\n    pricePaid: string= '';\n    estimatedValue: string= '';\n    numberOfKilometers: string= '';\n    // file: IPhoto;\n    // brands?: IBrand[];\n\n    constructor(init?: MotofyFormValues ) {//, brandsToSelect?: IBrand[]\n        if (init ) {//&& brandsToSelect\n            // init.brands = brandsToSelect;\n        }\n        Object.assign(this, init);\n    }\n} \n\nexport interface IEmbracer {\n    username: string;\n    displayName: string;\n    image: string;\n    isOwner: boolean;\n    following?: boolean;\n}\n\nexport interface IRateMotofy {\n    id: string;\n    score: string | number | undefined;\n}\n\nexport interface IMotofyScore {\n    username: string | undefined;\n    displayName: string | undefined;\n    score: string | number | undefined;\n}\n\n","import React, { useContext, useEffect, useState } from \"react\"; \nimport {\n  Button,\n  Form,\n  Grid,\n  Segment,\n  Image,\n  Sticky,\n  Header,\n  Label,\n} from \"semantic-ui-react\";\nimport { MotofyFormValues } from \"../../../app/models/motofy\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nimport { year } from \"../../../app/common/options/yearOptions\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\n\n\nimport { toast } from \"react-toastify\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { useTranslation } from \"react-i18next\";\n\n\n\n\ninterface DetailParams {\n  id: string;\n}\nconst GalleryForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const {\n    createMotofy,\n    editMotofy,\n    submitting,\n    loadMotofy,\n  } = rootStore.motofyStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n  const motomoto = motoOptions[random];\n\n  const { loadBrandsToSelect, brands } = rootStore.brandStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    name: isRequired({ message: \"Name is required\" }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    city: isRequired( { message: t(\"City is required\") }),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    model: isRequired( { message: t(\"Model is required\") }),\n    // pricePaid: composeValidators(\n    //   isNumeric(\"Price paid\"),\n    //   isRequired(\"Price paid\")\n    // )(),\n    cubicCentimeters: composeValidators(\n      isNumeric({ message: t(\"Power of engine must be numeric value\") }),\n      isRequired( { message: t(\"Power of engine is required\") })\n    )(),\n    yearOfProduction: isRequired({ message: t(\"Year of production is required\") }),\n    numberOfKilometers: composeValidators(\n      isNumeric({ message: t(\"Number of kilometers must be numeric value\") }),\n      isRequired({ message: t(\"Number of kilometers is required\") })\n    )(),\n    // estimatedValue: composeValidators(\n    //   isNumeric(\"Estimated valude\"),\n    //   isRequired(\"Estimated valude\")\n    // )(),\n  });\n\n  const [motofy, setMotofy] = useState(new MotofyFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n\n\n  const [uploaded, setUploaded] = useState(false);\n\n  const [edited, setEdited] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  //==proposal for AA001 bug==\n  useEffect(() => {\n    return () => {\n      history.goForward();\n    };\n  }, [history]);\n\n  useEffect(() => {\n    loadBrandsToSelect();\n    loadCountriesToSelect();\n    if (match.params.id) {\n      setEditMode(true);\n\n      setUploaded(true);\n      setLoading(true);\n      setEdited(true);\n      loadMotofy(match.params.id)\n        .then((motofy) => setMotofy(new MotofyFormValues(motofy)))\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [loadBrandsToSelect, loadCountriesToSelect, loadMotofy, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const { ...motofy } = values;\n    let newId = uuid();\n    if (!motofy.id) {\n      let newMotofy = {\n        ...motofy,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        isOwner: true,\n        motofyScores: [],\n      };\n\n      createMotofy(newMotofy); \n      addFeedItem(newId, \"Added Motofy\");\n    } else {\n      editMotofy(motofy);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n  \n  if (!ready) return <LoadingComponent content={t('Loading values...')} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded &&  (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={motofy}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                 {editMode && <Label content={t('Motorcycle name')}/>}\n                  <Field\n                    name='name'\n                    placeholder={t('Motorcycle name')}\n                    value={motofy.name}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Description')}/>}\n                  <Field\n                    placeholder={t('Description')}\n                    name='description'\n                    rows={3}\n                    value={motofy.description}\n                    component={TextAreaInput}\n                  />\n                    {editMode && <Label content={t('City')}/>}\n                  <Field\n                    placeholder={t('City')}\n                    name='city'\n                    value={motofy.city}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Country\")}/>}\n                  <Field\n                    placeholder={t(\"Country\")}\n                    name='countryName'\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  {!editMode && (\n                    <>\n                      <Field\n                        name='brandName'\n                        placeholder={t(\"Brand\")} //\n                        options={brands}\n                        component={SelectInput}\n                      />\n\n                      <Field\n                        name='model'\n                        placeholder={t('Model')}\n                        value={motofy.model}\n                        component={TextInput}\n                      />\n                      <Field\n                        name='cubicCentimeters'\n                        placeholder={t('Cubics')}\n                        value={motofy.cubicCentimeters}\n                        component={TextInput}\n                      />\n                      <Field\n                        name='yearOfProduction'\n                        placeholder={t('Year of production')}\n                        options={year}\n                        value={motofy.yearOfProduction}\n                        component={SelectInput}\n                      />\n                    </>\n                  )}\n                    {editMode && <Label content={t('Number of kilometers')}/>}\n                  <Field\n                    placeholder={t('Number of kilometers')}\n                    name='numberOfKilometers'\n                    value={motofy.numberOfKilometers}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Price paid')}/>}\n                  <Field\n                    placeholder={t('Price paid')}\n                    name='pricePaid'\n                    value={motofy.pricePaid}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Estimated value')}/>}\n                  <Field\n                    placeholder={t('Estimated value')}\n                    name='estimatedValue'\n                    value={motofy.estimatedValue}\n                    component={TextInput}\n                  />\n                  {edited && (\n                    <Button\n                      loading={submitting}\n                      disabled={loading || invalid}\n                      positive\n                      floated='right'\n                      type='submit'\n                      content={t('Submit')}\n                    />\n                  )}\n                  {!edited && (\n                    <Button\n                      loading={submitting}\n                      disabled={loading || invalid || pristine}\n                      positive\n                      floated='right'\n                      type='submit'\n                      content={t('Submit')}\n                    />\n                  )}\n                  <Button\n                    onClick={\n                      motofy.id\n                        ? () => history.push(`/gallery/${motofy.id}`)\n                        : () => history.push(\"/galleryForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t('Cancel')}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motofy.name}</Header>\n              <Image size='large' bordered src={motofy.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(GalleryForm);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react'\nimport { RouteComponentProps, RouteProps, Route, Redirect } from 'react-router'\nimport { RootStoreContext } from '../stores/rootStore'\n\ninterface IProps extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>>\n\n}\n\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {isLoggedIn} = rootStore.userStore;\n\n    return (\n\n        <Route \n        {...rest}\n        render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to={'/'}/>}\n        />\n    )\n}\n\nexport default observer(PrivateRoute);","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Card, Label } from \"semantic-ui-react\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ProductListItem: React.FC<{ product: IProduct }> = ({ product }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    toogleActivate\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  const handleToogleActivate = () => {\n    toogleActivate(product.id, product)\n  }\n  \n  let descriptionUiShort;\n  if (product.description) {\n    descriptionUiShort = product.description.substring(0, 20);\n  }\n  // const productTitleUiShort = product.title.substring(0, 15);\n\n  const threeDots = \"...\";\n  return (\n    <Card raised>\n      <Card.Content>\n        <Card.Header style={{ textAlign: \"center\" }}>\n          {product.title.substring(0, 15)}\n        </Card.Header>\n        {product.isSold && (\n          <Label style={{ position: \"absolute\" }} color='red' corner='right'>\n            {t(\"SOLD\")}\n          </Label>\n        )}\n        {!product.isActive && (\n          <Label color='red' attached='top' style={{textAlign: 'center'}}>\n            {t(\"INACTIVE\")}\n          </Label>\n        )}\n        <div className='ui segment'>\n          <img\n            className='ui centered medium image'\n            src={product.photoUrl}\n            alt='Product'\n            \n          />\n        </div>\n\n        <Card.Content extra>\n          <span>{descriptionUiShort || \"Description N/A\"}</span>{\" \"}\n          <span>{threeDots}</span>\n        </Card.Content>\n        {product.isActive ?\n        <Button\n          as={Link}\n          to={`/product/${product.id}`}\n          fluid\n          content={t('View product')}\n          color='instagram'\n        /> :\n\n        <Button\n          onClick={()=> handleToogleActivate()}\n          fluid\n          content={t('Activate')}\n          color='instagram'\n        />\n        }\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default observer(ProductListItem);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductListItem from \"./ProductListItem\";\n\nconst ProductList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { productsByDate } = rootStore.productStore;\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n          {productsByDate.map((product) => (\n            <ProductListItem product={product} key={product.id} />\n          ))}\n        </Card.Group>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductList);\n","export const categories  = [\n    //hope to examine why - text and value both capitialized\n    { key: 'clothing', text: 'Clothing', value: 'Clothing' },\n    { key: 'equipment', text: 'Equipment', value: 'Equipment' },\n    { key: 'gear', text: 'Gear', value: 'Gear' },\n    { key: 'vehicle', text: 'Vehicle', value: 'Vehicle' },\n    { key: 'tools', text: 'Tools', value: 'Tools' },\n    { key: 'other', text: 'Other', value: 'Other' },\n    \n]","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Divider, Dropdown, Input, Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { categories } from \"../../../app/common/options/productOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ProductFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.productStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n\n  const handleOnChangeCountry = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n  };\n\n  const handleOnChangeCategory = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\n  const styles = {\n    textAlign: \"center\"\n  };\n  return (\n    <Fragment>\n      <Menu vertical size='large' style={{ width: \"100%\" }}>\n       \n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or')} />\n        <Menu.Item active={predicate.has(\"country\")}>\n          <Dropdown\n            fluid\n            placeholder={t('Search products by country')}\n            selection\n            floating\n            search\n            options={countries}\n            onChange={handleOnChangeCountry}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or')} />\n        <Menu.Item>\n          <Dropdown\n            fluid\n            placeholder={t('Search products by category')}\n            selection\n            floating\n            search\n            options={categories}\n            onChange={handleOnChangeCategory}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          style={ styles }\n          content={t(\"All Products\")}\n        />\n          <Menu.Item\n            active={predicate.has(\"iView\")}\n            onClick={() => setPredicate(\"iView\", \"true\")}\n            color={\"blue\"}\n            name={\"iView\"}\n            style={{ textAlign: \"center\" }}\n            content={t(\"Favorites\")}\n          />\n          <Menu.Item\n            active={predicate.has(\"myProducts\")}\n            onClick={() => setPredicate(\"myProducts\", \"true\")}\n            color={\"blue\"}\n            name={\"myProducts\"}\n            style={{ textAlign: \"center\" }}\n            content={t(\"My products\")}\n          />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"iFollow\"}\n          style={ styles }\n          content={t(\"By people I follow\")}\n        />\n        <Menu.Item\n          active={predicate.has(\"inActive\")}\n          onClick={() => setPredicate(\"inActive\", \"true\")}\n          color={\"blue\"}\n          name={\"inActive\"}\n          style={ styles }\n          content={t(\"My inactive products\")}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default ProductFilters;\n","import React from \"react\";\nimport { Segment, Placeholder, Grid } from \"semantic-ui-react\";\nconst ProductListItemPlaceholder = () => {\n  return (\n    <Grid columns={4} stackable>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\nexport default ProductListItemPlaceholder;\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst SearchProducts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.productStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchProducts;\n","import React, { useContext } from \"react\";\nimport { Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { categories } from \"../../../app/common/options/productOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst SearchProductsByCategory = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.productStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Dropdown\n          placeholder={t('Filter by category')}\n          selection\n          fluid\n          search\n          options={categories}\n          onChange={handleOnChange}\n          clearable\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchProductsByCategory;\n","import React, { useContext, useEffect } from \"react\";\nimport {  Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchProductsByCountry = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.productStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n  const { closeModal } = rootStore.modalStore;\n\n  //!!Warning Mem Leak\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\nconst handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n           <Dropdown\n            placeholder='Filter by country'\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchProductsByCountry;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst ProductMobileInfo = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { info } = rootStore.productStore;\n\n  return (\n    <div className=\"mobileInfo\" >{info}</div>\n  );\n};\n\nexport default observer(ProductMobileInfo);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SearchProducts from \"../modals/SearchProducts\";\nimport SearchProductsByCategory from \"../modals/SearchProductsByCategory\";\nimport SearchProductsByCountry from \"../modals/SearchProductsByCountry\";\nimport ProductMobileInfo from \"./ProductMobileInfo\";\n\nconst ProductMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, setInfo } = rootStore.productStore;\n\n  const { t } = useTranslation([\"mobile-info\"]);\n\n  \n  useEffect(()=>{\n    setInfo(t('All products'))\n  },[setInfo, t])\n  const { openModal } = rootStore.modalStore;\n\n  const handleSearch = () => {\n    setPredicate(\"search\", \"true\");\n    openModal(<SearchProducts />);\n  };\n  const handleSearchByCountry = () => {\n    setPredicate(\"country\", \"true\");\n    openModal(<SearchProductsByCountry />);\n  };\n  const handleSearchByCategory = () => {\n    setPredicate(\"category\", \"true\");\n    openModal(<SearchProductsByCategory />);\n  };\n\n  const handleSetInfo = () => {\n    switch (predicate.keys().next().value) {\n      case \"iView\":\n        setInfo(t(\"Favorites\"));\n        break;\n      case \"myProducts\":\n        setInfo(t(\"My products\"));\n        break;\n      case \"iFollow\":\n        setInfo(t(\"By people I follow\"));\n        break;\n      case \"inActive\":\n        setInfo(t(\"My inactive products\"));\n        break;\n      case \"search\":\n        setInfo(t(\"Search products\"));\n        break;\n      case \"category\":\n        setInfo(t(\"Search by category\"));\n        break;\n      case \"country\":\n        setInfo(t(\"Search by country\"));\n        break;\n      default:\n        setInfo(t(\"All products\"));\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Menu fluid widths={8}>\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => {\n            setPredicate(\"all\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"home\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iView\")}\n          onClick={() => {\n            setPredicate(\"iView\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"heart outline\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"myProducts\")}\n          onClick={() => {\n            setPredicate(\"myProducts\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"user circle\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => {\n            setPredicate(\"iFollow\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"eye\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"inActive\")}\n          onClick={() => {\n            setPredicate(\"inActive\", \"true\");\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"hourglass end\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"search\")}\n          onClick={() => {\n            handleSearch();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"search\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"country\")}\n          onClick={() => {\n            handleSearchByCountry();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"globe\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"category\")}\n          onClick={() => {\n            handleSearchByCategory();\n            handleSetInfo();\n          }}\n          color={\"blue\"}\n          icon={\"filter\"}\n        />\n      </Menu>\n      <ProductMobileInfo />\n    </>\n  );\n};\n\nexport default observer(ProductMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\";\nimport ProductList from \"./ProductList\";\n\n// import LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductFilters from \"./ProductFilters\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ProductListItemPlaceholder from \"./ProductListItemPlaceholder\";\nimport ProductMobileFilters from \"./ProductMobileFilters\";\n\nconst ProductDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadProducts, loadingInitial, setPage, page, totalPages } = rootStore.productStore;\n\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadProducts().then(()=> {\n      setLoadingNext(false);\n    })\n  }\n\n  useEffect(() => {\n    loadProducts();\n  }, [loadProducts]);\n  \n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <ProductMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16} >\n     { loadingInitial && page === 0 ? <ProductListItemPlaceholder/> :\n     <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n        <ProductList />\n        </InfiniteScroll>}\n      </Grid.Column>\n      <Grid.Column width={5}>\n        <Sticky className=\"mobile hidden\" style={{ marginRight: 30, position: \"fixed\" }}>\n          <ProductFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column computer={9} mobile={16}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductDashboard);\n","export interface IProductsEnvelope {\n  products: IProduct[];\n  productCount: number;\n}\n\nexport interface IProduct {\n  id: string;\n  sellerId: string;\n  sellerUsername: string;\n  sellerDisplayName: string;\n  title: string;\n  model: string;\n  description: string;\n  price: string;\n  brand: string;\n  category: string;\n  countryName: string;\n  countryId: string;\n  city: string;\n  phoneNumber: string;\n  isActive: boolean;\n  isSold: boolean;\n  isAdvertised: boolean;\n  numberSeen: number;\n  numberFollowed: number;\n  viewers: IProductViewer [];\n  datePublished: string;\n  dateActivated: Date;\n  advertisingEndDate?: Date;\n  inactivityExpirationDate: Date;\n  dateAdvertised: Date;\n  typeAdvertising: string;\n  photoUrl: string;\n  file: Blob;\n\n}\n\nexport interface IProductViewer {\n  dateStarted?: Date;\n  displayName: string;\n  image?: string;\n  username: string;\n}\n\nexport class ProductFormValues {\n  id: string;\n  sellerId: string = '';\n  sellerUsername: string = '';\n  title: string = '';\n  model: string = '';\n  description: string = '';\n  price: string = '';\n  brand: string = '';\n  category: string = '';\n  countryName: string;\n  countryId: string;\n  city: string = '';\n  phoneNumber: string = '';\n  isActive: boolean;\n  isAdvertised: boolean;\n  datePublished: string = '';\n  dateActivated: Date;\n  dateAdvertised: Date;\n  photoUrl: string = '';\n  file: Blob;\n\n\n  constructor(init?: ProductFormValues) {\n    if (init)\n      Object.assign(this, init);\n  }\n}\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n  Label,\n} from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { ProductFormValues } from \"../../../app/models/product\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport { categories } from \"../../../app/common/options/productOptions\";\n\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ProductForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  history,\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createProduct, editProduct, submitting, loadProduct } =\n    rootStore.productStore;\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n  const { user } = rootStore.userStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired({ message: t(\"City is required\") }),\n    phoneNumber: composeValidators(\n      isNumeric({ message: t(\"Phone must be numeric value\") }),\n      // isRequired({ message: t(\"Phone is required\") }),\n      hasLengthGreaterThan(8)({\n        message: t(\"Phone needs to be at least 9 characters\"),\n      })\n    )(),\n    price: composeValidators(\n      isNumeric({ message: t(\"Price must be numeric value\") }),\n      isRequired({ message: t(\"Price is required\") })\n    )(),\n  });\n  const [product, setProduct] = useState(new ProductFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const [uploaded, setUploaded] = useState(false);\n  const [edited, setEdited] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n      setLoading(true);\n      setUploaded(true);\n      setEdited(true);\n\n      loadProduct(match.params.id)\n        .then((product) => {\n          setProduct(new ProductFormValues(product));\n        })\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [loadCountriesToSelect, loadProduct, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n\n    const { ...product } = values;\n    if (product.brand === \"\") product.brand = \"Brand not asigned\";\n    if (product.model === \"\") product.model = \"Model not asigned\";\n\n    if (!product.id) {\n      let newProduct = {\n        ...product,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        inactivityExpirationDate: new Date(\n          Date.now() + 1000 /*sec*/ * 60 /*min*/ * 60 /*hour*/ * 24 /*day*/ * 30\n        ),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        sellerUsername: user?.userName,\n      };\n      createProduct(newProduct);\n      addFeedItem(newId, \"Added Product\");\n    } else {\n      editProduct(product);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n  if (!ready) return <LoadingComponent content={t(\"Loading values...\")} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={product}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  {editMode && <Label content={t(\"Title\")} />}\n\n                  <Field\n                    placeholder={t(\"Title\")}\n                    name='title'\n                    value={product.title}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Price\")} />}\n                  <Field\n                    placeholder={t(\"Price\")}\n                    name='price'\n                    value={product.price}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Description\")} />}\n                  <Field\n                    placeholder={t(\"Description\")}\n                    name='description'\n                    rows={3}\n                    value={product.description}\n                    component={TextAreaInput}\n                  />\n\n                  {editMode && <Label content={t(\"Category\")} />}\n                  <Field\n                    placeholder={t(\"Category\")}\n                    name='category'\n                    options={categories}\n                    value={product.category}\n                    component={SelectInput}\n                  />\n\n                  {editMode && <Label content={t(\"Country\")} />}\n                  <Field\n                    placeholder={t(\"Country\")}\n                    name='countryName'\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  {editMode && <Label content={t(\"City\")} />}\n                  <Field\n                    placeholder={t(\"City\")}\n                    name='city'\n                    value={product.city}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Phone\")} />}\n                  <Field\n                    placeholder={t(\"Phone\")}\n                    name='phoneNumber'\n                    value={product.phoneNumber}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Model\")} />}\n                  <Field\n                    placeholder={t(\"Model\")}\n                    name='model'\n                    value={product.model}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Brand\")} />}\n                  <Field\n                    placeholder={t(\"Brand\")}\n                    name='brand'\n                    value={product.brand}\n                    component={TextInput}\n                  />\n\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    positive\n                    floated='right'\n                    type='submit'\n                    content={t(\"Submit\")}\n                  />\n                  <Button\n                    onClick={\n                      product.id\n                        ? () => history.push(`/product/${product.id}`)\n                        : () => history.push(\"/productForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t(\"Cancel\")}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{product.title}</Header>\n              <Image size='large' bordered src={product.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(ProductForm);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Feed, Segment } from \"semantic-ui-react\";\nimport { IFeed } from \"../../../app/models/feed\";\n\nconst FeedListItem: React.FC<{ feed: IFeed }> = ({ feed }) => {\n  return (\n    <Segment.Group raised>\n\n      <Feed>\n        <Feed.Event style={{backgroundColor: \"white\"}}>\n          <Feed.Label\n          >\n            <img\n              src={feed.notifierPhotoUrl || \"/assets/user.png\"}\n              alt='userPoto'\n            />\n          </Feed.Label>\n          <Feed.Content >\n            <Feed.Summary>\n              <Feed.User as={Link} to={`/profile/${feed.notifierUsername}`}>\n                {feed.notifierDisplayname} \n              </Feed.User>\n              {\" \"} \n              <Feed.Meta>{feed.info}</Feed.Meta>\n              {/* <Feed.Date>\n                {feed.dateTriggered}\n              </Feed.Date> */}\n            </Feed.Summary>\n          </Feed.Content>\n        </Feed.Event>\n      </Feed>\n    </Segment.Group>\n  );\n};\n\nexport default FeedListItem;\n\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport FeedListItem from \"./FeedListItem\";\n\nconst FeedList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { feedByDate } = rootStore.feedStore;\n\n  return (\n    <Fragment>\n      {feedByDate.map(([gr, feeds]) => (\n        <Fragment key={gr}>\n            <Item.Group divided>\n              {feeds.map((feed:any) => (\n                <FeedListItem feed={feed} key={feed.id} />\n              ))}\n            </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(FeedList);\n","import React from \"react\";\nimport { Segment, Placeholder } from \"semantic-ui-react\";\nconst FeedListItemPlaceholder = () => {\n  return (\n    <Segment.Group raised>\n      <Segment>\n\n      <Placeholder fluid>\n        <Placeholder.Header image>\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Header>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n      </Placeholder>\n      </Segment>\n    </Segment.Group>\n  );\n};\nexport default FeedListItemPlaceholder;\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {  Grid, Loader} from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport FeedList from \"./FeedList\";\nimport FeedListItemPlaceholder from \"./FeedListItemPlaceholder\";\n\nconst FeedDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadFeed, loadingInitial, setPage, page, totalPages } =\n    rootStore.feedStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadFeed().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadFeed();\n  }, [loadFeed]);\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column mobile={16} computer={15}>\n        {loadingInitial && page === 0 ? (\n          <FeedListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <FeedList />\n          </InfiniteScroll>\n            )}\n        </Grid.Column>\n        <Grid.Column mobile={16} computer={15}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(FeedDashboard);\n","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { IProfile } from \"../../../app/models/profile\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst PeopleListItem: React.FC<{ member: IProfile }> = ({ member }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { onlineUsers } = rootStore.presenceStore;\n\n  const { t } = useTranslation([\"social\"]);\n  // console.log(\"onlineUsers\", onlineUsers);\n  // console.log(\"member.username\", member.username);\n\n  //  console.log('onlineUsers', toJS(onlineUsers))\n  // const styles = {\n  //   borderColor: \"green\",\n  //   borderWidth: 3,\n  // };\n  return (\n    // <Card as={Link} to={`/profile/${member.username}`}>\n    //     <Image src={member.image || '/assets/user.png'} size='tiny' circular/>\n    //     <Card.Content>\n    //       <Card.Header>{member.displayName || 'display name'}</Card.Header>\n    //     </Card.Content>\n    //     <Card.Meta>\n    //       {/* <div> */}\n    //         <Icon name='user' />\n    //         {member.followersCount} Followers\n    //       {/* </div> */}\n    //     </Card.Meta>\n    //   </Card>\n\n    <Card as={Link} to={`/profile/${member.username}`} raised>\n      <Card.Content>\n        <Image\n          floated='right'\n          size='mini'\n          src={member.image || \"/assets/user.png\"}\n          circular\n          bordered\n          // style={ styles}\n          // style={onlineUsers.includes(member.username) ? styles : null}\n        />\n        <Card.Header>\n          {onlineUsers.includes(member.username) && (\n            <Icon name='check circle' className='isOnline' bordered circular size=\"tiny\"/>\n            )}\n            {member.displayName || \"display name\"}\n        </Card.Header>\n\n        <Card.Meta>\n          {member.followersCount === 1\n            ? member.followersCount + t(\"Folower\")\n            : t(\"Followers\")}{\" \"}\n        </Card.Meta>\n        {member.following && (\n          <Card.Description style={{ color: \"green\" }}>\n            {t(\"Following\")}\n          </Card.Description>\n        )}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default observer(PeopleListItem);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Card, Grid, Input } from \"semantic-ui-react\"; //Button, Form, , Menu\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PeopleListItem from \"./PeopleListItem\";\n\n\nconst PeopleList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { displayPeople, setPredicate } = rootStore.peopleStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const [input, setInput] = useState(\"\"); \n\n  const handleSearchResults = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n \n\n  return (\n    <Grid>\n          <Grid.Column width={8}>\n            <Input\n              name='search'\n              fluid\n              placeholder={t('Search all')}\n              value={input}\n              onInput={(e: any) => setInput(e.target.value)}\n              onKeyDown={(e: any) => handleSearchResults(e)}\n            />\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Button\n              content={t('See all')}\n              fluid\n              floated='right'\n              onClick={() => setPredicate(\"all\", \"true\")}\n            />\n          </Grid.Column>\n         \n      <Grid.Column width={16}>\n       \n        <Card.Group itemsPerRow={4} stackable={true} doubling={true}>\n          {displayPeople.map((member) => (\n            <PeopleListItem member={member} key={member.id} />\n          ))}\n        </Card.Group>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(PeopleList);\n","import React from 'react';\nimport { Segment, Placeholder, Grid } from 'semantic-ui-react';\nconst PeopleListItemPlaceholder = () => {\n\n\n  return (\n    <Grid columns={4} stackable>\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n  </Grid>\n    \n  );\n};\nexport default PeopleListItemPlaceholder;\n\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {  Grid, Loader} from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PeopleList from \"./PeopleList\";\nimport PeopleListItemPlaceholder from \"./PeopleListItemPlaceholder\";\n\nconst PeopleDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadPeople, loadingPeople, setPage, page, totalPages, cleanPeople } =//, cleanPeople\n    rootStore.peopleStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadPeople().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, [loadPeople]);\n\n  useEffect(() => {\n    return () => {\n      cleanPeople()\n    };\n  }, [cleanPeople]);\n\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column mobile={16} computer={16}>\n        {loadingPeople && page === 0 ? (\n          <PeopleListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <PeopleList />\n          </InfiniteScroll>\n          )}\n        </Grid.Column>\n        <Grid.Column mobile={16} computer={15}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PeopleDashboard);\n","export const mood = [\n    { key: 'Enthusiastic', text: 'Enthusiastic', value: 'Enthusiastic' },\n    { key: 'Happy', text: 'Happy', value: 'Happy' },\n    { key: 'Relaxed', text: 'Relaxed', value: 'Relaxed' },\n    { key: 'Concerned', text: 'Concerned', value: 'Concerned' },\n    { key: 'Tired', text: 'Tired', value: 'Tired' }\n  ];\n","export const weather = [\n    { key: 'Partly Cloudy', text: 'Partly Cloudy', value: 'Partly Cloudy' },\n    { key: 'Cloudy', text: 'Cloudy', value: 'Cloudy' },\n    { key: 'Rainy', text: 'Rainy', value: 'Rainy' },\n    { key: 'Stormy', text: 'Stormy', value: 'Stormy' },\n    { key: 'Sunny', text: 'Sunny', value: 'Sunny' },\n  ];","export const road = [\n    { key: 'Poor', text: 'Poor', value: 'Poor' },\n    { key: 'Not bad', text: 'Not bad', value: 'Not bad' },\n    { key: 'Decent', text: 'Decent', value: 'Decent' },\n    { key: 'Very good', text: 'Very good', value: 'Very good' },\n    { key: 'Excellent', text: 'Excellent', value: 'Excellent' },\n  ];","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n} from \"semantic-ui-react\";\nimport { DiaryEntryFormValues } from \"../../../app/models/activity\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport { mood } from \"../../../app/common/options/moodOptions\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport { weather } from \"../../../app/common/options/weatherOptions\";\nimport { road } from \"../../../app/common/options/roadOptions\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n  activityId: string;\n}\n\nconst DiaryEntryForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    submitting,\n    loadActivity,\n    createDiaryEntry,\n    loadDiaryEntry,\n    editDiaryEntry,\n    // ,\n  } = rootStore.activityStore;\n\n  // const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"diaries\"]);\n  const validate = combineValidators({\n    locationCity: isRequired({ message: t(\"The location city is required\")}),\n    locationCountry: isRequired({ message: t(\"The location country is required\") }),\n    body: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    mood: isRequired({ message: \"The mood is required\" }),\n  });\n\n  const [diaryEntry, setdiaryEntry] = useState(new DiaryEntryFormValues());\n  const [loading, setLoading] = useState(false);\n\n  //===PHOTO UPLOAD===\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n  const [imageToUpload, setImageToUpload] = useState(null);\n  const [uploaded, setUploaded] = useState(false);\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n\n  const [edited, setEdited] = useState(false);\n\n  const [activity, setActivity] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n\n    loadActivity(match.params.activityId)\n      .then((activity) => setActivity(activity))\n      .finally(() => setLoading(false));\n\n    if (match.path === \"/manageDiaryEntry/:id/:activityId\") {\n      // console.log(\"match\", match);\n      loadDiaryEntry(match.params.id)\n        .then((diaryEntry) => setdiaryEntry(diaryEntry!))\n        .finally(() => setLoading(false));\n      setEdited(true);\n      setUploaded(true);\n\n    }\n  }, [\n    loadActivity,\n    match,\n    match.path,\n    match.params.id,\n    loadCountriesToSelect,\n    loadDiaryEntry,\n  ]);\n\n\n  const handleFinalFormSubmit = (values: any) => {\n    let uiId = uuid();\n    if (match.path === \"/createDiaryEntry/:activityId\") {\n      let newDiaryEntry = {\n        ...values,\n        id: uiId,\n        entryDate: new Date(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n      };\n      createDiaryEntry(newDiaryEntry, activity!);\n \n    } else {\n      let newDiaryEntry = {\n        ...values,\n        activityId: match.params.activityId,\n      };\n\n      editDiaryEntry(newDiaryEntry, activity!);\n    }\n\n  };\n\n  return (\n    <Grid>\n      {!uploaded && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={diaryEntry}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  <Field\n                    name='body'\n                    placeholder={t('What happened today?')}\n                    rows={5}\n                    component={TextAreaInput}\n                  />\n                  <Field\n                    name='mood'\n                    placeholder={t('What is your mood today?')}\n                    options={mood}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='weather'\n                    placeholder={t('What is weather like today?')}\n                    options={weather}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='road'\n                    placeholder={t('What is road like')}\n                    options={road}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='locationCountry'\n                    placeholder={t(\"Country you are in\")} //\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='locationCity'\n                    placeholder={t('City you are in')}\n                    component={TextInput}\n                  />\n                  <Field\n                    name='numberOfKilometers'\n                    placeholder={t('Number of kilometers')}\n                    component={TextInput}\n                  />\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    floated='right'\n                    positive\n                    type='submit'\n                    content={t('Submit')}\n                  ></Button>\n                  <Button\n                    onClick={() =>\n                      history.push(`/activities/${match.params.activityId}`)\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t('Cancel')}\n                  ></Button>\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>\n                {diaryEntry.locationCity}\n              </Header>\n              <Image size='large' bordered src={diaryEntry.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(DiaryEntryForm);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport { Grid, Image, Container } from \"semantic-ui-react\";\nimport { formatDistance } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { IPrivateMessage } from \"../../app/models/privatemessages\";\n\nconst PrivateMessageThreadList = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    messagesByThreadId,\n     markReadInDB,\n    setInitialView,\n    setView,\n  } = rootStore.privateMessageStore;\n\n  useEffect(() => {\n    setInitialView();\n  }, [setInitialView]);\n\n  const markRead = (messages: IPrivateMessage[]) => {\n    messages.forEach((m) => {\n      if (m.senderUsername !== user?.userName && m.dateRead === null) {\n        markReadInDB(m.id);\n      }\n    });\n  };\n\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column width={16}>\n          {messagesByThreadId.map(([id, messages]) => (\n            <Container\n              key={id}\n              style={{ backgroundColor: \"lightblue\", paddingTop: \"3em\" }}\n            >\n              <Grid\n                onClick={() => {\n                  markRead(messages);\n                  setView(messages[0].privateMessageThreadId);\n                }}\n                divided\n                style={{ cursor: \"pointer\" }}\n              >\n                <Grid.Column\n                  mobile={16}\n                  className='mobile only'\n                  style={{ padding: \"0px\", margin: \"0px\" }}\n                >\n                  <img\n                    className='ui centered medium image'\n                    style={{ borderRadius: \"50%\" }}\n                    width={\"40px\"}\n                    src={(messages[0].senderUsername === user?.userName \n                      ? \n                     messages[0].recipientPhotoUrl\n                      :\n                      messages[0].senderPhotoUrl ) \n                      || \"/assets/user.png\"\n                    } \n                   \n                    alt='sender'\n                  />\n                </Grid.Column>\n\n                <Grid.Column computer={4} className='mobile hidden'>\n                  <Image\n                    size='mini'\n                    circular\n                    verticalAlign='middle'\n                    src={(messages[0].senderUsername === user?.userName \n                      ? \n                     messages[0].recipientPhotoUrl\n                      :\n                      messages[0].senderPhotoUrl ) \n                      || \"/assets/user.png\"\n                    } \n                  />\n                  <span>\n                    {\" \"}\n                    {messages[0].senderUsername === user?.userName\n                      ? messages[0].recipientUsername\n                      : messages[0].senderDisplayName}\n                  </span>\n                </Grid.Column>\n                <Grid.Column width={12} className='mobile hidden'>\n                  <Grid.Row\n                    style={\n                      messages[0].dateRead === null &&\n                      messages[0].senderUsername !== user?.userName\n                        ? { fontWeight: \"bold\", color: \"rgb(211, 81, 21)\" }\n                        : { fontWeight: \"normal\" }\n                    }\n                  >\n                    <span>\n                      {formatDistance(\n                        new Date(messages[0].dateSent),\n                        new Date(),\n                        {\n                          addSuffix: true,\n                        }\n                      )}\n                    </span>\n\n                    <Grid.Row>\n                      {messages[0].content.substring(0, 18)}...\n                    </Grid.Row>\n                  </Grid.Row>\n                </Grid.Column>\n              </Grid>\n            </Container>\n          ))}\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PrivateMessageThreadList);\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  messageId: string;\n  privateMessageThreadId: string;\n  recipientUsername: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ messageId, privateMessageThreadId, recipientUsername }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteSingleMessage} = rootStore.privateMessageStore;\n \n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteSingleMessage = () => {\n    deleteSingleMessage(messageId, privateMessageThreadId, recipientUsername)\n      .then(() => closeModal())\n  };\n\n  const cancelDeleteSingleMessage = () => {\n    closeModal();\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('This action is irreversible')}\n          color='teal'\n          textAlign='center'\n        />\n        <Header\n          sub\n          content={t('Are you sure you want to delete this message?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <div className='ui two buttons' style={{paddingTop: \"2rem\"}}>\n          <Button\n            fluid\n            onClick={() => handleDeleteSingleMessage()}\n            // color='teal'\n            content={t('Yes, delete it')}\n            // floated='left'\n          />\n          <Button\n            fluid\n            positive\n            onClick={() => cancelDeleteSingleMessage()}\n            content={t(\"No, don't delete\")}\n            // floated='right'\n          />\n        </div>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","export interface IPrivateMessageEnvelope {\n\n    privateMessages: IPrivateMessage[];\n    privateMessageThreadsCount: number; \n    totalPages: number;\n}\n\nexport interface IPrivateMessage {\n    id: string;\n    senderId?: string;\n    senderUsername?: string;\n    senderDisplayName?: string;\n    senderPhotoUrl: string;\n    recipientId?: string;\n    recipientUsername?: string;\n    recipientPhotoUrl?: string;\n    content: string;\n    dateRead?: string;\n    dateSent: string;\n    privateMessageThreadId: string;\n}\n\nexport interface IPrivateMessageToSend {\n    recipientUsername: string;\n    content: string;\n    productId?: string;\n}\nexport interface IPrivateMessageToDelete {\n    id: string;\n    privateMessageThreadId: string;\n}\nexport interface IPrivateMessageToEdit {\n    id: string;\n    privateMessageThreadId: string;\n    content: string;\n    recipientUsername: string;\n    senderUsername: string;\n    senderPhotoUrl: string;\n}\n\nexport class PrivateMessageToEditValues {\n    id?: string;\n    content: string = '';\n    privateMessageThreadId: string = '';\n  \n    constructor(init?: PrivateMessageToEditValues) {\n      if (init)\n        Object.assign(this, init);\n    }\n  }\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, Button, Grid, Form } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { PrivateMessageToEditValues } from \"../../../app/models/privatemessages\";\n\nimport { combineValidators, isRequired } from \"revalidate\";\n\ninterface IProps {\n  messageId: string;\n  privateMessageThreadId: string;\n  content: string;\n  recipientUsername: string;\n  senderPhotoUrl: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({\n  messageId,\n  privateMessageThreadId,\n  content,\n  recipientUsername,\n  senderPhotoUrl,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { editMessage } = rootStore.privateMessageStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const validate = combineValidators({\n    content: isRequired({ message: t(\"Content is required\") }),\n  });\n\n  const [message, setMessage] = useState(new PrivateMessageToEditValues());\n\n  useEffect(() => {\n    let message = {\n      messageId,\n      privateMessageThreadId,\n      content,\n      recipientUsername,\n      senderPhotoUrl,\n    };\n    setMessage(message);\n  }, [\n    content,\n    messageId,\n    privateMessageThreadId,\n    recipientUsername,\n    senderPhotoUrl,\n  ]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    editMessage(\n      values.messageId,\n      values.privateMessageThreadId,\n      values.content,\n      values.recipientUsername,\n      values.senderPhotoUrl\n    );\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Edit message')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <FinalForm\n          validate={validate}\n          initialValues={message}\n          onSubmit={handleFinalFormSubmit}\n          render={({ handleSubmit, invalid, pristine }) => (\n            <Form onSubmit={handleSubmit}>\n              <Field\n                name='content'\n                rows={4}\n                value={message.content}\n                component={TextAreaInput}\n              />\n              <div className='ui two buttons' style={{ paddingTop: \"2rem\" }}>\n                <Button\n                  type='button'\n                  content={t(\"Cancel\")}\n                  onClick={closeModal}\n                />\n                <Button\n                  disabled={invalid || pristine}\n                  positive\n                  type='submit'\n                  content={t(\"Submit\")}\n                />\n              </div>\n            </Form>\n          )}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import React, { Fragment, useCallback, useEffect, useContext } from \"react\";\nimport {\n  Segment,\n  Image,\n  Grid,\n  GridColumn,\n  GridRow,\n  Icon,\n} from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { IPrivateMessage } from \"../../app/models/privatemessages\";\nimport ConfirmDelete from \"./modals/ConfirmDelete\";\nimport EditMessage from \"./modals/EditMessage\";\n\nconst PrivateMessageThreadListItem = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    listOfMessagesInFocus,\n    markReadInDB,\n    createHubConnection,\n    stopHubConnection,\n    setOtherUser,\n    cleanOtherUser,\n  } = rootStore.privateMessageStore;\n\n  const { markReadNavbar } = rootStore.presenceStore;\n\n  const { openModal, setSize } = rootStore.modalStore;\n\n  const userStyles = {\n    fontWeight: \"normal\",\n    borderRadius: \"20px\",\n    border: \"solid 1px\",\n    color: \"rgb(29, 115, 152)\",\n    width: \"97%\",\n    marginTop: \"20px\",\n    backgroundColor: \"lightblue\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    marginLeft: \"1rem\",\n  };\n  const senderStyles = {\n    fontWeight: \"normal\",\n    borderRadius: \"20px\",\n    border: \"solid 1px\",\n    color: \"black\",\n    width: \"97%\",\n    marginTop: \"20px\",\n    backgroundColor: \"inherit\",\n  };\n\n  const markRead = useCallback(\n    (messages: IPrivateMessage[]) => {\n      messages.forEach((m) => {\n        if (m.senderUsername !== user?.userName && m.dateRead === null) {\n          markReadInDB(m.id);\n        }\n      });\n    },\n    [markReadInDB, user]\n  );\n\n  const handleStartConnection = (otherUser: string) => {\n    markReadNavbar(otherUser);\n    markRead(listOfMessagesInFocus![1]);\n    createHubConnection(otherUser);\n  };\n  const handleStopConnection = (otherUser: string) => {\n    console.log(\"STOPPED FOR \" + otherUser);\n    stopHubConnection();\n  };\n\n  useEffect(() => {\n    let otherUser = listOfMessagesInFocus![1].find(\n      (m) => m.recipientUsername !== user?.userName\n    );\n    setOtherUser(otherUser?.recipientUsername!);\n    handleStartConnection(otherUser?.recipientUsername!);\n\n    return () => {\n      cleanOtherUser();\n      handleStopConnection(otherUser?.recipientUsername!);\n    };\n  }, [user, setOtherUser, cleanOtherUser, listOfMessagesInFocus]); \n\n  return (\n    <>\n      <Segment className='scrollRevert'>\n        {listOfMessagesInFocus![1].map((message: IPrivateMessage) => (\n          <Fragment key={message.id}>\n            {message.senderUsername !== user?.userName && (\n              <div className='message-list-item'>\n                <Grid\n                  key={message.id}\n                  style={senderStyles}\n                  textAlign='left'\n                  floated='left'\n                >\n                  <GridRow className='mobile hidden'>\n                    <GridColumn width={2}>\n                      <Image\n                        size='mini'\n                        circular\n                        verticalAlign='middle'\n                        src={message.senderPhotoUrl || \"/assets/user.png\"}\n                      />\n                    </GridColumn>\n\n                    <GridColumn width={14}>{message.content}</GridColumn>\n                  </GridRow>\n                  <GridRow\n                    only={\"mobile\"}\n                    style={{\n                      fontSize: \"smaller\",\n                      paddingTop: \".3rem\",\n                      paddingBottom: \".3rem\",\n                    }}\n                  >\n                    <GridColumn width={14}>{message.content}</GridColumn>\n                  </GridRow>\n                </Grid>\n              </div>\n            )}\n            {message.senderUsername === user?.userName && (\n              <div className='message-list-item'>\n                <Grid style={userStyles} textAlign='right' floated='right'>\n                  <GridRow className='mobile hidden'>\n                    <GridColumn width={1}>\n                      {/* ellipsis vertical */}\n                      <Icon\n                        name='delete'\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => {\n                          setSize(\"mini\");\n                          openModal(\n                            <ConfirmDelete\n                              messageId={message.id}\n                              privateMessageThreadId={\n                                message.privateMessageThreadId\n                              }\n                              recipientUsername={message.recipientUsername!}\n                            />\n                          );\n                        }}\n                      />\n                      <Icon\n                        name='edit'\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => {\n                          setSize(\"mini\");\n                          openModal(\n                            <EditMessage\n                              messageId={message.id}\n                              privateMessageThreadId={\n                                message.privateMessageThreadId\n                              }\n                              content={message.content}\n                              recipientUsername={message.recipientUsername!}\n                              senderPhotoUrl={message.senderPhotoUrl}\n                            />\n                          );\n                        }}\n                      />\n                    </GridColumn>\n\n                    <GridColumn width={13}>{message.content}</GridColumn>\n                    <GridColumn width={2}>\n                      <Image\n                        size='mini'\n                        circular\n                        verticalAlign='middle'\n                        src={message.senderPhotoUrl || \"/assets/user.png\"}\n                      />\n                    </GridColumn>\n                  </GridRow>\n                  <GridRow\n                    only={\"mobile\"}\n                    style={{\n                      fontSize: \"smaller\",\n                      paddingTop: \".3rem\",\n                      paddingBottom: \".3rem\",\n                    }}\n                  >\n                    <GridColumn width={13}>{message.content}</GridColumn>\n                  </GridRow>\n                </Grid>\n              </div>\n            )}\n          </Fragment>\n        ))}\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(PrivateMessageThreadListItem);\n","import React, { useContext, useLayoutEffect, useRef, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\nimport Picker from \"emoji-picker-react\";\nimport { Form, Grid, GridColumn, Icon, Popup } from \"semantic-ui-react\";\n\nconst PrivateMessageReply = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    setRecipient,\n    setMessageThreadId,\n    listOfMessagesInFocus,\n    setUsername,\n    setReply,\n    addReply,\n  } = rootStore.privateMessageStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const [showPicker, setShowPicker] = useState(false);\n\n  const MIN_TEXTAREA_HEIGHT = 12;\n\n  const textareaRef = useRef<any>(null);\n  const [value, setValue] = useState(\"\");\n  const onChange = (event: any) => setValue(event.target.value);\n\n  const onEmojiClick = (event: any, emojiObject: any) => {\n    setValue((prevInput) => prevInput + emojiObject.emoji);\n    setShowPicker(false);\n  };\n\n  useLayoutEffect(() => {\n    // Reset height - important to shrink on delete\n    textareaRef.current.style.height = \"inherit\";\n    // Set height\n    textareaRef.current.style.height = `${Math.max(\n      textareaRef.current.scrollHeight,\n      MIN_TEXTAREA_HEIGHT\n    )}px`;\n    // textareaRef.current.style.fontSize = \"20px\";\n  }, [value]);\n\n  const handleSendReply = (e: any) => {\n    if (e !== null && e.key === \"Enter\") {\n      e.target.value = \"\";\n      if (value === \"\") {\n        e.preventDefault();\n        alert(\"Cannot send an empty message!\");\n      } else {\n        e.preventDefault();\n        setValue(\"\");\n        handleSetRecipient();\n        setMessageThreadId(listOfMessagesInFocus![0]);\n        setReply(value);\n        setUsername(user?.userName!);\n        addReply();\n      }\n    }\n  };\n\n  const handleSendButton = () => {\n    if (value !== \"\") {\n      handleSetRecipient();\n      setMessageThreadId(listOfMessagesInFocus![0]);\n      setReply(value);\n      setUsername(user?.userName!);\n      addReply();\n      setValue(\"\");\n      textareaRef.current.value = \"\";\n    } else {\n      alert(\"Cannot send an empty message!\");\n    }\n  };\n\n  const handleSetRecipient = () => {\n    if (listOfMessagesInFocus![1][0].senderUsername === user?.userName) {\n      setRecipient(\n        listOfMessagesInFocus![1][0].recipientUsername!,\n        user?.image\n      );\n    } else {\n      setRecipient(listOfMessagesInFocus![1][0].senderUsername!, user?.image);\n    }\n  };\n\n  return (\n    <Form>\n      <Grid>\n        <GridColumn width={1}>\n          <div className='smiley-picker'>\n            <Icon\n              name='smile outline'\n              circular\n              onClick={() => setShowPicker((val) => !val)}\n            />\n          </div>\n        </GridColumn>\n        <GridColumn width={1}>\n          <div className='send-button'>\n          <Popup\n                header={'SEND'}\n                trigger={\n              \n                  <Icon name='send' circular onClick={() => handleSendButton()} />\n              }\n               content={'You can also hit enter to send'}\n            />\n          </div>\n        </GridColumn>\n        <GridColumn computer={14} mobile={12}>\n          <div className='textareaRef'>\n            <textarea\n              ref={textareaRef}\n              autoFocus\n              placeholder={t(\"Reply\")}\n              onKeyDown={(e: any) => handleSendReply(e)}\n              onChange={onChange}\n              style={{\n                minHeight: MIN_TEXTAREA_HEIGHT,                \n                resize: \"none\",\n                borderRadius: '20px',\n              }}\n              // className='inside'\n              // \n              value={value}\n            />\n          </div>\n        </GridColumn>\n      </Grid>\n\n      {showPicker && (\n        <Picker\n          pickerStyle={{ width: \"90%\", left: \"5rem\", bottom: \"330px\" }}\n          onEmojiClick={onEmojiClick}\n        />\n      )}\n    </Form>\n  );\n};\n\nexport default observer(PrivateMessageReply);\n","import React, { Fragment } from 'react';\nimport { Segment,  Placeholder } from 'semantic-ui-react';\nconst PrivateMessagesListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header >\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default PrivateMessagesListItemPlaceholder;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Segment } from \"semantic-ui-react\"; //, Loader\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PrivateMessageThreadList from \"./PrivateMessageThreadList\";\nimport PrivateMessageThreadListItem from \"./PrivateMessageThreadListItem\";\nimport PrivateMessageReply from \"./PrivateMessageReply\";\nimport PrivateMessagesListItemPlaceholder from \"./PrivateMessagesListItemPlaceholder\";\n\nconst PrivateMessagesDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadMessages,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n    listOfMessagesInFocus,\n  } = rootStore.privateMessageStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMessages().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMessages();\n  }, [loadMessages]);\n\n  return (\n    <Segment\n      style={{ backgroundColor: \"lightblue\" }}\n      raised\n      id='top'\n      // className='sideScroll'\n    >\n      <Grid style={{ margin: \"0\", padding: \"0\" }}>\n        {loadingInitial && page === 0 ? (\n          <Grid.Row>\n            <Grid.Column width={16}>\n              <PrivateMessagesListItemPlaceholder />\n            </Grid.Column>\n          </Grid.Row>\n        ) : (\n          <Grid.Row>\n            <Grid.Column width={4}>\n              <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && page + 1 < totalPages}\n                initialLoad={false}\n              >\n                <PrivateMessageThreadList />\n              </InfiniteScroll>\n            </Grid.Column>\n\n            <Grid.Column width={12}>\n              <Grid.Row>\n                {listOfMessagesInFocus && <PrivateMessageThreadListItem />}\n\n                <PrivateMessageReply />\n              </Grid.Row>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(PrivateMessagesDashboard);\n","import { useLocation } from \"react-router-dom\";\n\nexport default function useQuery() {\n    return new URLSearchParams(useLocation().search);\n}","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport useQuery from \"../../app/common/util/hooks\";\n\nconst RegisterSuccess = () => {\n  const email = useQuery().get(\"email\") as string;\n  const { t } = useTranslation([\"forms\"]);\n\n  function handleConfirmEmailResend() {\n    agent.User.resendVerifyEmailConfirm(email)\n      .then(() => {\n        toast.success(t(\"Verification email resent - please check your email\"));\n      })\n      .catch((error) => console.log(error));\n  }\n\n  return (\n    <Segment placeholder textAlign='center'>\n      <Header icon color='green'>\n        <Icon name='check' />\n        {t(\"Successfully registered!\")}\n      </Header>\n      <p>\n        {t(\"Please check your email (including junk email) for the verification email\")}\n      </p>\n      {email && (\n        <>\n          <p>{t(\"Didn't receive the email? Click the below button to resend\")}</p>\n          <Button\n            primary\n            onClick={handleConfirmEmailResend}\n            content={t('Resend email')}\n            size='huge'\n          />\n        </>\n      )}\n    </Segment>\n  );\n};\n\nexport default RegisterSuccess;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport agent from '../../app/api/agent';\nimport { Button, Segment, Header, Icon } from 'semantic-ui-react';\nimport LoginForm from './LoginForm';\nimport { toast } from 'react-toastify';\nimport useQuery from '../../app/common/util/hooks';\nimport { useTranslation } from 'react-i18next';\n\nconst VerifyEmail = () => {\n    const email = useQuery().get('email') as string;\n    const token = useQuery().get('token') as string;\n\n  const rootStore = useContext(RootStoreContext);\n  const Status = {\n    Verifying: 'Verifying',\n    Failed: 'Failed',\n    Success: 'Success',\n  };\n\n  const [status, setStatus] = useState(Status.Verifying);\n  const { openModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"forms\"]);\n\n  useEffect(() => {\n    agent.User.verifyEmail(token as string, email as string)\n      .then(() => {\n        setStatus(Status.Success);\n      })\n      .catch(() => {\n        setStatus(Status.Failed);\n      });\n  }, [Status.Failed, Status.Success, token, email]);\n\n  const handleConfirmEmailResend = () => {\n    agent.User.resendVerifyEmailConfirm(email as string)\n      .then(() => {\n        toast.success(t('Verification email resent - please check your email'));\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getBody = () => {\n    switch (status) {\n      case Status.Verifying:\n        return <p>{t(\"Verifying...\")}</p>;\n      case Status.Failed:\n        return (\n          <div className='center'>\n            <p>\n              {t(\"Verication failed - you can try resending the verification email\")}\n            </p>\n            <Button onClick={handleConfirmEmailResend} primary size='huge' content={t('Resend email')} />\n          </div>\n        );\n      case Status.Success:\n        return (\n          <div className='center'>\n            <p>{t(\"Email has been verified - you can now login\")}</p>\n            <Button\n              primary\n              onClick={() => openModal(<LoginForm />)}\n              size='large'\n              content={t('Login')}\n            />\n          </div>\n        );\n    }\n\n  };\n  return (\n    <Segment placeholder>\n        <Header icon>\n            <Icon name='envelope' />\n            {t(\"Email verification\")}\n        </Header>\n\n        <Segment.Inline>\n            {getBody()}\n        </Segment.Inline>\n    </Segment>\n)\n};\n\nexport default VerifyEmail","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport useQuery from \"../../app/common/util/hooks\";\n\nconst SendRequestResetPasswordSuccess = () => {\n  const email = useQuery().get(\"email\") as string;\n  const { t } = useTranslation([\"forms\"]);\n\n  function handleResetPasswordResend() {\n    agent.User.resendPasswordRequest(email)\n      .then(() => {\n        toast.success(t(\"Password reset link resent - please check your email\"));\n      })\n      .catch((error) => console.log(error));\n  }\n\n  return (\n    <Segment placeholder textAlign='center'>\n      <Header icon color='green'>\n        <Icon name='check' />\n        {t(\"Password reset link sent\")}\n      </Header>\n      <p>\n        {t(\"Please check your email (including junk email) for the password reset link\")}\n      </p>\n      {email && (\n        <>\n          <p>{t(\"Didn't receive the email? Click the below button to resend\")}</p>\n          <Button\n            primary\n            onClick={handleResetPasswordResend}\n            content={t('Resend request')}\n            // content={t('Resend email')}\n            size='huge'\n          />\n        </>\n      )}\n    </Segment>\n  );\n};\n\nexport default SendRequestResetPasswordSuccess;\n","import React, { useContext } from \"react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { Button, Form, Header, Icon, Segment } from \"semantic-ui-react\";\nimport { FORM_ERROR } from \"final-form\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport TextInput from \"../../app/common/form/TextInput\";\n\nimport useQuery from \"../../app/common/util/hooks\";\nimport { useTranslation } from \"react-i18next\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport {\n  combineValidators,\n  composeValidators,\n  matchesField,\n  isRequired,\n  matchesPattern\n} from \"revalidate\";\n\nconst ResetPasswordForm = () => {\n  const email = useQuery().get(\"email\") as string;\n  const token = useQuery().get(\"token\") as string;\n\n  const rootStore = useContext(RootStoreContext);\n  const { resetPassword } = rootStore.userStore;\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const regexRule = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n  const validate = combineValidators({\n    password: composeValidators(\n\n      isRequired({ message: t(\"Password is required\") }),\n      matchesPattern((regexRule))({message: t(\"Password requires a minimum of eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\")})\n    )(),\n    \n    \n    confirmPassword: composeValidators(\n      isRequired({ message: t(\"Confirmation of password is required\") }),\n      matchesField(\n        \"password\",\n        \"confirmPassword\"\n      )({\n        message: t(\"Passwords do not match\"),\n      }),\n    )(),\n    \n  });\n\n  //\n\n\n  const handleResetPassword = async (values: any) => {\n    resetPassword(token, email, values.password)\n  };\n\n  return (\n    <Segment placeholder>\n      <Header icon>\n        <Icon name='envelope' />\n        {t(\"Forgotten password\")}\n      </Header>\n\n      <FinalForm\n        onSubmit=\n        {(values: IUserFormValues) =>\n          handleResetPassword(values).catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n        }\n\n       \n        validate={validate}\n        render={({\n          handleSubmit,\n          submitting,\n          invalid,\n          pristine,\n        }) => (\n          <Form\n            onSubmit={handleSubmit}\n            autoComplete='off'\n            style={{paddingBottom:\"8rem\"}}\n          >\n            <Header\n              as='h2'\n              content={t('Reset password')}\n              color='teal'\n              textAlign='center'\n            />\n            <Field\n              name='password'\n              component={TextInput}\n              placeholder={t(\"Password\")}\n              type='password'\n            />\n            <Field\n              name='confirmPassword'\n              component={TextInput}\n              placeholder={t(\"Confirm Password\")}\n              type='password'\n            />\n\n            <Button\n              disabled={invalid || pristine}\n              loading={submitting}\n              color='teal'\n              content={t('Reset your password')}\n              fluid\n            />\n          </Form>\n        )}\n      />\n    </Segment>\n  );\n};\n\nexport default ResetPasswordForm;\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"../../features/nav/NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport HomePage from \"../../features/home/HomePage\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport GalleryDashboard from \"../../features/gallery/dashboard/GalleryDashboard\";\nimport MechanicDashboard from \"../../features/mechanics/dashboard/MechanicDashboard\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport ProductDetails from \"../../features/shop/details/ProductDetails\";\nimport NotFound from \"./NotFound\";\nimport { ToastContainer } from \"react-toastify\";\nimport LoginForm from \"../../features/user/LoginForm\";\nimport { RootStoreContext } from \"../stores/rootStore\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\nimport GaleryDetails from \"../../features/gallery/details/GaleryDetails\";\nimport ForumDashboard from \"../../features/forum/dashboard/ForumDashboard\";\nimport ForumForm from \"../../features/forum/form/ForumForm\";\nimport ForumDetails from \"../../features/forum/details/ForumDetails\";\nimport MechanicDetails from \"../../features/mechanics/details/MechanicDetails\";\nimport MechanicForm from \"../../features/mechanics/form/MechanicForm\";\nimport GalleryForm from \"../../features/gallery/form/GalleryForm\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport ConfirmDelete from \"../../features/gallery/modals/ConfirmDelete\";\nimport ProductDashboard from \"../../features/shop/dashboard/ProductDashboard\";\nimport ProductForm from \"../../features/shop/forms/ProductForm\";\nimport FeedDashboard from \"../../features/feed/dashboard/FeedDashboard\";\nimport PeopleDashboard from \"../../features/people/dashboard/PeopleDashboard\";\nimport DiaryEntryForm from \"../../features/activities/form/DiaryEntryForm\";\nimport PrivateMessagesDashboard from \"../../features/private_messages/PrivateMessagesDashboard\";\nimport RegisterSuccess from \"../../features/user/RegisterSuccess\";\nimport VerifyEmail from \"../../features/user/VerifyEmail\";\nimport { useTranslation } from \"react-i18next\";\nimport SendRequestResetPasswordSuccess from \"../../features/user/SendRequestResetPasswordSuccess\";\nimport ResetPasswordForm from \"../../features/user/ResetPasswordForm\";\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n  const { createHubConnection } = rootStore.presenceStore;\n\n  const { t } = useTranslation([\"home\"]);\n\n  useEffect(() => {\n    if (token) {\n      getUser().finally(() => setAppLoaded());\n      //==00\n      createHubConnection();\n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token, createHubConnection]);\n\n  if (!appLoaded) return <LoadingComponent content={t(\"Loading app...\")} />;\n  return (\n    <>\n      <ModalContainer />\n      <ToastContainer position='top-right' />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <Switch>\n                <PrivateRoute\n                  exact\n                  path='/activities'\n                  component={ActivityDashboard}\n                />\n                <PrivateRoute\n                  path='/activities/:id'\n                  component={ActivityDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createDiary\", \"/manage/:id\"]}\n                  component={ActivityForm}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\n                    \"/createDiaryEntry/:activityId\",\n                    \"/manageDiaryEntry/:id/:activityId\",\n                  ]}\n                  component={DiaryEntryForm}\n                />\n\n                <PrivateRoute\n                  exact\n                  path='/gallery'\n                  component={GalleryDashboard}\n                />\n                <PrivateRoute path='/gallery/:id' component={GaleryDetails} />\n                <PrivateRoute\n                  path={[\"/galleryForm\", \"/manageGallery/:id\"]}\n                  key={location.key}\n                  component={GalleryForm}\n                />\n                <PrivateRoute exact path='/forum' component={ForumDashboard} />\n                <PrivateRoute\n                  exact\n                  path='/forum/:id'\n                  component={ForumDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/forumform\", \"/manageForum/:id\"]}\n                  component={ForumForm}\n                />\n                <PrivateRoute\n                  exact\n                  path='/mechanics'\n                  component={MechanicDashboard}\n                />\n                <PrivateRoute\n                  path='/mechanics/:id'\n                  component={MechanicDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/mechanicForm\", \"/manageMechanic/:id\"]}\n                  component={MechanicForm}\n                />\n\n                <PrivateRoute exact path='/shop' component={ProductDashboard} />\n                <PrivateRoute path='/product/:id' component={ProductDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/productForm\", \"/manageProduct/:id\"]}\n                  component={ProductForm}\n                />\n                <PrivateRoute\n                  exact\n                  path='/privateMessages'\n                  component={PrivateMessagesDashboard}\n                />\n\n                <PrivateRoute exact path='/feed' component={FeedDashboard} />\n                <PrivateRoute\n                  exact\n                  path='/people'\n                  component={PeopleDashboard}\n                />\n\n                <PrivateRoute\n                  path='/profile/:username'\n                  component={ProfilePage}\n                />\n                <Route\n                  path='/user/registerSuccess'\n                  component={RegisterSuccess}\n                />\n                <Route path='/user/verifyEmail' component={VerifyEmail} />\n                <Route path='/user/sendRequestResetPasswordSuccess' component={SendRequestResetPasswordSuccess} />\n                <Route path='/user/ResetPasswordForm' component={ResetPasswordForm} />\n                <Route path='/login' component={LoginForm} />\n                <Route path='/confirmDelete' component={ConfirmDelete} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </>\n  );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { withRouter } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\n\n const ScrollToTop = ({children, location: {pathname}}: any) => {\n     useEffect(()=> {\n         window.scrollTo(0, 0);\n     }, [pathname]);\n\n     return children;\n };\n \n export default withRouter(ScrollToTop);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    backend: {\n      // translation file path\n      loadPath: \"/assets/i18n/{{ns}}/{{lng}}.json\",\n    },\n    fallbackLng: \"en\",\n    // disable for prod\n    debug: false,\n    ns: [\"home\", \"navbar\", \"diaries\", \"gallery\", \"widget\", \"forum\", \"comments\", \"modals\", \"mechanics\", \"shop\", \"social\"], \n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n      formatSeparator: \",\",\n    },\n    react: {\n      // wait: true,\n      useSuspense: true,\n    },\n  });\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"./app/layout/styles.css\";\nimport App from \"./app/layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\nimport dateFnsLocalizer from \"react-widgets-date-fns\";\nimport \"./i18.n\";\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <Suspense fallback={null}>\n        <App />\n      </Suspense>\n    </ScrollToTop>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}