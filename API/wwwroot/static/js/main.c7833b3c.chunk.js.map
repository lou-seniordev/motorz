{"version":3,"sources":["app/api/agentUtil.ts","app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/forumPostStore.ts","app/stores/motofyStore.ts","app/stores/mechanicStore.ts","app/stores/brandStore.ts","app/stores/productStore.ts","app/stores/commentStore.ts","app/stores/countryStore.ts","app/stores/feedStore.ts","app/stores/peopleStore.ts","app/stores/privateMessageStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/modals/SearchDiaries.tsx","features/activities/dashboard/ActivityMobileFilters.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/ErrorMessage.tsx","app/common/form/TextInput.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/gallery/dashboard/GalleryListItemEmbracers.tsx","features/gallery/dashboard/GalleryListItem.tsx","features/gallery/dashboard/GalleryList.tsx","features/gallery/modals/GalleryChamps.tsx","features/gallery/dashboard/GalleryFilters.tsx","features/gallery/modals/SearchGallery.tsx","features/gallery/dashboard/GalleryMobileFilters.tsx","features/gallery/dashboard/GalleryListItemPlaceholder.tsx","features/gallery/dashboard/GalleryDashboard.tsx","features/mechanics/dashboard/MechanicListItem.tsx","features/mechanics/dashboard/MechanicList.tsx","features/mechanics/dashboard/MechanicFilters.tsx","features/mechanics/dashboard/MechanicListItemPlaceholder.tsx","features/mechanics/modals/SearchMechanic.tsx","features/mechanics/modals/SearchMechanicByCountry.tsx","features/mechanics/dashboard/MechanicMobileFilters.tsx","features/mechanics/dashboard/MechanicDashboard.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/modals/ConfirmDeactivate.tsx","features/activities/modals/ConfirmDelete.tsx","features/activities/details/ActivityDetailedManager.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/modals/SeeDiaryEntry.tsx","features/activities/details/ActivityDetailedSidebarRight.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/modals/AllAttendeesList.tsx","features/activities/details/ActivityDetailedSidebarLeft.tsx","features/activities/details/ActivityDetails.tsx","features/profiles/forms/ContactForm.tsx","features/shop/modals/ConfirmDelete.tsx","features/shop/details/ProductDetailedInfo.tsx","features/shop/details/ProductDetailsStatistics.tsx","features/shop/details/ProductDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileMotofies.tsx","features/profiles/ProfileForumposts.tsx","features/profiles/ProfileMechanics.tsx","features/profiles/ProfileProducts.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","features/gallery/details/GaleryDetailedChat.tsx","features/gallery/modals/ConfirmDelete.tsx","features/gallery/details/GaleryDetailedHeader.tsx","features/gallery/details/GaleryDetailedRating.tsx","features/gallery/details/GaleryDetailedSidebar.tsx","features/gallery/details/GalleryDetailedInfo.tsx","features/gallery/details/GaleryDetails.tsx","features/forum/dashboard/ForumListItem.tsx","features/forum/dashboard/ForumList.tsx","app/common/options/forumCategoryOptions.ts","features/forum/dashboard/ForumFilters.tsx","features/forum/dashboard/ForumListItemPlaceholder.tsx","features/forum/modals/SearchForum.tsx","features/forum/modals/SearchForumByCategory.tsx","features/forum/dashboard/ForumMobileFilters.tsx","features/forum/dashboard/ForumDashboard.tsx","app/models/forumpost.ts","features/forum/form/ForumForm.tsx","features/forum/details/ForumDetailedChat.tsx","features/forum/details/ForumDetailedHeader.tsx","features/forum/details/ForumDetailedInfo.tsx","features/forum/modals/ConfirmDelete.tsx","features/forum/details/ForumDetailedManager.tsx","features/forum/details/ForumDetailedRating.tsx","features/forum/details/ForumDetailedSidebar.tsx","features/forum/details/ForumDetails.tsx","app/common/options/ratingOptions.ts","app/common/options/yesNoOptions.ts","features/mechanics/modals/ConfirmBecomeCustomer.tsx","features/mechanics/form/CustomerForm.tsx","features/mechanics/details/MechanicDetailedChat.tsx","features/mechanics/details/MechanicDetailedHeader.tsx","features/mechanics/details/MechanicDetailedInfo.tsx","features/mechanics/modals/ConfirmDelete.tsx","features/mechanics/details/MechanicDetailedManager.tsx","features/mechanics/modals/ShowTestimonial.tsx","features/mechanics/details/MechanicDetailedSidebar.tsx","features/mechanics/details/MechanicDetails.tsx","app/models/mechanic.ts","app/common/options/yearOptions.ts","app/common/options/motoOptions.ts","app/common/form/SelectMultiple.tsx","features/mechanics/form/MechanicForm.tsx","app/models/motofy.ts","features/gallery/form/GalleryForm.tsx","app/layout/PrivateRoute.tsx","features/shop/dashboard/ProductListItem.tsx","features/shop/dashboard/ProductList.tsx","app/common/options/productOptions.ts","features/shop/dashboard/ProductFilters.tsx","features/shop/dashboard/ProductListItemPlaceholder.tsx","features/shop/dashboard/ProductDashboard.tsx","app/models/product.ts","features/shop/forms/ProductForm.tsx","features/feed/dashboard/FeedListItem.tsx","features/feed/dashboard/FeedList.tsx","features/feed/dashboard/FeedListItemPlaceholder.tsx","features/feed/dashboard/FeedDashboard.tsx","features/people/dashboard/PeopleListItem.tsx","features/people/dashboard/PeopleList.tsx","features/people/dashboard/PeopleListItemPlaceholder.tsx","features/people/dashboard/PeopleDashboard.tsx","app/common/options/moodOptions.ts","app/common/options/weatherOptions.ts","app/common/options/roadOptions.ts","features/activities/form/DiaryEntryForm.tsx","features/private_messages/PrivateMessageThreadList.tsx","features/private_messages/PrivateMessageThreadListItem.tsx","features/private_messages/PrivateMessageReply.tsx","features/private_messages/PrivateMessagesListItemPlaceholder.tsx","features/private_messages/PrivateMessagesDashboard.tsx","app/common/util/hooks.ts","features/user/RegisterSuccess.tsx","features/user/VerifyEmail.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","i18.n.js","index.tsx"],"names":["responseBody","response","data","postMotofy","url","motofy","motofyData","FormData","append","id","name","brandName","model","cubicCentimeters","file","description","yearOfProduction","datePublished","city","countryName","pricePaid","estimatedValue","numberOfKilometers","axios","post","headers","then","postProduct","product","productData","title","brand","category","price","phoneNumber","postDiaryEntry","diaryEntry","diaryEntryData","activityId","body","mood","road","weather","String","locationCountry","locationCity","postMechanic","mechanic","isCustomer","customers","isOwner","customerRecommended","mechanicData","brands","owner","yearOfStart","address","email","phone","website","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","Authorization","error","Promise","reject","undefined","message","toast","status","history","push","startsWith","removeItem","info","method","errors","hasOwnProperty","requests","get","put","delete","formData","list","params","details","create","activity","update","deactivate","attend","unattend","current","login","user","register","verifyEmail","resendVerifyEmailConfirm","embrace","unembrace","rate","rating","username","listPeople","uploadPhoto","photo","setMain","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","listMotofies","listForumposts","listMechanics","listProducts","forumpost","becomecustomer","newCustomer","recommend","mechanicRecomend","mechanicRate","addtestimonial","testimonial","markSold","toogleActivate","visitCounter","limit","page","addFeedItem","createDiaryEntry","deleteDiaryEntry","detailsDiaryEntry","updateDiaryEntry","console","log","checkUnread","markRead","setActivityProps","date","Date","isGoing","attendees","some","a","userName","isHost","setMotofyProps","embraced","embracers","publisherUsername","createAttendee","displayName","image","createEmbracer","ActivityStore","observable","ref","constructor","rootStore","getActivity","this","activityRegistry","reaction","keys","clear","loadActivities","URLSearchParams","forEach","value","key","toISOString","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","activites","sortedActivities","sort","b","getTime","Object","entries","reduce","activities","split","Map","action","set","computed","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","state","invoke","catch","on","comment","runInAction","comments","stop","async","loadingInitial","activitiesEnvelope","agent","axiosParams","userStore","toJS","submitting","attendee","loading","filter","dark","dayNumber","diaryEntries","length","index","findIndex","x","splice","indexOf","setItem","appLoaded","ModalStore","shallow","open","size","modal","content","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","loadingMotofies","motofies","userMotofies","loadingForumposts","forumposts","userForumposts","loadingMechanics","mechanics","userMechanics","loadingProducts","products","userProducts","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","UserStore","setToken","modalStore","closeModal","ForumPostStore","getForumPost","forumPostRegistry","loadForumPosts","forumPostCount","formatForumpostsDate","dateAdded","summComments","commentForumPosts","reduceCommenters","result","map","item","has","createdAt","rated","connectionArgument","commenters","forumpostId","forumpostEnvelope","forumpostCount","numberOfComents","forumpostRatings","editMode","target","MotofyStore","getMotofy","motofyRegistry","loadMotofies","mostEmbraced","highestRatedMotofy","motofyCount","parse","commentMotofies","motofiesEnvelope","newRating","score","newScore","motofyScores","embracer","MechanicStore","getMechanic","mechanicRegistry","loadMechanics","mechanicCount","openCustomerForm","commentMechanics","clearMechanic","mechanicsEnvelope","country","hasRecommended","customerToApi","mechanicId","customerForClient","isRecommended","rateMechanic","addRating","ratings","text","testimonialToUI","uuid","toString","BrandStore","ProductStore","getProduct","productRegistry","loadProducts","productCount","productEnvelope","viewers","isSold","isActive","productFollowed","productViewer","CommentStore","motofyId","CountryStore","countries","FeedStore","feedCount","groupFeedItemsByDate","feedRegistry","feeds","sortedFeeds","dateTriggered","feed","formatDate","replace","feedEnvelope","PeopleStore","peopleRegistry","loadPeople","peopleCount","loadingPeople","peopleEnvelope","people","person","PrivateMessageStore","counterUnread","groupMessagesByThreadId","messageRegistry","messages","sortedMessages","dateSent","threadId","privateMessageThreadId","messageThreadId","setTimeout","setView","err","messageToSend","recipientUsername","messageContent","messagesEnvelope","privateMessages","privateMessageThreadsCount","totalPages","messageThreadsCount","listOfMessagesInFocus","messagesByThreadId","m","dateRead","userPhotoUrl","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","forumPostStore","motofyStore","mechanicStore","brandStore","productStore","commentStore","countryStore","feedStore","peopleStore","privateMessageStore","CommonStore","observer","useContext","logout","isLoggedIn","unreadPrivateMessages","getUnreadPrivate","i18n","t","useTranslation","menuRef","useRef","closeStackableMenu","actionMenu","parentNode","actionIcon","classList","remove","useEffect","onclick","e","menu","contains","add","preventDefault","i18next","changeLanguage","setInterval","Container","Menu","style","textAlign","fixed","stackable","inverted","pointing","Item","as","NavLink","exact","to","src","alt","marginRight","onClick","Link","Dropdown","className","floating","labeled","Label","color","Popup","position","trigger","onChange","handleLanguageChange","placeholder","Image","avatar","spaced","icon","setPredicate","calendarFilter","setCalendarFilter","useState","styles","SegmentGroup","raised","vertical","width","active","Input","onKeyDown","handleResultSelect","Divider","horizontal","Icon","ActivityListItemPlaceholder","Placeholder","fluid","Segment","Group","minHeight","Header","Line","Paragraph","secondary","clearing","Button","disabled","SearchDiaries","Grid","Column","openModal","widths","top","borderColor","borderWidth","ActivityListItemAttendees","List","header","circular","bordered","ActivityListItem","host","h","when","starting_point","destination","panels","format","join","departure","marginBottom","Content","verticalAlign","Meta","Accordion","styled","exclusive","Description","substring","activitiesByDate","group","divided","setPage","loadingNext","setLoadingNext","mobile","tablet","computer","pageStart","loadMore","hasMore","initialLoad","Sticky","Loader","ErrorMessage","Message","statusText","flat","i","TextInput","input","type","meta","touched","Form","Field","basic","LoginForm","validate","combineValidators","isRequired","password","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","autoComplete","component","RegisterForm","isValidEmail","createValidator","test","composeValidators","confirmPassword","matchesField","HomePage","ActivityFormValues","init","motorcycleBrandId","motorcycleBrandName","motorcycleBrandLogoUrl","time","countryId","assign","DiaryEntryFormValues","entryDate","photoUrl","TextAreaInput","rows","SelectInput","options","Select","search","selection","DateInput","rest","onBlur","match","createActivity","editActivity","loadActivity","loadCountriesToSelect","loadBrandsToSelect","setEditMode","hasLengthGreaterThan","setActivity","setLoading","finally","initialValues","newId","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","floated","positive","GalleryListItemEmbracers","padding","margin","display","alignItems","Row","brandLogoUrl","centered","motofiesByDate","GalleryChamps","attached","handleOpenChamps","cursor","SearchGallery","GalleryListItemPlaceholder","mechanicImageStyle","testPositionStyles","MechanicListItem","rounded","Extra","averageRating","mechanicsByDate","clearable","MechanicListItemPlaceholder","SearchMechanic","SearchMechanicByCountry","LoadingComponent","Dimmer","createHubConnection","stopHubConnection","addComment","border","Comment","maxWidth","Avatar","Author","Metadata","formatDistance","Text","form","reset","labelPosition","ConfirmDeactivate","deactivateActivity","useHistory","ConfirmDelete","deleteActivity","attendActivity","cancelAttendance","managing","setManaging","handleCancelAttendance","handleAttendActivity","ActivityDetailedInfo","whiteSpace","SeeDiaryEntry","diary","actualDiary","setActualDiary","counter","parseInt","numberDiaries","handleChange","diaryDay","addSuffix","Subheader","GridColumn","Number","handleDeleteEntry","diariesByDate","slice","day","days","relaxed","entry","handleOpenDiaryModal","animated","setSize","persons","corner","hasLengthLessThan","sendMessage","productId","deleteProduct","followProduct","unfollowProduct","setProductFollowed","viewer","sellerUsername","minWidth","columns","sellerDisplayName","handleUnfollowProduct","handleMarkSold","sub","numberSeen","inactivityExpirationDate","numberFollowed","loadProduct","NotFound","Inline","primary","Modal","onClose","dropZoneStyles","borderRadius","paddingTop","height","dropZoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","useDropzone","PhotoWidgetCropper","setImage","imagePreview","cropper","initialAspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","overflow","isCurrentUser","setMainPhoto","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","doubling","currentTarget","negative","bio","ProfileCard","extra","ProfileFollowings","loadUserActivities","panes","menuItem","pane","onTabChange","handleTabChange","objectFit","loadUserMotofies","loadUserForumposts","loadUserMechanics","loadUserProducts","pictureUrl","mobilePanes","ProfileActivities","ProfileContent","setActiveTab","menuPosition","fontSize","Statistic","label","followingCount","Reveal","visible","hidden","loadProfile","deleteMotofy","handleDeleteMotofy","motofyImageStyle","buttonVisitorStyle","backgroundColor","motofyImageTextStyle","left","embraceMotofy","unembraceMotofy","handleUnembraceMotofy","handleEmbraceMotofy","rateMotofy","setRated","userRated","setUserRated","flexDirection","justifyContent","onRate","handleRate","defaultRating","maxRating","ItemExtra","GalleryDetailedInfo","GridRow","iconStyle","loadMotofy","ForumListItem","Response","Responses","Member","Members","Rating","Ratings","forumpostsByDate","ForumListItemPlaceholder","SearchForum","SearchForumByCategory","ForumpostFormValues","createForumpost","editForumpost","loadForumPost","setForumpost","newForumpost","activityImageStyle","activityImageTextStyle","bottom","forumpostRating","authorPhotoUrl","toFixed","deleteForumpost","setRating","authorUsername","handleRating","commenter","ratingOptions","yesNo","ConfirmBecomeCustomer","becomeCustomer","addTestimonial","setCloseCustomerForm","CustomerForm","Checkbox","checked","mechanicImageTextStyle","publisher","logoUrl","deleteMechanic","setCustomer","setOpenCustomerForm","handleView","localMechanic","customer","ShowTestimonial","mechanicShop","handleShowTestimonial","ready","setReady","loadMechanic","MechanicFromValues","year","motoOptions","SelectMultiple","multiple","ownerOptions","createMechanic","editMechanic","random","floor","motomoto","isNumeric","setMechanic","uploaded","setUploaded","edited","setEdited","imageToUpload","setImageToUpload","previewImage","setPreviewImage","imageToSet","newMechanic","raws","MotofyFormValues","brandId","createMotofy","editMotofy","setMotofy","goForward","newMotofy","Component","props","descriptionUiShort","productsByDate","categories","ProductFilters","ProductListItemPlaceholder","ProductFormValues","sellerId","isAdvertised","dateActivated","dateAdvertised","createProduct","editProduct","setProduct","newProduct","now","FeedListItem","Event","notifierPhotoUrl","Summary","User","notifierUsername","notifierDisplayname","feedByDate","gr","FeedListItemPlaceholder","loadFeed","PeopleListItem","member","displayPeople","setInput","onInput","handleSearchResults","PeopleListItemPlaceholder","cleanPeople","loadDiaryEntry","editDiaryEntry","setdiaryEntry","path","uiId","newDiaryEntry","markReadInDB","setInitialView","senderUsername","senderPhotoUrl","senderDisplayName","fontWeight","userStyles","marginTop","marginLeft","senderStyles","only","setRecipient","setMessageThreadId","setUsername","setReply","addReply","showPicker","setShowPicker","textareaRef","setValue","useLayoutEffect","max","scrollHeight","handleSetRecipient","autoFocus","handleSendReply","event","resize","val","pickerStyle","onEmojiClick","emojiObject","prevInput","emoji","PrivateMessagesListItemPlaceholder","loadMessages","useQuery","useLocation","RegisterSuccess","success","VerifyEmail","Status","setStatus","handleConfirmEmailResend","getBody","withRouter","location","setAppLoaded","getUser","ActivityDashboard","ActivityDetails","ActivityForm","DiaryEntryForm","GalleryDashboard","GaleryDetails","GalleryForm","ForumDashboard","ForumDetails","ForumForm","MechanicDashboard","MechanicDetails","MechanicForm","ProductDashboard","ProductDetails","ProductForm","PrivateMessagesDashboard","FeedDashboard","PeopleDashboard","ProfilePage","Boolean","hostname","children","pathname","scrollTo","Backend","LanguageDetector","initReactI18next","backend","loadPath","fallbackLng","debug","ns","interpolation","escapeValue","formatSeparator","react","useSuspense","dateFnsLocalizer","createBrowserHistory","ReactDOM","fallback","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.c7833b3c.chunk.js","sourcesContent":["import { IDiaryEntry } from './../models/activity';\nimport axios, { AxiosResponse } from \"axios\";\nimport { IMechanic } from \"../models/mechanic\";\nimport { IMotofy } from \"../models/motofy\";\nimport { IProduct } from \"../models/product\";\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nexport const postMotofy = {\n  motofyForm: (url: string, motofy: IMotofy) => {\n    let motofyData = new FormData();\n    motofyData.append('Id', motofy.id!)\n    motofyData.append('Name', motofy.name)\n    motofyData.append('BrandName', motofy.brandName)\n    motofyData.append('Model', motofy.model)\n    motofyData.append('CubicCentimeters', motofy.cubicCentimeters)\n    motofyData.append('File', motofy.file);\n    motofyData.append('Description', motofy.description!)\n    motofyData.append('YearOfProduction', motofy.yearOfProduction!)\n    motofyData.append('DatePublished', motofy.datePublished!)\n    motofyData.append('City', motofy.city)\n    motofyData.append('Country', motofy.countryName)\n    motofyData.append('PricePaid', motofy.pricePaid)\n    motofyData.append('EstimatedValue', motofy.estimatedValue)\n    motofyData.append('NumberOfKilometers', motofy.numberOfKilometers)\n    return axios.post(url, motofyData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\nexport const postProduct = {\n  productForm: (url: string, product: IProduct) => {\n    let productData = new FormData();\n    productData.append('Id', product.id!)\n    productData.append('Title', product.title)\n    productData.append('Description', product.description!)\n    productData.append('brand', product.brand)\n    productData.append('Model', product.model)\n    productData.append('Category', product.category)\n    productData.append('File', product.file);\n    productData.append('Country', product.countryName)\n    productData.append('City', product.city)\n    productData.append('Price', product.price)\n    productData.append('PhoneNumber', product.phoneNumber)\n    return axios.post(url, productData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\nexport const postDiaryEntry = {\n  diaryEntryForm: (url: string, diaryEntry: IDiaryEntry) => {\n    let diaryEntryData = new FormData();\n    diaryEntryData.append('Id', diaryEntry.id!)\n    diaryEntryData.append('ActivityId', diaryEntry.activityId)\n    diaryEntryData.append('Body', diaryEntry.body)\n    diaryEntryData.append('Mood', diaryEntry.mood!)\n    diaryEntryData.append('Road', diaryEntry.road!)\n    diaryEntryData.append('Weather', diaryEntry.weather!)\n    diaryEntryData.append('NumberOfKilometers', String(diaryEntry.numberOfKilometers!))\n    diaryEntryData.append('File', diaryEntry.file) \n    diaryEntryData.append('LocationCountry', diaryEntry.locationCountry)\n    diaryEntryData.append('LocationCity', diaryEntry.locationCity)\n\n    return axios.post(url, diaryEntryData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\n\nexport const postMechanic = {\n  mechanicForm: (url: string, mechanic: IMechanic) => {\n    let isCustomer = String(mechanic.customers[0].isCustomer);\n    let isOwner = String(mechanic.customers[0].isOwner);\n    let customerRecommended = String(mechanic.customers[0].customerRecommended);\n    let mechanicData = new FormData();\n    mechanicData.append('Id', mechanic.id!)\n    mechanicData.append('MechanicBrands', mechanic.brands)\n    mechanicData.append('Name', mechanic.name)\n    mechanicData.append('Owner', mechanic.owner)\n    mechanicData.append('Description', mechanic.description!)\n    mechanicData.append('YearOfStart', mechanic.yearOfStart!)\n    mechanicData.append('Country', mechanic.countryName)\n    mechanicData.append('City', mechanic.city)\n    mechanicData.append('Address', mechanic.address)\n    mechanicData.append('Email', mechanic.email)\n    mechanicData.append('Phone', mechanic.phone)\n    mechanicData.append('Website', mechanic.website)\n    mechanicData.append('Testimonial', mechanic.description!)\n    mechanicData.append('IsCustomer', isCustomer!)\n    mechanicData.append('IsOwner', isOwner!)\n    mechanicData.append('CustomerRecommended', customerRecommended!)\n    // mechanicData.append('Customers', mechanic.customers)\n    mechanicData.append('File', mechanic.file)\n    return axios.post(url, mechanicData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody);\n  }\n};\n\n//   export default {\n//     specialRequests,\n//     postProduct,\n//     postMechanic\n//   }","import { IProfileEnvelope } from './../models/profile';\nimport { IRateMotofy } from './../models/motofy';\nimport { IMotofy, IMotofyEnvelope } from './../models/motofy'; \nimport axios, { AxiosResponse } from 'axios';\nimport { history } from '../..';\nimport { IActivity, IActivitiesEnvelope, IDiaryEntry } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { IPhoto, IProfile } from '../models/profile';\nimport { IForumpost, IForumpostEnvelope, IRateForumpost } from '../models/forumpost';\nimport { IMechanic, IMechanicCustomerToBecome, IMechanicRate, IMechanicRecommend, IMechanicsEnvelope } from '../models/mechanic';\nimport { IBrand } from '../models/brand';\nimport { IProduct, IProductsEnvelope } from '../models/product';\nimport { ICountry } from '../models/country';\nimport { postDiaryEntry, postMotofy } from './agentUtil';\nimport { postProduct } from './agentUtil';\nimport { postMechanic } from './agentUtil';\nimport { IFeedEnvelope } from '../models/feed';\nimport { IPrivateMessageEnvelope, IPrivateMessageToSend } from '../models/privatemessages';\n// import { resolve } from 'dns';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n// axios.defaults.baseURL = 'http://localhost:5000/api';\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers!.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - API not responsive');\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push('/notfound');\n  }\n  if (status === 401\n    && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\", error_description=\"The token expired')) {\n    window.localStorage.removeItem('jwt');\n    history.push('/');\n    toast.info('Your session has expired, please login again')\n  }\n  if (\n    status === 400 &&\n    config.method === 'get' &&\n    data.errors.hasOwnProperty('id')\n  ) {\n    history.push('/notfound');\n  }\n  if ((status === 404) || (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id'))) {\n    history.push('/notfound')\n  }\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n  // console.log(error.response);\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\n// const sleep = (ms: number) => (response: AxiosResponse) =>\n//   new Promise<AxiosResponse>((resolve) =>\n//     setTimeout(() => resolve(response), ms)\n//   );\n\nconst requests = {\n  get: (url: string) =>\n    axios.get(url)\n      // .then(sleep(1000))\n      .then(responseBody),\n  post: (url: string, body: {}) =>\n    axios.post(url, body)\n      // .then(sleep(1000))\n      .then(responseBody),\n  put: (url: string, body: {}) =>\n    axios.put(url, body)\n      // .then(sleep(1000))\n      .then(responseBody),\n  delete: (url: string) =>\n    axios.delete(url)\n      // .then(sleep(1000))\n      .then(responseBody),\n\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    // console.log('photo file From agent: ', file)\n\n    return axios.post(url, formData, {\n      headers: { 'Content-type': 'multipart/form-data' }\n    })\n      .then(responseBody)\n  }\n};\n\n\nconst Motofies = {\n  // list: (limit?: number, page?: number): Promise<IMotofyEnvelope> => \n  // requests.get(`motofies?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  //  uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/`, photo),\n\n  list: (params: URLSearchParams): Promise<IMotofyEnvelope> =>\n    axios.get('/motofies', { params: params })\n      // .then(sleep(1000))\n      .then(responseBody),\n  details: (id: string) => requests.get(`/motofies/${id}`),\n  create: (motofy: IMotofy) => postMotofy.motofyForm('/motofies', motofy),\n  update: (motofy: IMotofy) =>\n    requests.put(`/motofies/${motofy.id}`, motofy),\n  delete: (id: string) => requests.delete(`/motofies/${id}`),\n  embrace: (id: any) => requests.post(`/motofies/${id}/embrace`, {}),\n  unembrace: (id: any) => requests.delete(`/motofies/${id}/embrace`),\n  rate: (id: string, rating: IRateMotofy) => requests.put(`/motofies/${id}/rate`, rating)\n};\n\nconst Mechanics = {\n  list: (params: URLSearchParams): Promise<IMechanicsEnvelope> =>\n    axios.get('/mechanics', { params: params }).then(responseBody),//then(sleep(1000)).\n\n  details: (id: string) => requests.get(`/mechanics/${id}`),\n  create: (mechanic: IMechanic) => postMechanic.mechanicForm('/mechanics', mechanic),\n  update: (mechanic: IMechanic) => requests.put(`/mechanics/${mechanic.id}`, mechanic),\n  becomecustomer: (newCustomer: IMechanicCustomerToBecome) => requests.post('/mechanics/addcustomer', newCustomer),\n  recommend: (mechanicRecomend: IMechanicRecommend) => requests.put('/mechanics/recommend', mechanicRecomend),\n  rate: (mechanicRate: IMechanicRate) => requests.put('/mechanics/rate', mechanicRate),\n  addtestimonial: (testimonial: any) => requests.put('/mechanics/addtestimonial', testimonial),\n  delete: (id: string) => requests.delete(`/mechanics/${id}`),\n};\n\nconst Products = {\n  list: (params: URLSearchParams): Promise<IProductsEnvelope> =>\n    // requests.get(`/products?limit=${limit}&offset=${page ? limit * page : 0}`),\n    axios.get('/products', { params: params }).then(responseBody),//then(sleep(1000)).\n\n  details: (id: string) => requests.get(`/products/${id}`),\n  create: (product: IProduct) => postProduct.productForm('/products', product),\n  update: (product: IProduct) => requests.put(`/products/${product.id}`, product),\n  markSold: (id: string) => requests.put(`/products/${id}/markSold`, {}),\n  delete: (id: string) => requests.delete(`/products/${id}`),\n  follow: (id: string) => requests.put(`/products/${id}/follow`, {}),\n  unfollow: (id: string) => requests.delete(`/products/${id}/unfollow`),\n  // updatephoto: (photo: Blob, id: string): Promise<IPhoto> => requests.postForm(`/photos/${id}/updatePhoto`, photo),\n  toogleActivate: (id: string) => requests.put(`/products/${id}/toogleActivate`, {}),\n  visitCounter: (id: string) => requests.put(`/products/${id}/visitCounter`, {})\n}\n\nconst Activities = {\n\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios.get('/activities', { params: params })\n      // .then(sleep(1000))\n      .then(responseBody),\n\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post('/activities', activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete(`/activities/${id}`),\n  deactivate: (id: string) => requests.put(`/activities/${id}/deactivate`, {}),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.delete(`/activities/${id}/attend`),\n\n\n};\n\nconst DiaryEntries = {\n  createDiaryEntry: (diaryEntry: IDiaryEntry) => postDiaryEntry.diaryEntryForm('/diaryentries', diaryEntry),\n  deleteDiaryEntry: (id: string) => requests.delete(`/diaryentries/${id}`),\n  detailsDiaryEntry: (id: string) => requests.get(`/diaryentries/${id}`),\n  // updateDiaryEntry: (diaryEntry: IDiaryEntry) => requests.put(`/diaryentries/${diaryEntry.id}`, diaryEntry),\n  updateDiaryEntry: (diaryEntry: IDiaryEntry) => console.log(diaryEntry),\n\n}\n\nconst Feed = {\n  list: (limit: number, page: number): Promise<IFeedEnvelope> =>\n    requests.get(`/feeds?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  addFeedItem: (id: string, info: string, username?: string) => requests.post(`/feeds/${id}/${info}/${username}/addFeedItem`, {}),\n};\n\nconst PrivateMessages = {\n  list: (limit: number, page: number): Promise<IPrivateMessageEnvelope> =>\n    requests.get(`/privatemessages?limit=${limit}&offset=${page ? page * limit! : 0}`),\n  create: (message: IPrivateMessageToSend) => requests.post('/privatemessages/', message),\n  delete: (id: string) => requests.delete(`/messages/${id}`),\n  checkUnread: () => requests.get('/privatemessages/checkUnread'),\n  markRead: (id: string) => requests.put(`/privatemessages/${id}/markRead`, {})\n}\n\nconst Forumposts = {\n  // list: (limit?:number, page?:number): Promise<IForumpostEnvelope> => \n  //   requests.get(`/forumposts?limit=${limit}&offset=${page ? page * limit! : 0}`),\n\n  list: (params: URLSearchParams): Promise<IForumpostEnvelope> =>\n    axios.get('/forumposts', { params: params }).then(responseBody),  //then(sleep(1000)).\n  details: (id: string) => requests.get(`/forumposts/${id}`),\n  create: (forumpost: IForumpost) => requests.post('/forumposts', forumpost),\n  update: (forumpost: IForumpost) =>\n    requests.put(`/forumposts/${forumpost.id}`, forumpost),\n  delete: (id: string) => requests.delete(`/forumposts/${id}`),\n  rate: (rate: IRateForumpost) => requests.put(`/forumposts/rate`, rate)\n}\n\n\n\nconst Brands = {\n  list: (): Promise<IBrand[]> => requests.get('brands'),\n  details: (id: string) => requests.get(`/brand/${id}`),\n  // DONT THINK IM GONNA LET USER... \n  // but i might let admin\n  //NOT finished!!!\n  create: (motofy: IBrand) => requests.post('/brands', motofy),\n  // update: (motofy: IMotofy) =>\n  //   requests.put(`/brands/${motofy.id}`, motofy),\n  // delete: (id: string) => requests.delete(`/brands/${id}`),\n};\nconst Countries = {\n  list: (): Promise<ICountry[]> => requests.get('countries'),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get('/user'),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/login`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`user/register`, user),\n  verifyEmail: (token: string, email: string): Promise<void> =>\n    requests.post(`/user/verifyEmail`, { token, email }),\n  resendVerifyEmailConfirm: (email: string): Promise<void> =>\n    requests.get(`/user/resendEmailVerification?email=${email}`)\n};\n\n\nconst Profiles = {\n  get: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  listPeople: (params: URLSearchParams): Promise<IProfileEnvelope> =>\n    axios.get('/profiles/people', { params: params }).then(responseBody),//.then(sleep(1000))\n  uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/`, photo),\n  setMain: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n  updateProfile: (profile: Partial<IProfile>) => requests.put(`/profiles`, profile),\n  follow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.delete(`/profiles/${username}/follow`),\n  //==TODO--Refactor\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\n  listMotofies: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/motofies?predicate=${predicate}`),\n  listForumposts: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/forumposts?predicate=${predicate}`),\n  listMechanics: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/mechanics?predicate=${predicate}`),\n  listProducts: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/products?predicate=${predicate}`)\n\n};\n\nexport default {\n  Activities,\n  User,\n  Motofies,\n  Profiles,\n  Forumposts,\n  Mechanics,\n  Brands,\n  Products,\n  Countries,\n  Feed,\n  DiaryEntries,\n  PrivateMessages\n};\n","import { IActivity, IAttendee } from '../../models/activity';\nimport { IEmbracer, IMotofy } from '../../models/motofy';\nimport { IUser } from '../../models/user';\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n  // const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n  // const year = date.getFullYear();\n  // const month = date.getMonth() + 1;\n  // const day = date.getDate();\n  // const dateString = `${year}-${month}-${day}`;\n\n  const dateString = date.toISOString().split('T')[0];\n  const timeString = time.toISOString().split('T')[1];\n\n  return new Date(dateString + 'T' + timeString);\n};\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n\n  activity.date = new Date(activity.date);\n  \n  activity.isGoing = activity.attendees.some(\n    (a) => a.username === user.userName\n  );\n \n  activity.isHost = activity.attendees.some(\n    (a) => \n    a.username === user.userName && a.isHost\n    \n    );\n    return activity;\n};\n\nexport const setMotofyProps = (motofy: IMotofy, user: IUser) => {\n\n  motofy.embraced = motofy.embracers.some(\n    a => a.username === user?.userName\n  )\n    motofy.embracers[0].isOwner = motofy.publisherUsername === user.userName;\n  return motofy;\n}\n\nexport const createAttendee = (user: IUser): IAttendee => {\n\n  return {\n    displayName: user.displayName,\n    isHost: false,\n    username: user.userName,\n    image: user.image!\n  }\n}\n\nexport const createEmbracer = (user: IUser): IEmbracer => {\n\n  return {\n    displayName: user.displayName,\n    isOwner: false,\n    username: user.userName,\n    image: user.image!\n  }\n}\n\n","import { IDiaryEntry } from './../models/activity';\nimport { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IActivity } from '../models/activity';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createAttendee, setActivityProps } from '../common/util/util';\nimport {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from '@microsoft/signalr';\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  }\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @observable activityCount = 0;\n  @observable page = 0;\n\n  @observable diaryEntry: IDiaryEntry | null = null;\n\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string | Date) => {\n    // console.log(value)\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n    // console.log(toJS(this.predicate))\n    // if (predicate !== 'iFollow') {\n    //   this.activityMax = false;\n    // }\n  }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, value.toISOString())\n      } else {\n        params.append(key, value)\n      }\n      // console.log('params', params.keys)\n    })\n    return params;\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  // === only observing reference not going deep into every property of the class ===\n  @observable.ref hubConnection: HubConnection | null = null;\n\n  @action createHubConnection = (activityId: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', activityId);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection'));\n\n    this.hubConnection.on('RecieveComment', (comment) => {\n      runInAction(() => {\n        this.activity!.comments.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.activity!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    values.activityId = this.activity!.id;\n    try {\n      await this.hubConnection!.invoke('SendComment', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activites: IActivity[]) {\n    const sortedActivities = activites.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split('T')[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  //   ==== async await version ====\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n\n      const { activities, activityCount } = activitiesEnvelope;\n\n      runInAction('loading activities', () => {\n        // if(activities.length > 0) {\n        //   this.activityHit = true;\n        // } else {\n        //   this.activityHit = false;\n        // }\n        activities.forEach((activity) => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity);\n         \n        });\n        this.activityCount = activityCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load activities error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  //   ==== example promise chaining version ====\n  //   @action loadActivities = () => {\n  //     this.loadingInitial = true;\n  //     agent.Activities.list()\n  //       .then((activities) => {\n  //         activities.forEach((activity) => {\n  //           activity.date = activity.date.split('.')[0];\n  //           this.activities.push(activity);\n  //         });\n  //       })\n  //       .catch(error => console.log(error))\n  //       .finally(() => (this.loadingInitial = false));\n  //   };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n\n    if (activity) {\n      this.activity = activity;\n      return toJS(activity);\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        // console.log(toJS(activity));\n        runInAction('getting activity', () => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n\n        });\n        return activity;\n      } catch (error) {\n        runInAction('error get activity', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n  \n\n  // === helper method to loadActivity ===\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n\n  @action createActivity = async (activity: IActivity) => {\n\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity)\n\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.attendees = attendees;\n      activity.comments = [];\n      activity.isHost = true;\n      runInAction('creating activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction('editing activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('edit activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n  @action deleteActivity = async (id: string) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.delete(id);\n      runInAction('editing activity', () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n      });\n      history.push('/activities');\n    } catch (error) {\n      runInAction('delete activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem deleting data!');\n      console.log(error);\n    }\n  };\n\n\n  @action deactivateActivity = async (id: string) => {\n    try {\n      await agent.Activities.deactivate(id);\n      // await agent.Feed.addFeedItem(this.activity!.id, 'Deactivated Motocycle Diary');\n      runInAction('deactivating activity', () => {\n        this.activityRegistry.delete(id);\n      });\n    } catch (error) {\n      runInAction('delete error activity', () => {\n        console.log(error);\n      });\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          toast.info('You are now part of this diary');\n\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem joining the group at this time');\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            (a) => a.username !== this.rootStore.userStore.user?.userName\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          toast.dark('You are not part of this diary anymore');\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem cancelling attendance at this time');\n    }\n  };\n\n  @action createDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity) => {\n\n    diaryEntry.dayNumber = String(activity.diaryEntries.length + 1);\n    diaryEntry.activityId = activity.id;\n    activity.diaryEntries.push(diaryEntry);\n    console.log('diaryEntry', diaryEntry);\n    this.submitting = true;\n\n    try {\n\n      await agent.DiaryEntries.createDiaryEntry(diaryEntry);\n\n      runInAction('creating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n  @action editDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity) => {\n\n    let index = activity.diaryEntries.findIndex(x => x.id === diaryEntry.id);\n    activity.diaryEntries[index] = diaryEntry;\n    this.submitting = true;\n\n    try {\n      await agent.DiaryEntries.updateDiaryEntry(diaryEntry);\n\n      runInAction('updating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem updating data!');\n      console.log(error);\n    }\n  };\n\n  @action loadDiaryEntry = async (id: string) => {\n\n      this.loadingInitial = true;\n      try {\n        let diaryEntry:IDiaryEntry = await agent.DiaryEntries.detailsDiaryEntry(id);\n       \n        runInAction('getting activity', () => {\n        \n          this.diaryEntry = diaryEntry;\n          this.loadingInitial = false;\n\n        });\n        return this.diaryEntry;\n      } catch (error) {\n        runInAction('error get diary entry', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n  };\n\n\n  @action deleteDiaryEntry = async (diaryEntry: IDiaryEntry, activity: IActivity): Promise<void> => {\n\n    activity.diaryEntries.splice(activity.diaryEntries.indexOf(diaryEntry));\n    \n    this.submitting = true;\n    try {\n      await agent.DiaryEntries.deleteDiaryEntry(diaryEntry.id);\n    \n      runInAction('creating diary entry', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data!');\n      console.log(error);\n    }\n  };\n}\n\n","import { action, observable, reaction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class commonStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.token, // 1. what to react on\n      (token) => {      // 2. what to do when there is a change\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else {\n          window.localStorage.removeItem('jwt');\n        }\n      }\n    );\n  }\n\n  @observable token: string | null = window.localStorage.getItem('jwt');\n  @observable appLoaded = false;\n\n  @action setToken = (token: string | null) => {\n    this.token = token;\n  };\n\n  @action setAppLoaded = () => {\n    this.appLoaded = true;\n  };\n}\n","import { action, observable, runInAction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class ModalStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  //shallow 13-11, 11:00\n  @observable.shallow modal = {\n    open: false,\n    body: null,\n    size: undefined,\n  };\n  // @observable size: string | undefined;\n\n  @action setSize = (size: any) => {\n    runInAction(() => {\n      this.modal.size = size \n    })\n  }\n\n  @action openModal = (content: any) => {//, size: string\n      this.modal.open = true;\n      this.modal.body = content;\n      // this.modal.size = size;\n  }\n\n  @action closeModal = () => {\n      this.modal.open = false;\n      this.modal.body = null;\n  }\n}\n","import { action, computed, observable, reaction, runInAction } from 'mobx';\nimport { toast } from 'react-toastify';\n\nimport agent from '../api/agent';\nimport { IPhoto, IProfile, IUserActivity, IUserForumpost, IUserMechanic, IUserMotofy, IUserProduct } from '../models/profile';\nimport { RootStore } from './rootStore';\n\n\nexport default class ProfileStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.activeTab,\n      activeTab => {\n        if (activeTab === 7 || activeTab === 8) {\n          const predicate = activeTab === 7 ? 'followers' : 'following'\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    )\n  }\n\n  @observable profile: IProfile | null = null;\n  @observable loadingProfile = true;\n  @observable uploadingPhoto = false;\n  @observable loading = false;\n  @observable followings: IProfile[] = [];\n  @observable activeTab: number = 0;\n\n  @observable userActivities: IUserActivity[] = [];\n  @observable loadingActivities = false;\n\n  @observable userMotofies: IUserMotofy[] = [];\n  @observable loadingMotofies = false;\n\n  @observable userForumposts: IUserForumpost[] = [];\n  @observable loadingForumposts = false;\n\n  @observable userMechanics: IUserMechanic[] = [];\n  @observable loadingMechanics = false;\n\n  @observable userProducts: IUserProduct[] = [];\n  @observable loadingProducts = false;\n\n\n  @computed get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      return this.rootStore.userStore.user.userName === this.profile.username;\n    } else {\n      return false;\n    }\n  }\n  \n  @action loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n    if(predicate === undefined){\n      predicate = 'active';\n    }\n\n    try {\n      const activities = await agent.Profiles.listActivities(username, predicate!);\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user activities');\n      runInAction(() => {\n        this.loadingActivities = false;\n      })\n    }\n  }\n  @action loadUserMotofies = async (username: string, predicate?: string) => {\n    this.loadingMotofies = true;\n    if (predicate === undefined) {\n      predicate = 'iEmbraced'\n    }\n    try {\n      const motofies = await agent.Profiles.listMotofies(username, predicate!);\n      runInAction(() => {\n        this.userMotofies = motofies;\n        this.loadingMotofies = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user activities');\n      runInAction(() => {\n        this.loadingMotofies = false;\n      })\n    }\n  }\n\n  @action loadUserForumposts = async (username: string, predicate?: string) => {\n    this.loadingForumposts = true;\n    if (predicate === undefined) {\n      predicate = 'iAsked'\n    }\n    try {\n      const forumposts = await agent.Profiles.listForumposts(username, predicate!);\n      runInAction(() => {\n        this.userForumposts = forumposts;\n        this.loadingForumposts = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user forumposts');\n      runInAction(() => {\n        this.loadingForumposts = false;\n      })\n    }\n  }\n\n  @action loadUserMechanics = async (username: string, predicate?: string) => {\n    this.loadingMechanics = true;\n\n    if (predicate === undefined) {\n      predicate = 'iPublished'\n    }\n    try {\n      const mechanics = await agent.Profiles.listMechanics(username, predicate!);\n      runInAction(() => {\n        this.userMechanics = mechanics;\n        this.loadingMechanics = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user mechanics');\n      runInAction(() => {\n        this.loadingMechanics = false;\n      })\n    }\n  }\n  @action loadUserProducts = async (username: string, predicate?: string) => {\n    this.loadingProducts = true;\n\n    if (predicate === undefined) {\n      predicate = 'iAmSelling'\n    }\n    try {\n      const products = await agent.Profiles.listProducts(username, predicate);\n      runInAction(() => {\n        this.userProducts = products;\n        this.loadingProducts = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading user products');\n      runInAction(() => {\n        this.loadingProducts = false;\n      })\n    }\n  }\n\n\n\n  @action setActiveTab = (activeIndex: number) => {\n    this.activeTab = activeIndex;\n  }\n\n  @action loadProfile = async (username: string) => {\n    this.loadingProfile = true;\n    try {\n      const profile = await agent.Profiles.get(username);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingProfile = false;\n      });\n      console.log(error);\n    }\n  };\n  @action uploadPhoto = async (file: Blob) => {\n    this.uploadingPhoto = true;\n    try {\n      const photo = await agent.Profiles.uploadPhoto(file);\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos.push(photo);\n          if (photo.isMain && this.rootStore.userStore.user) {\n            this.rootStore.userStore.user.image = photo.url;\n            this.profile.image = photo.url;\n          }\n        }\n        this.uploadingPhoto = false;\n      });\n    } catch (error) {\n      console.log(error);\n      toast.error('Problem uploading photo');\n      runInAction(() => {\n        this.uploadingPhoto = false;\n      });\n    }\n  };\n\n  @action setMainPhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.setMain(photo.id);\n      runInAction(() => {\n        this.rootStore.userStore.user!.image = photo.url;\n        this.profile!.photos.find((x) => x.isMain)!.isMain = false;\n        this.profile!.photos.find((x) => x.id === photo.id)!.isMain = true;\n        this.profile!.image = photo.url;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem setting photo as main');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action deletePhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n      runInAction(() => {\n        this.profile!.photos = this.profile!.photos.filter(\n          (a) => a.id !== photo.id\n        );\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem deleting the photo');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action updateProfile = async (profile: Partial<IProfile>) => {\n    try {\n      await agent.Profiles.updateProfile(profile);\n      runInAction(() => {\n        if (\n          profile.displayName !== this.rootStore.userStore.user!.displayName\n        ) {\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\n        }\n        this.profile = { ...this.profile!, ...profile };\n      });\n    } catch (error) {\n      toast.error('Problem updating profile');\n    }\n  };\n  @action follow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.follow(username);\n      runInAction(() => {\n        this.profile!.following = true;\n        this.profile!.followersCount++;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem following user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n  @action unfollow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.unfollow(username);\n      runInAction(() => {\n        this.profile!.following = false;\n        this.profile!.followersCount--;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error('Problem unfollowing user');\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action loadFollowings = async (predicate: string) => {\n    this.loading = true;\n    try {\n      const profiles = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n      runInAction(() => {\n        this.followings = profiles;\n        this.loading = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading followings');\n      runInAction(() => {\n        this.loading = false;\n      })\n    }\n  }\n}\n","import { action, computed, observable, runInAction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { RootStore } from './rootStore';\n\n\nexport default class UserStore {\n\n\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() {return !! this.user};\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n            });\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities');\n            \n        } catch (error) {\n            throw error\n        }\n    }\n    @action getUser = async () => {\n        try {\n            const user = await agent.User.current();\n            runInAction(() => {\n                this.user = user;\n            });\n            // this.rootStore.commonStore.setToken(user.token);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        history.push('/')\n    }\n    \n    @action register = async (values: IUserFormValues) => {\n\n        try {\n            await agent.User.register(values);\n            this.rootStore.modalStore.closeModal();\n            history.push(`/user/registerSuccess?email=${values.email}`);\n        } catch (error) {\n            throw error;\n        }\n    }\n}","import { IRateForumpost } from './../models/forumpost';\nimport { observable, action, computed, runInAction, reaction } from 'mobx';\n// import { SyntheticEvent } from 'react';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IForumpost } from '../models/forumpost';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { IComment } from '../models/comment';\n\n// configure({ enforceActions: 'always' });\nconst LIMIT = 5;\n\nexport default class ForumPostStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    //==21.1==\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.forumPostRegistry.clear();\n        this.forumposts = [];\n        this.loadForumPosts();\n      }\n    )\n  }\n  @observable forumPostRegistry = new Map();\n  @observable forumposts: IForumpost[] = [];\n  @observable forumpost: IForumpost | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n  \n  \n  @observable rated = false;\n  // @observable commented = false;\n\n\n  @action setRated = async (status: boolean) => {\n    try {\n      runInAction('seting rated', () => {\n        this.rated = status;\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  // @action setCommented = async (status: boolean) => {\n  //   try {\n  //     runInAction('seting commented', () => {\n  //       this.commented = status;\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  //delete?\n  @observable target = '';\n  @observable.ref hubConnection: HubConnection | null = null;\n  @observable forumPostCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`)\n    this.predicate.forEach((value, key) => {\n      params.append(key, value)\n    })\n    return params;\n  }\n\n\n  @computed get totalPages() {\n    return Math.ceil(this.forumPostCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @action createHubConnection = (id: string, connectionArgument: string) => {//, motofy: IMotofy\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.forumpost!.commentForumPosts.push(comment);\n\n        this.forumpost!.commenters = this.reduceCommenters(this.forumpost!);\n\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.forumpost!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    values.id = this.forumpost!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentForumPost', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @action setRating = async (forumpostId: string, rating: string) => {\n   \n    const rate :IRateForumpost = {\n      id: forumpostId,\n      rating: rating,\n    }\n    try {\n      await agent.Forumposts.rate(rate);\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  @computed get forumpostsByDate() {\n    return this.formatForumpostsDate(\n      Array.from(this.forumPostRegistry.values())\n    );\n    // return this.forumPostRegistry;\n  }\n\n  formatForumpostsDate(forumposts: IForumpost[]) {\n    // const sortedForumposts = forumposts.sort(\n    //   (a, b) => Date.parse(a.dateAdded) - Date.parse(b.dateAdded)\n    //   // (a, b) => a.dateAdded.getTime() - b.dateAdded.getTime()\n    // );\n    return Object.entries(\n      // sortedForumposts.reduce((forumposts, forumpost) => {\n        forumposts.reduce((forumposts, forumpost) => {\n          // console.log('forumpost.dateAdded: ', forumpost.dateAdded);\n        const date = forumpost.dateAdded.split('T')[0];\n        // const date = forumpost.dateAdded.toISOString().split('T')[0];\n        // console.log('date: ', date);\n\n        forumposts[date] = forumposts[date]\n          ? [...forumposts[date], forumpost]\n          : [forumpost];\n        return forumposts;\n      }, {} as { [key: string]: IForumpost[] })\n    );\n  }\n\n\n  summComments(forumpost: IForumpost) {\n    return forumpost.commentForumPosts.length;\n  }\n\n  reduceCommenters(forumpost: IForumpost) {\n\n\n    const result: IComment[] = [];\n    const map = new Map();\n    for (const item of forumpost.commentForumPosts) {\n      if (!map.has(item.username)) {\n        map.set(item.username, true)\n        result.push({\n          id: item.id,\n          createdAt: item.createdAt,\n          body: item.body,\n          username: item.username,\n          displayName: item.displayName,\n          image: item.image\n        })\n      }\n    }\n    return result;\n  }\n\n  @action loadForumPosts = async () => {\n    this.loadingInitial = true;\n    try {\n      const forumpostEnvelope = await agent.Forumposts.list(this.axiosParams);\n      const { forumposts, forumpostCount } = forumpostEnvelope;\n      runInAction('loading forumposts', () => {\n        forumposts.forEach((forumpost) => {\n          forumpost.numberOfComents = this.summComments(forumpost);\n          forumpost.commenters = this.reduceCommenters(forumpost);\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n          this.forumposts.push(forumpost)\n        });\n        this.forumPostCount = forumpostCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load forumposts error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadForumPost = async (id: string) => {\n    let forumpost = this.getForumPost(id);\n    if (forumpost) {\n      this.forumpost = forumpost;\n      return forumpost;\n    } else {\n      this.loadingInitial = true;\n      try {\n        forumpost = await agent.Forumposts.details(id);\n        runInAction('getting forumpost', () => {\n          forumpost.numberOfComents = this.summComments(forumpost);\n          forumpost.commenters = this.reduceCommenters(forumpost);\n          this.forumpost = forumpost;\n          //  console.log('forumpost in rating', forumpost);\n          this.forumPostRegistry.set(forumpost.id, forumpost);\n          this.forumposts.push(forumpost);\n          this.loadingInitial = false;\n          this.forumpost = forumpost;\n        });\n      } catch (error) {\n        runInAction('get forumpost error', () => {\n          this.loadingInitial = false;\n          console.log(error);\n        });\n      }\n    }\n  };\n\n  @action clearForumPost = () => {\n    this.forumpost = null;\n  };\n\n  getForumPost = (id: string) => {\n    return this.forumPostRegistry.get(id);\n  };\n\n  @action createForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    forumpost.forumpostRatings = [];\n    try {\n      await agent.Forumposts.create(forumpost);\n      runInAction('creating forumposts', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        this.forumposts.push(forumpost);\n        // this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('create forumpost error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n  @action editForumpost = async (forumpost: IForumpost) => {\n    this.submitting = true;\n    try {\n      await agent.Forumposts.update(forumpost);\n      runInAction('editing forumpost', () => {\n        this.forumPostRegistry.set(forumpost.id, forumpost);\n        this.forumpost = forumpost;\n        this.editMode = false;\n        this.submitting = false;\n      });\n      history.push(`/forum/${forumpost.id}`);\n    } catch (error) {\n      runInAction('edit forumpost error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action deleteForumpost = async (\n    // event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    // this.target = event.currentTarget.name;\n    try {\n      await agent.Forumposts.delete(id);\n      runInAction('deleting forumpost', () => {\n        this.forumPostRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete forumpost error', () => {\n        this.submitting = false;\n        this.target = '';\n      });\n      console.log(error);\n    }\n  };\n}\n","import { IUser } from './../models/user';\nimport { IMotofyScore, IRateMotofy } from './../models/motofy';\nimport { observable, action, runInAction, computed, reaction } from 'mobx';\nimport { IMotofy } from '../models/motofy';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { createEmbracer, setMotofyProps } from '../common/util/util';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\n\n// configure({ enforceActions: 'always' });\nconst LIMIT = 2;\n\nexport default class MotofyStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.motofyRegistry.clear();\n        this.loadMotofies();\n      }\n    )\n\n  }\n\n  @observable motofyRegistry = new Map();\n\n  @observable motofy: IMotofy | null = null;\n\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n\n  @observable.ref hubConnection: HubConnection | null = null;\n  \n  @action createHubConnection = (id: string, connectionArgument: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.motofy!.commentMotofies.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.motofy!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    console.log(values);\n    values.id = this.motofy!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentMotofy', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n\n  @observable mostEmbraced: any;\n  @computed get getMostEmbraced () {\n    return this.mostEmbraced;\n  }\n  @observable highestRatedMotofy: any;\n  @computed get getHighestRatedMotofy () {\n    return this.highestRatedMotofy;\n  }\n\n\n  // === PAGING ===\n  @observable motofyCount = 0;\n  @observable page = 0;\n\n  // === FILTERING ===\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string  ) => { \n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n\n  // === PAGING ===\n  @computed get totalPages() {\n    return Math.ceil(this.motofyCount / LIMIT);\n  }\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n\n  @computed get motofiesByDate() {\n    return Array.from(this.motofyRegistry.values()).sort(\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\n    );\n  }\n\n  @action loadMotofies = async () => {\n    this.loadingInitial = true;\n    try {\n      \n      const motofiesEnvelope = await agent.Motofies.list(this.axiosParams);\n\n      const { motofies, motofyCount, mostEmbraced, highestRatedMotofy} = motofiesEnvelope;\n      runInAction('loading motofies', () => {\n        this.mostEmbraced = mostEmbraced;\n        this.highestRatedMotofy = highestRatedMotofy;\n\n        motofies.forEach((motofy) => {\n          motofy.datePublished = motofy.datePublished?.split('T')[0];\n          // === Util Class ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofyRegistry.set(motofy.id, motofy);\n        });\n        this.motofyCount = motofyCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMotofy = async (id: string) => {\n    let motofy = this.getMotofy(id);\n    if (motofy) {\n      this.motofy = motofy;\n      // //test\n      return motofy;\n    } else {\n      this.loadingInitial = true;\n      try {\n        motofy = await agent.Motofies.details(id);\n        runInAction('getting motofy', () => {\n          // === why not using date here??? ===\n          setMotofyProps(motofy, this.rootStore.userStore.user!);\n          this.motofy = motofy;\n          this.motofyRegistry.set(motofy.id, motofy);\n          this.loadingInitial = false;\n        });\n        return motofy;\n      } catch (error) {\n        runInAction('get motofy error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action rateMotofy = async (rating: string | number | undefined, motofy: IMotofy, user: IUser | null) => {\n    let newRating: IRateMotofy = {\n      id: motofy.id,\n      score: rating\n    }\n    let newScore: IMotofyScore = {\n      username: user?.userName,\n      displayName: user?.displayName,\n      score: rating,\n    };\n    try {\n      await agent.Motofies.rate(motofy.id, newRating)\n      runInAction('rating motofy', () => {\n        // this.motofy = motofy;\n        motofy.motofyScores.push(newScore);\n        this.motofyRegistry.set(motofy.id, motofy);\n        \n      })\n    } catch (error) {\n      runInAction('rating motofy error', () => {\n        console.log(error);\n      });\n    }\n  };\n\n  getMotofy = (id: string) => {\n    return this.motofyRegistry.get(id);\n  };\n\n  @action editMotofy = async (motofy: IMotofy) => {\n    this.submitting = true;\n    try {\n      await agent.Motofies.update(motofy);\n      runInAction('editing motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);\n        this.motofy = motofy;\n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction('edit motofy error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n  @action createMotofy = async (motofy: IMotofy) => {\n    \n    this.submitting = true;\n    try {\n      await agent.Motofies.create(motofy);\n      const embracer = createEmbracer(this.rootStore.userStore.user!);\n      embracer.isOwner = true;\n      let embracers = [];\n      embracers.push(embracer);\n      motofy.embracers = embracers;\n      motofy.isOwner = true;\n      runInAction('create motofy', () => {\n        this.motofyRegistry.set(motofy.id, motofy);   \n        this.submitting = false;\n      });\n      history.push(`/gallery/${motofy.id}`);\n    } catch (error) {\n      runInAction(() => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n\n  @action deleteMotofy = async (id: string) => {\n      this.submitting = true;\n      console.log('this.motofyRegistry out of try', this.motofyRegistry)\n\n      try {\n      await agent.Motofies.delete(id);\n      runInAction('deleting Motofy', () => {\n        this.motofyRegistry.delete(id);\n        \n        console.log('this.motofyRegistry', this.motofyRegistry)\n\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete motofy error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action embraceMotofy = async (id: string) => {\n    const embracer = createEmbracer(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n\n      await agent.Motofies.embrace(id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers.push(embracer);\n          this.motofy.embraced = true;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n          this.loading = false;\n        }\n      });\n      \n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n  @action unembraceMotofy = async (id: string) => {\n    this.loading = true;\n    try {\n      await agent.Motofies.unembrace(id);\n      runInAction(() => {\n        if (this.motofy) {\n          this.motofy.embracers = this.motofy.embracers.filter(\n            (a) => a.username !== this.rootStore.userStore.user!.userName\n          );\n          this.motofy.embraced = false;\n          this.motofyRegistry.set(this.motofy.id, this.motofy);\n        }\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem embracing this motofy');\n    }\n  };\n\n}\n\n","import { IMechanicCustomer, IMechanicCustomerToBecome, IMechanicRate, IMechanicRecommend, IRating } from './../models/mechanic';//IMechanicId, \nimport { action, observable, computed, runInAction, reaction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { IMechanic } from '../models/mechanic';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { v4 as uuid } from \"uuid\";\n\n\n\nconst LIMIT = 3;\n\n\nexport default class MechanicStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.mechanicRegistry.clear();\n        this.loadMechanics();\n      }\n    )\n  }\n\n  @observable mechanicRegistry = new Map();\n  @observable mechanic: IMechanic | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable.ref hubConnection: HubConnection | null = null;\n\n\n  @observable mechanicCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string  ) => { //| Date\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n    console.log(value)\n  }\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n  @observable isCustomer: boolean;\n  // @observable hasNotCancelledCustomer: boolean = true;\n  @observable openCustomerForm: boolean = false;\n  @observable confirmCustomer: boolean = false;\n\n\n  @computed get totalPages() {\n    return Math.ceil(this.mechanicCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @action setOpenCustomerForm = () => {\n    try {\n\n      runInAction('open form', () => {\n        this.openCustomerForm = !this.openCustomerForm;\n      })\n    } catch (error) {\n\n    }\n  }\n  @action setCloseCustomerForm = () => {\n    try {\n\n      runInAction('open form', () => {\n        this.openCustomerForm = false;\n      })\n    } catch (error) {\n\n    }\n  }\n\n  @action createHubConnection = (id: string, connectionArgument: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log('Attempting to join group');\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection?.invoke('AddToGroup', id);\n        }\n      })\n      .catch((error) => console.log('Error establishing connection', error));\n\n    this.hubConnection.on(connectionArgument, (comment) => {\n      runInAction(() => {\n        this.mechanic!.commentMechanics.push(comment);\n      });\n    });\n\n    this.hubConnection.on('Send', (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection\n      ?.invoke('RemoveFromGroup', this.mechanic!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log('Connection stopped!'))\n      .then(() => this.clearMechanic())\n      .catch(error => console.log(error));\n  };\n\n  @action addComment = async (values: any) => {\n    console.log(values);\n    values.id = this.mechanic!.id;\n    try {\n      await this.hubConnection!.invoke('SendCommentMechanic', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @computed get mechanicsByDate() {\n    return Array.from(this.mechanicRegistry.values())\n  }\n\n  @action setCustomer = async (status: boolean) => {\n    try {\n      runInAction('seting customer', () => {\n        this.isCustomer = status;\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  // @action setCancelCustomer = async (status: boolean) => {\n  //   try {\n  //     runInAction('seting customer', () => {\n  //       this.hasNotCancelledCustomer = false;\n  //       this.isCustomer = false;\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  @action clearMechanic = async () => {\n    this.mechanic = null;\n  }\n\n  \n\n  @action loadMechanics = async () => {\n\n  \n    this.loadingInitial = true;\n    try {\n      const mechanicsEnvelope = await agent.Mechanics.list(this.axiosParams);\n\n      const { mechanics, mechanicCount } = mechanicsEnvelope;\n      \n\n      runInAction('loading mechanics', () => {\n        mechanics.forEach((mechanic) => {\n          mechanic.datePublished = mechanic.datePublished?.split('T')[0];\n          this.mechanicRegistry.set(mechanic.id, mechanic);\n        });\n        this.mechanicCount = mechanicCount;\n\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load mechanics error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadMechanic = async (id: string) => {\n    let mechanic = this.getMechanic(id);\n    if (mechanic) {\n      this.mechanic = mechanic;\n      return mechanic;\n    } else {\n      this.loadingInitial = true;\n      try {\n        mechanic = await agent.Mechanics.details(id);\n        runInAction('getting mechanic', () => {\n          this.mechanic = mechanic;\n          this.mechanicRegistry.set(mechanic.id, mechanic);\n\n          this.loadingInitial = false;\n        });\n        return mechanic;\n      } catch (error) {\n        runInAction('get mechanic error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  getMechanic = (id: string) => {\n    return this.mechanicRegistry.get(id);\n  };\n\n  @action createMechanic = async (mechanic: IMechanic) => {\n\n    this.submitting = true;\n    try {\n      await agent.Mechanics.create(mechanic);\n      runInAction('creating mechanics', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action editMechanic = async (mechanic: IMechanic) => {\n    this.submitting = true;\n    if (mechanic.email === null) mechanic.email = 'Not assigned email';\n    if (mechanic.website === null) mechanic.website = 'Not assigned website';\n    mechanic.country = mechanic.countryName;\n    console.log(mechanic);\n\n    try {\n      await agent.Mechanics.update(mechanic);\n      runInAction('creating mechanic', () => {\n        this.mechanicRegistry.set(mechanic.id, mechanic);\n        this.mechanic = mechanic;\n        this.submitting = false;\n      });\n      history.push(`/mechanics/${mechanic.id}`)\n    } catch (error) {\n      runInAction('create mechanic error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteMechanic = async (id: string) => {\n    this.submitting = true;\n    try {\n      await agent.Mechanics.delete(id);\n      runInAction('deleting mechanic', () => {\n        this.mechanicRegistry.delete(id);\n\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete mechanic error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action becomeCustomer = async (id: string, user: any, hasRecommended: string) => {\n    let customerRecommended: boolean;\n    hasRecommended === '0' ? customerRecommended = false : customerRecommended = true;\n\n    let customerToApi: IMechanicCustomerToBecome = {\n\n      mechanicId: id,\n      isCustomer: true\n    }\n    let customerForClient: IMechanicCustomer = {\n      username: user.userName,\n      displayName: user.displayName,\n      image: user.image,\n      isCustomer: true,\n      isOwner: false,\n      customerRecommended: customerRecommended,\n    }\n    try {\n      await agent.Mechanics.becomecustomer(customerToApi);\n      runInAction('become a customer', () => {\n        this.isCustomer = true;\n        this.mechanic?.customers.push(customerForClient);\n\n\n      })\n    } catch (error) {\n      console.log('error', error);\n    }\n    toast.info(\"You became a customer of the shop!\");\n  };\n\n  @action recommend = async (mechanicId: string, username: string | undefined, isRecommended: string) => {\n\n    let mechanicRecomend: IMechanicRecommend = {\n      mechanicId: mechanicId,\n      isRecommended: isRecommended\n    }\n    try {\n      await agent.Mechanics.recommend(mechanicRecomend);\n      runInAction('recommending a mechanic', () => {\n\n        if (isRecommended === '1') {\n          this.mechanic!.customers.find(x => x.username === username)!.customerRecommended = true;\n        }\n        else {\n          this.mechanic!.customers.find(x => x.username === username)!.customerRecommended = false;\n        }\n\n\n      });\n      toast.info(\"You recommended this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  @action rate = async (id: string, score: string, user: any) => {\n    let rateMechanic: IMechanicRate = {\n      id: id,\n      score: score,\n    }\n    let addRating: IRating = {\n      username: user.userName,\n      displayName: user.displayName,\n      score: score\n    }\n    try {\n      await agent.Mechanics.rate(rateMechanic);\n      runInAction('recommending a mechanic', () => {\n        // this.hasRated = true;\n        this.mechanic?.ratings.push(addRating)\n        console.log(this.mechanic!.ratings);\n      });\n      toast.info(\"You rated this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  @action addTestimonial = async (mechanicId: string, text: string, user: any) => {\n    let testimonial = {\n      mechanicId: mechanicId,\n      text: text,\n    }\n    let testimonialToUI = {\n      id: uuid(),\n      text: text,\n      dateAdded: new Date().toString()\n    }\n    try {\n      await agent.Mechanics.addtestimonial(testimonial);\n\n      runInAction('adding a testimonial to a mechanic', () => {\n\n        this.mechanic!.customers.find(x => x.username === user.userName)!.testimonial = testimonialToUI;\n      });\n      toast.info(\"You added a testimonial this shop!\");\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n}\n\n","import { action, observable,  runInAction } from 'mobx';//computed,\n\nimport agent from '../api/agent';\nimport {  IBrand } from '../models/brand'; //BrandFormValues,\nimport { RootStore } from './rootStore';\n\n//==non of which is actually in use before the admin panel!!!!!!!!!==\n\nexport default class BrandStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  // @observable brandRegistry = new Map();\n\n  @observable brands: IBrand[] = [];\n  // @observable brandToSelect: BrandFormValues[] = [];\n  @observable brand: IBrand | null = null;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n\n  // @observable target = '';\n\n  @action loadBrandsToSelect = async () => {\n    this.loadingInitial = true;\n    try {\n      const brands = await agent.Brands.list();\n      runInAction('loading brands', () => {\n        this.brands = brands;\n        // console.log('brands', brands);\n      })\n    } catch (error) {\n      runInAction('load brands error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  }\n\n  //==FOLLOWING IS ONLY GOING TO BE NEEDED FOR THE ADMIN PANEL===\n  // @action loadBrands = async () => {\n  //   this.loadingInitial = true;\n  //   try {\n  //     const brands = await agent.Brands.list();\n  //     runInAction('loading brands', () => {\n  //       // brands.forEach((brand) => {\n\n  //       //   //not sure if it has T as a separator // and do I need it??\n  //       //   // brand.dateOfEstablishment = brand.dateOfEstablishment?.split('T')[1];\n  //       //   //test (still need it)\n  //       // //  console.log('brand', brand.name ); \n\n  //       // //  this.brands.push(brand); // === refactor for map\n  //       // //  this.brandRegistry.set(brand.id, brand.name);\n  //       // });\n  //       console.log('brands', brands ); \n  //       //test (still need it)\n  //       // console.log('this.brandRegistry', this.brandRegistry ); \n  //       // this.brandRegistry.forEach()\n  //       // return this.brandRegistry;\n  //       this.loadingInitial = false;\n  //       return this.brands;\n  //     });\n  //   } catch (error) {\n  //     runInAction('load brands error', () => {\n  //       this.loadingInitial = false;\n  //     });\n  //     console.log(error);\n  //   }\n  // };\n\n  //??--is really needed\n  // @action loadBrand = async (id: string) => {\n  //   let brand = this.getBrand(id);\n  //   if (brand) {\n  //     this.brand = brand;\n  //     return brand;\n  //   } else {\n  //     this.loadingInitial = true;\n  //     try {\n  //       brand = await agent.Brands.details(id);\n  //       runInAction('getting brand', () => {\n  //         this.brand = brand;\n  //         this.loadingInitial = false;\n  //       });\n  //       return brand;\n  //     } catch (error) {\n  //       runInAction('get brand error', () => {\n  //         this.loadingInitial = false;\n  //       });\n  //       console.log(error);\n  //     }\n  //   }\n  // };\n\n  // @action clearBrand = () => {\n  //   this.brand = null;\n  // }\n\n  // getBrand = (id: string) => {\n  //   return this.brandRegistry.get(id);\n  // };\n\n  // @action createBrand = async (brand: IBrand) => {\n  //   this.submitting = true;\n  //   try {\n  //     await agent.Brands.create(brand);\n  //     runInAction('creating brands', () => {\n  //       this.brandRegistry.set(brand.id, brand);\n  //       this.editMode = false;\n  //       this.submitting = false;\n  //     });\n  //     history.push(`/brands/${brand.id}`)\n  //   } catch (error) {\n  //     runInAction('create brand error', () => {\n  //       this.submitting = false;\n  //     });\n  //     toast.error('Problem submitting data');\n  //     // console.log(error.response);\n  //   }\n  // };\n\n  // //LATER!!!\n  // @action editbrand = async (brand: IBrand) => {\n  //   this.submitting = true;\n  //   try {\n  //     // console.log('brand', brand);\n  //     await agent.Brands.update(brand);\n  //     runInAction('creating brand', () => {\n  //       this.brandRegistry.set(brand.id, brand);\n  //       this.brand = brand;\n  //       this.editMode = false;\n  //       this.submitting = false;\n  //     });\n  //     history.push(`/brands/${brand.id}`)\n  //   } catch (error) {\n  //     runInAction('create brand error', () => {\n  //       this.submitting = false;\n  //     });\n  //     toast.error('Problem submitting data');\n  //     // console.log(error.response);\n  //   }\n  // };\n\n  //         //LATER!!!\n  // @action deleteBrand = async (\n  //   event: SyntheticEvent<HTMLButtonElement>,\n  //   id: string\n  // ) => {\n  //   this.submitting = true;\n  //   this.target = event.currentTarget.name;\n  //   try {\n  //     await agent.Brands.delete(id);\n  //     runInAction('deleting brand', () => {\n  //       this.brandRegistry.delete(id);\n  //       this.submitting = false;\n  //       this.target = '';\n  //     });\n  //   } catch (error) {\n  //     runInAction('delete brand error', () => {\n  //       this.submitting = false;\n  //       this.target = '';\n  //     });\n  //     console.log(error);\n  //   }\n  // };\n\n  // @action openCreateForm = () => {\n  //   this.editMode = true;\n  //   this.brand = null;\n  // };\n  // @action openEditForm = (id: string) => {\n  //   this.brand = this.brandRegistry.get(id);\n  //   // console.log(this.brand?.yearOfStart);\n  //   this.editMode = true;\n  // };\n  // @action cancelSelectedBrand = () => {\n  //   this.brand = null;\n  // };\n  // @action cancelFormOpen = () => {\n  //   this.editMode = false;\n  //   // TODO: GO BACK WHEREVER YOU WERE\n  // };\n\n  // @action selectBrand = (id: string) => {\n  //   // this.selectedbrand = this.brands.find(m => m.id === id); // === refactor for map\n  //   this.brand = this.brandRegistry.get(id);\n  //   this.editMode = false;\n  // };\n}","import { IProductViewer } from './../models/product';\nimport { IProduct } from '../models/product';\nimport { observable, action, computed, runInAction, reaction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\nconst LIMIT = 12;\n\nexport default class ProductStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.productRegistry.clear();\n        this.loadProducts();\n      }\n    )\n  }\n  //--in use--\n  @observable loadingInitial = false;\n  @observable productRegistry = new Map();\n  @observable products: IProduct[] = [];\n  @observable product: IProduct | null = null;\n\n  @observable productCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @observable productFollowed = false;\n\n\n  @action setPredicate = (predicate: string, value: string  ) => { \n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n  @computed get totalPages() {\n    return Math.ceil(this.productCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n  //--probably will be--\n  @observable submitting = false;\n\n  @observable target = '';\n\n  @computed get productsByDate() {\n    return Array.from(this.productRegistry.values())\n  \n  }\n\n  @action loadProducts = async () => {\n    this.loadingInitial = true;\n    try {\n      const productEnvelope = await agent.Products.list(this.axiosParams);\n      const {products, productCount} = productEnvelope\n      runInAction('loading products', () => {\n        products.forEach((product) => {\n          this.productRegistry.set(product.id, product);\n          // console.log('product:::', product);\n        });\n        // console.log('products', products);\n        this.productCount = productCount; \n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load products error', () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n\n\n  //--in use--\n  @action loadProduct = async (id: string) => {\n    let product = this.getProduct(id);\n    if (product) {\n      this.product = product;\n      return product;\n    } else {\n      this.loadingInitial = true;\n      try {\n        product = await agent.Products.details(id);\n        runInAction('getting product', () => {\n          this.product = product;\n          this.productRegistry.set(product.id, product);\n          this.loadingInitial = false;\n          this.product = product;\n          // console.log('product:::', toJS(product));\n        });\n        return product;\n      } catch (error) {\n        runInAction('get product error', () => {\n          this.loadingInitial = false;\n          console.log(error);\n        });\n      }\n    }\n  };\n\n  //--in use--\n  getProduct = (id: string) => {\n    return this.productRegistry.get(id);\n  };\n\n\n  @action createProduct = async (product: IProduct) => {\n    this.submitting = true;\n    try {\n      await agent.Products.create(product);\n      runInAction('creating product', () => {\n        product.viewers = [];\n        this.productRegistry.set(product.id, product);\n        this.submitting = false;\n      });\n      history.push(`/product/${product.id}`)\n    } catch (error) {\n      runInAction('create product error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n    }\n  };\n\n  @action editProduct = async (product: IProduct) => {\n    this.submitting = true;\n    try {\n      await agent.Products.update(product);\n      runInAction('editing product', () => {\n        this.productRegistry.set(product.id, product);\n        this.product = product;\n        this.submitting = false;\n      });\n      history.push(`/product/${product.id}`)\n    } catch (error) {\n      runInAction('create product error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteProduct = async (\n    id: string\n  ) => {\n    this.submitting = true;\n    try {\n      await agent.Products.delete(id);\n      runInAction('deleting product', () => {\n        this.productRegistry.delete(id);\n        // console.log('this.productRegistry', this.productRegistry)\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction('delete product error', () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action visitCounter = async (id: string) => {\n    try {\n      await agent.Products.visitCounter(id);\n      runInAction('Increasing the number seen counter', () => {\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  @action markSold = async (id: string, product: IProduct) => {\n    try {\n      await agent.Products.markSold(id);\n      runInAction('Marking the product sold', () => {\n        product.isSold = true;\n        toast.info('This product is marked as sold!');\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  @action toogleActivate = async (id: string, product: IProduct) => {\n    try {\n      await agent.Products.toogleActivate(id);\n      runInAction('Marking the product sold', () => {\n        product.isActive = true;//!this.product?.isActive;\n        toast.info('This product is activated!');\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  @action setProductFollowed = async () => {\n    runInAction(() => {\n      this.productFollowed = !this.productFollowed;\n    })\n  }\n  @action followProduct = async (id: string, userName: string, displayName: string) => {\n    // console.log(\"id i\", id);\n\n    let product: IProduct = this.getProduct(id);\n    let productViewer: IProductViewer = {\n      username: userName, \n      displayName: displayName, \n    }\n    product.viewers.push(productViewer)\n    try {\n      await agent.Products.follow(id);\n      runInAction('following product', () => {\n        this.productRegistry.set(product.id, product );\n        this.productFollowed = true;\n      });\n    } catch (error) {\n\n      console.log(error);\n    }\n  };\n  @action unfollowProduct = async (id: string) => {\n    // console.log(\"id unfollow\", id);\n\n    let product: IProduct = this.getProduct(id);\n   \n    try {\n      await agent.Products.unfollow(id);\n      runInAction('following product', () => {\n        this.productRegistry.set(product.id, product );\n        this.productFollowed = false;\n      });\n    } catch (error) {\n\n      console.log(error);\n    }\n  };\n\n}\n\n","import { observable, action, runInAction } from 'mobx';//, computed, reaction\nimport { RootStore } from './rootStore';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { IMotofy } from '../models/motofy';\nimport { toast } from 'react-toastify';\n\n//THIS IS TO BE SOLVED SO THAT IT IS GENERIC AS MUCH AS POSSIBLE!!!\n\nexport default class CommentStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n      this.rootStore = rootStore;\n    }\n    @observable motofy: IMotofy | null = null;\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @action createHubConnection = (motofyId: string, connectionArgument: string, motofy: IMotofy) => {\n        this.motofy = motofy;\n        this.hubConnection = new HubConnectionBuilder()\n          .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n            accessTokenFactory: () => this.rootStore.commonStore.token!,\n          })\n          .configureLogging(LogLevel.Information)\n          .build();\n    \n        this.hubConnection\n          .start()\n          .then(() => console.log(this.hubConnection!.state))\n          .then(() => {\n            console.log('Attempting to join group');\n            if (this.hubConnection!.state === 'Connected') {\n              this.hubConnection?.invoke('AddToGroup', motofyId);\n            }\n          })\n          .catch((error) => console.log('Error establishing connection', error));\n    \n        this.hubConnection.on(connectionArgument, (comment) => {\n          runInAction(() => {\n            // console.log('comment', comment)\n            // console.log('this.motofy!.comments', this.motofy!.commentMotofies)\n            this.motofy!.commentMotofies.push(comment);\n          });\n        });\n    \n        this.hubConnection.on('Send', (message) => {\n          toast.info(message);\n        });\n      };\n    \n      @action stopHubConnection = () => {\n        this.hubConnection\n          ?.invoke('RemoveFromGroup', this.motofy!.id)\n          .then(() => {\n            this.hubConnection?.stop();\n          })\n          .then(() => console.log('Connection stopped!'))\n          .catch(error => console.log(error));\n      };\n    \n      @action addComment = async (values: any) => {\n        console.log(values);\n        values.motofyId = this.motofy!.id;\n        try {\n          await this.hubConnection!.invoke('SendCommentMotofy', values);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n}","import { action, observable, runInAction } from 'mobx';//computed,\n// import { SyntheticEvent } from 'react';\n// import { history } from '../..';\nimport agent from '../api/agent';\nimport { ICountry } from '../models/country'; //BrandFormValues,\n// import { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\n\n//==non of which is actually in use before the admin panel!!!!!!!!!==\n\nexport default class CountryStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n    @observable brandRegistry = new Map();\n\n    @observable countries: ICountry[] = [];\n    // @observable brandToSelect: BrandFormValues[] = [];\n    // @observable brand: ICountry | null = null;\n    @observable loadingInitial = false;\n    // @observable editMode = false;\n    // @observable submitting = false;\n\n    // @observable target = '';\n\n\n\n\n    @action loadCountriesToSelect = async () => {\n        this.loadingInitial = true;\n        try {\n            const countries = await agent.Countries.list();\n            runInAction('loading brands', () => {\n                this.countries = countries;\n                // console.log('countries', countries);\n            })\n        } catch (error) {\n            runInAction('load countries error', () => {\n                this.loadingInitial = false;\n\n            });\n            console.log(error);\n        }\n    }\n\n\n\n    // @action clearBrand = () => {\n    //     this.brand = null;\n    // }\n\n    // getBrand = (id: string) => {\n    //     return this.brandRegistry.get(id);\n    // };\n\n    // @action createBrand = async (brand: IBrand) => {\n    //     this.submitting = true;\n    //     try {\n    //         await agent.Brands.create(brand);\n    //         runInAction('creating brands', () => {\n    //             this.brandRegistry.set(brand.id, brand);\n    //             this.editMode = false;\n    //             this.submitting = false;\n    //         });\n    //         history.push(`/brands/${brand.id}`)\n    //     } catch (error) {\n    //         runInAction('create brand error', () => {\n    //             this.submitting = false;\n    //         });\n    //         toast.error('Problem submitting data');\n    //         // console.log(error.response);\n    //     }\n    // };\n}","import { action, computed, observable, runInAction } from 'mobx';//computed,\nimport { toast } from 'react-toastify';\n\nimport agent from '../api/agent';\nimport { IFeed } from '../models/feed';\nimport { RootStore } from './rootStore';\n\nconst LIMIT = 3;\n\nexport default class FeedStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n  @observable feedRegistry = new Map();\n\n  @observable feeds: IFeed[] = [];\n  @observable feedCount: number = 0;\n  @observable page: number = 0;\n\n  @observable loadingInitial = false;\n\n  @computed get totalPages() {\n    return Math.ceil(this.feedCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @computed get feedByDate() {\n    return this.groupFeedItemsByDate(Array.from(this.feedRegistry.values()));\n  }\n\n  groupFeedItemsByDate(feeds: IFeed[]) {\n    const sortedFeeds = feeds.sort(\n      (a, b) => Date.parse(b.dateTriggered!) - Date.parse(a.dateTriggered!)\n    )\n    return Object.entries(\n      sortedFeeds.reduce((feeds, feed) => {\n        const date = feed.dateTriggered?.split('T')[0];\n        feeds[date!] = feeds[date!]\n          ? [...feeds[date!], feed]\n          : [feed];\n        return feeds;\n\n      }, {} as { [key: string]: IFeed[] }));\n  }\n\n  formatDate(feed: IFeed) {\n    const delimiter = '.';\n    feed.dateTriggered = feed.dateTriggered?.split(delimiter)[0];\n    feed.dateTriggered = feed.dateTriggered?.replace('T', ' ');\n  }\n\n  @action addFeedItem = async (id: string, info: string, username?: string) => {\n    console.log('id', 'info', 'username')\n    console.log(id, info, username)\n    try {\n      await agent.Feed.addFeedItem(id, info, username);\n      toast.info('Successfully ' + info);\n    } catch (error) {\n      console.log(error);\n      toast.error('Problem ' + info);\n\n    }\n  }\n\n\n\n  @action loadFeed = async () => {\n    this.loadingInitial = true;\n    try {\n      const feedEnvelope = await agent.Feed.list(LIMIT, this.page);\n      const { feeds, feedCount } = feedEnvelope;\n      // console.log(feeds);\n      runInAction('loading feed', () => {\n        feeds.forEach((feed) => {\n          this.formatDate(feed);\n          this.feedRegistry.set(feed.id, feed);\n          // console.log('feed', feed)\n\n        });\n        // this.feeds = feeds;\n        this.feedCount = feedCount;\n        this.loadingInitial = false;\n\n      })\n    } catch (error) {\n      runInAction('load countries error', () => {\n        this.loadingInitial = false;\n\n      });\n      console.log(error);\n    }\n  }\n\n}","import { action, computed, observable, reaction, runInAction } from 'mobx';\n\nimport agent from '../api/agent';\nimport {  IProfile } from '../models/profile';\nimport { RootStore } from './rootStore';\nimport { v4 as uuid } from \"uuid\";\nimport { toast } from 'react-toastify';\n\nconst LIMIT = 8;\n\n\nexport default class PeopleStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n        () => this.predicate.keys(),\n        () => {\n          this.page = 0;\n          this.peopleRegistry.clear();\n          this.loadPeople();\n        }\n      )\n  }\n\n  @observable loadingPeople = false;\n  @observable people: IProfile[] = [];\n  @observable peopleCount: number;\n  @observable peopleRegistry = new Map();\n\n\n  @observable page: number = 0;\n\n  @computed get totalPages() {\n    return Math.ceil(this.peopleCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @observable predicate = new Map();\n//   @observable searchString = '';\n\n  @action setPredicate = (predicate: string, value: string  ) => { //| Date\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n \n    }\n  }\n\n  @computed get axiosParams () {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n        params.append(key, value )\n    })\n    return params;\n  }  \n\n\n  @computed get displayPeople () {\n    return Array.from(this.peopleRegistry.values());\n  } \n\n  @action cleanPeople = async () => {\n    runInAction(() => {\n      this.peopleRegistry.clear();\n      this.page = 0;\n    })\n  }\n  @action loadPeople = async () => {\n\n    this.loadingPeople = true;\n    try {\n      const peopleEnvelope = await agent.Profiles.listPeople(this.axiosParams);\n      const { people, peopleCount } = peopleEnvelope;\n      runInAction(() => {\n        this.loadingPeople = false;\n        people.forEach(person => {\n          person.id = uuid()\n          this.peopleRegistry.set(person.id, person);\n        })\n        this.peopleCount = peopleCount;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingPeople = false;\n      })\n      toast.error('Problem loading members');\n    }\n  }\n\n}\n","import { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { observable, action, computed, runInAction } from 'mobx';\n// import { toast } from 'react-toastify';\nimport { history } from '../..';\n\nimport agent from '../api/agent';\nimport { RootStore } from './rootStore';\nimport { IPrivateMessage } from '../models/privatemessages';\n\n\nconst LIMIT = 10;\n\nexport default class PrivateMessageStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n    }\n\n    @observable username: string = '';\n    @observable senderPhotoUrl: string;\n\n    @observable messageRegistry = new Map();\n    @observable loadingInitial = false;\n    @observable recipientUsername: any = '';\n\n    @observable messageThreadId: string;\n    @observable messageContent: string;\n\n    @observable messageThreadsCount = 0;\n    @observable page = 0;\n    @observable totalPages = 0;\n\n    @observable counterUnread: number = 0;\n\n    @observable listOfMessagesInFocus: [string, IPrivateMessage[]] | undefined = undefined;\n    @observable index: number;\n    @observable.ref hubConnection: HubConnection | null = null;\n\n    @computed get unreadPrivateMessages() {\n        return this.counterUnread;\n    }\n\n    @computed get messagesByThreadId() {\n        return this.groupMessagesByThreadId(Array.from(this.messageRegistry.values()));\n    }\n\n    groupMessagesByThreadId(messages: IPrivateMessage[]) {\n        //   console.log(toJS(messages))\n        const sortedMessages = messages.sort(\n            (a, b) => Date.parse(b.dateSent) - Date.parse(a.dateSent)\n        )\n        return Object.entries(sortedMessages.reduce((messages, message) => {\n            const threadId = message.privateMessageThreadId;\n            messages[threadId] = messages[threadId] ? [...messages[threadId], message] : [message];\n            return messages;\n        }, {} as { [key: string]: IPrivateMessage[] }));\n    }\n\n    @action createHubConnection = (messageThreadId: string) => {\n        this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_API_MESSAGE_URL!, {\n\n                accessTokenFactory: () => this.rootStore.commonStore.token!\n            })\n            // .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        //!! try await \n        this.hubConnection\n            .start()\n            .then(() => console.log(this.hubConnection!.state))\n            .then(() => {\n                // console.log('Attempting to join group');\n                //!!temp timeout\n                setTimeout(() => {\n                    this.hubConnection!.invoke('AddToGroup', messageThreadId)\n                }, 300);\n            })\n            .catch(error => console.log('Error establishing connection: ', error));\n\n        this.hubConnection.on('ReceiveMessage', message => {\n            console.log('message :::', message)\n\n            runInAction(() => {\n                this.messageRegistry.set(message.privateMessageThreadId, message);\n                this.setView(message.privateMessageThreadId)\n                console.log('message in runinaction :::', message)\n\n            });\n        })\n        this.hubConnection.on('SendMessage', message => {\n            // toast.info(message)\n        })\n    }\n\n    @action stopHubConnection = (messageThreadId: string) => {\n        this.hubConnection?.invoke('RemoveFromGroup', messageThreadId)\n            .then(() => {\n                this.hubConnection!.stop();\n            })\n            .then(() => console.log('Connection stopped'))\n            .catch(err => console.log(err));\n    }\n\n    @action addReply = async () => {\n        let messageToSend = {\n            recipientUsername: this.recipientUsername,\n            content: this.messageContent,\n            privateMessageThreadId: this.messageThreadId,\n            username: this.username\n        }\n        try {\n            await this.hubConnection!.invoke('SendMessage', messageToSend);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    @action getUnreadPrivate = async () => {\n        const result = await agent.PrivateMessages.checkUnread();\n        runInAction(() => {\n            this.counterUnread = result;\n        })\n    }\n\n    @action loadMessages = async () => {\n        this.loadingInitial = true;\n        try {\n\n            const messagesEnvelope = await agent.PrivateMessages.list(LIMIT, this.page);\n            const { privateMessages, privateMessageThreadsCount, totalPages } = messagesEnvelope;\n            runInAction('loading messages', () => {\n                privateMessages.forEach((message) => {\n                    this.formatDate(message);\n                    this.messageRegistry.set(message.id, message);\n                });\n                this.messageThreadsCount = privateMessageThreadsCount;\n\n                this.totalPages = totalPages;\n                this.loadingInitial = false;\n            });\n        } catch (error) {\n            runInAction('load messages error', () => {\n                this.loadingInitial = false;\n            });\n            console.log(error);\n        }\n    };\n    @action setPage = (page: number) => {\n        this.page = page;\n    }\n\n\n    @action setInitialView = () => {\n\n        this.listOfMessagesInFocus = this.messagesByThreadId[0]\n    }\n\n    @action setView = (id?: string) => {\n\n        runInAction(() => {\n            this.index = this.messagesByThreadId.findIndex(m => m[0] === id);\n        })\n        this.listOfMessagesInFocus = this.messagesByThreadId[this.index];\n        return this.listOfMessagesInFocus;\n    }\n\n\n    formatDate(message: IPrivateMessage) {\n        const delimiter = '.';\n        message.dateSent = message.dateSent?.split(delimiter)[0];\n        message.dateSent = message.dateSent.replace('T', ' ');\n    }\n\n    @action markReadInDB = async (id: string) => {\n        try {\n            await agent.PrivateMessages.markRead(id);\n            runInAction(() => {\n                this.listOfMessagesInFocus?.[1].forEach((messages: IPrivateMessage) => {\n                    if (messages.dateRead === null) {\n                        messages.dateRead = new Date().toISOString()\n                    }\n                })\n            })\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    @action setRecipient = (username: string, userPhotoUrl: any) => {\n        this.recipientUsername = username;\n    }\n    @action setMessageThreadId = (messageThreadId: string) => {\n        this.messageThreadId = messageThreadId\n    };\n    @action setReply = (content: string) => {\n        this.messageContent = content;\n    };\n    @action setUsername = (username: string) => {\n        this.username = username;\n    }\n    @action sendMessage = async (messageToSend: any) => {\n\n        try {\n            let message = await agent.PrivateMessages.create(messageToSend);\n            console.log(message);\n            runInAction('loading message ', () => {\n                this.rootStore.modalStore.closeModal();\n            });\n            history.push('/privateMessages');\n        } catch (error) {\n            runInAction('load thread error', () => {\n            });\n            console.log(error);\n        }\n    };\n}\n\n\n\n","import { configure } from 'mobx';\nimport { createContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './profileStore';\nimport UserStore from './userStore';\nimport ForumPostStore from './forumPostStore';\nimport MotofyStore from './motofyStore';\nimport MechanicStore from './mechanicStore';\nimport BrandStore from './brandStore';\nimport ProductStore from './productStore';\nimport CommentStore from './commentStore';\nimport CountryStore from './countryStore';\nimport FeedStore from './feedStore';\nimport PeopleStore from './peopleStore';\nimport PrivateMessageStore from './privateMessageStore';\n\n// === mobx === //\nconfigure({ enforceActions: 'always' });\n\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    forumPostStore: ForumPostStore;\n    motofyStore: MotofyStore;\n    mechanicStore: MechanicStore;\n    brandStore: BrandStore;\n    productStore: ProductStore;\n    commentStore: CommentStore;\n    countryStore: CountryStore;\n    feedStore: FeedStore;\n    peopleStore: PeopleStore;\n    privateMessageStore: PrivateMessageStore;\n\n\n    constructor () {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n        this.forumPostStore = new ForumPostStore(this);\n        this.motofyStore = new MotofyStore(this);\n        this.mechanicStore = new MechanicStore(this);\n        this.brandStore = new BrandStore(this);\n        this.productStore = new ProductStore(this);\n        this.commentStore = new CommentStore(this);\n        this.countryStore = new CountryStore(this);\n        this.feedStore = new FeedStore(this);\n        this.peopleStore = new PeopleStore(this);\n        this.privateMessageStore = new PrivateMessageStore(this);\n    }\n}\n\nexport const RootStoreContext = createContext(new RootStore());","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport \"./Navbar.css\";\n\nimport { Link, NavLink } from \"react-router-dom\";\nimport {\n  Container,\n  Dropdown,\n  Image,\n  Label,\n  Menu,\n  Popup,\n} from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nimport { useTranslation } from \"react-i18next\";\nimport i18next from \"i18next\";\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { user, logout, isLoggedIn } = rootStore.userStore;\n  const { unreadPrivateMessages, getUnreadPrivate } =\n    rootStore.privateMessageStore;\n\n  const { i18n, t } = useTranslation([\"navbar\"]);\n\n  const menuRef: any = useRef();\n\n  const closeStackableMenu = () => {//e: any\n    var actionMenu = menuRef.current.parentNode;\n    var actionIcon = menuRef.current;\n    actionMenu.classList.remove(\"active\");\n    actionMenu.classList.remove(\"open\");\n    actionIcon.classList.remove(\"active\");\n    actionIcon.classList.remove(\"open\");\n  };\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      menuRef.current.onclick = function (e: any) {\n        var menu = menuRef.current.parentNode;\n\n        if (!this.classList.contains(\"active\")) {\n          this.classList.add(\"active\");\n          menu.classList.add(\"open\");\n        } else {\n          this.classList.remove(\"active\");\n          menu.classList.remove(\"open\");\n        }\n\n        e.preventDefault();\n      };\n    }\n  }, [isLoggedIn]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"i18nextLng\")?.length! > 2) {\n      i18next.changeLanguage(\"en\");\n    }\n    if (isLoggedIn) {\n      setInterval(() => {\n        getUnreadPrivate();\n      }, 2000);\n    }\n  }, [getUnreadPrivate, isLoggedIn]);\n\n  const handleLanguageChange = (e: any) => {\n    i18n.changeLanguage(e.target.value);\n    closeStackableMenu()\n  };\n  \n\n  return (\n    <>\n      <Container>\n        <Menu\n          style={{ textAlign: \"center\" }}\n          fixed='top'\n          stackable\n          inverted\n          pointing\n        >\n          <Menu.Item as={NavLink} exact to='/'>\n            <img\n              src='/assets/logo.png'\n              alt='logo'\n              style={{ marginRight: \"10\" }}\n              onClick={closeStackableMenu}\n            />\n            Motoranza\n          </Menu.Item>\n\n          {isLoggedIn && (\n            <>\n              <Menu.Item\n                // name='Motorcycle Diaries'\n                exact\n                as={NavLink}\n                to='/activities'\n                onClick={closeStackableMenu}\n              >\n                {t(\"motorcycle diaries\")}\n              </Menu.Item>\n              <Menu.Item\n                exact\n                as={NavLink}\n                to='/gallery'\n                onClick={closeStackableMenu}\n              >\n                Motofy!\n              </Menu.Item>\n              <Menu.Item\n                // name='forum'\n                exact\n                as={NavLink}\n                onClick={closeStackableMenu}\n                to='/forum'\n              >\n                {\" \"}\n                {t(\"forum\")}\n              </Menu.Item>\n              <Menu.Item\n                name='mechanics'\n                exact\n                as={NavLink}\n                to='/mechanics'\n                onClick={closeStackableMenu}\n              >\n                 {t(\"mechanics\")}\n              </Menu.Item>\n              <Menu.Item\n                name='market'\n                text='Motoranza market'\n                // exact\n                value='Market'\n                as={Link}\n                to='/shop'\n                onClick={closeStackableMenu}\n              >   {t(\"market\")}\n              </Menu.Item>\n              <Menu.Item>\n                <Dropdown  text={t(\"social\")} className='icon' floating labeled>\n                  <Dropdown.Menu>\n                    <Dropdown.Item\n                      name='people'\n                      // text='People'\n                      // exact\n                      as={Link}\n                      onClick={closeStackableMenu}\n                      to='/people'\n                      >   {t(\"people\")}\n                      </Dropdown.Item>\n                    <Dropdown.Item\n                      name='people'\n                      // text='Private messages'\n                      onClick={closeStackableMenu}\n                      as={Link}\n                      to='/privateMessages'\n                      >   {t(\"private messages\")}\n                      </Dropdown.Item>\n                    <Dropdown.Item\n                      name='feed'\n                      // text='Feed'\n                      // exact\n                      as={Link}\n                      onClick={closeStackableMenu}\n                      to='/feed'\n                      >   Feed\n                      </Dropdown.Item>\n                  </Dropdown.Menu>\n                   \n                </Dropdown>\n                {unreadPrivateMessages > 0 && (\n                  <Label\n                    as={Link}\n                    to='/privateMessages'\n                    color='orange'\n                    onClick={closeStackableMenu}\n                  >\n                    {unreadPrivateMessages}\n                  </Label>\n                )}\n              </Menu.Item>\n              <div className='right menu'>\n                {/* {user && ( */}\n                <Menu.Item>\n                  <Dropdown text= {t(\"new\")}className='icon' floating labeled>\n                    <Dropdown.Menu>\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        // className=\"mobile hidden\"\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"motorcycle diary\")}\n                            value='MotoDiary'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/createDiary'\n                          />\n                        }\n                        content={t(\"motorcycle diary pop\")}\n                        />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                          text='Motofy!'\n                            value='Motofy'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/galleryForm'\n                            />\n                          }\n                          content={t(\"motofy pop\")}\n                          />\n\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                          text={t(\"mechanic shop\")}\n                          value='Mecanic'\n                          as={Link}\n                          onClick={closeStackableMenu}\n                          to='/mechanicForm'\n                          />\n                        }\n                        content={t(\"mechanic shop pop\")}\n                        />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                            text={t(\"forumpost\")}\n                            value='Forum'\n                            as={Link}\n                            onClick={closeStackableMenu}\n                            to='/forumform'\n                            />\n                          }\n                          content={t(\"forumpost pop\")}\n                          />\n                      <Popup\n                        size='mini'\n                        position='right center'\n                        trigger={\n                          <Dropdown.Item\n                          text={t(\"product to sell\")}\n                          value='Product'\n                          as={Link}\n                          onClick={closeStackableMenu}\n                          to='/productform'\n                          />\n                        }\n                        content={t(\"product to sell pop\")}\n                      />\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Menu.Item>\n                {/* )}*/}\n                {user && (\n                  <>\n                    <Menu.Item position='right'>\n                      <select\n                      onChange={(e) => {\n                        handleLanguageChange(e)\n                      }}\n                        value={localStorage.getItem(\"i18nextLng\")!}\n                        placeholder='Select your country'\n                      >\n                        <option value='en'>English</option>\n                        <option value='it'>Italiano</option>\n                        <option value='de'>Deutsch</option>\n\n                      </select>\n                     \n                    </Menu.Item>\n                    <Menu.Item position='right'>\n                      <Image\n                        avatar\n                        spaced='right'\n                        src={user!.image || \"/assets/user.png\"}\n                      />\n                      <Dropdown pointing='top left' text={user!.displayName}>\n                        <Dropdown.Menu>\n                          <Dropdown.Item\n                            as={Link}\n                            to={`/profile/${user!.userName}`}\n                            text={t(\"my profile\")}\n                            onClick={closeStackableMenu}\n                            icon='user'\n                          />\n                          <Dropdown.Item\n                            onClick={logout}\n                            text={t(\"logout\")}\n                            icon='power'\n                          />\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Menu.Item>\n                  </>\n                )}\n              </div>\n              <div ref={menuRef} className='hamburger '>\n                <span className='hamburger-bun'></span>\n                <span className='hamburger-patty'></span>\n                <span className='hamburger-bun'></span>\n              </div>\n            </>\n          )}\n        </Menu>\n      </Container>\n    </>\n  );\n};\nexport default observer(NavBar);\n","import React, { useContext, useState } from \"react\";\nimport { Menu, Input, Divider, Icon, SegmentGroup } from \"semantic-ui-react\";\nimport { Calendar } from \"react-widgets\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.activityStore;\n\n  const [calendarFilter, setCalendarFilter] = useState(false);\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n\n  const toggleCalendar = () => {\n    setCalendarFilter(!calendarFilter);\n  };\n  const styles = {\n    textAlign: \"center\",\n  };\n  return (\n    <SegmentGroup raised>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        {!calendarFilter && (\n          <>\n            <Menu.Item active={predicate.has(\"search\")}>\n              <Input\n                icon='search'\n                placeholder={t(\"Search all\")}\n                onKeyDown={(e: any) => handleResultSelect(e)}\n              />\n            </Menu.Item>\n            <Divider horizontal \n            content={t(\"or choose from built in filters\")}\n            />\n          </>\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.size === 0}\n            onClick={() => setPredicate(\"all\", \"true\")}\n            color={\"blue\"}\n            name={\"all\"}\n            content={t(\"Active Diaries\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isCompleted\")}\n            onClick={() => setPredicate(\"isCompleted\", \"true\")}\n            color={\"blue\"}\n            name={\"isCompleted\"}\n            content={t(\"Completed Diaries\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isHost\")}\n            onClick={() => setPredicate(\"isHost\", \"true\")}\n            color={\"blue\"}\n            name={\"host\"}\n            content={t(\"My own\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"isGoing\")}\n            onClick={() => setPredicate(\"isGoing\", \"true\")}\n            color={\"blue\"}\n            name={\"username\"}\n            content={t(\"Diaries I follow\")}\n            style={styles}\n          />\n        )}\n        {!calendarFilter && (\n          <Menu.Item\n            active={predicate.has(\"iFollow\")}\n            onClick={() => setPredicate(\"iFollow\", \"true\")}\n            color={\"blue\"}\n            name={\"country\"}\n            content={t(\"By people I follow\")}\n            style={styles}\n          />\n        )}\n        <Menu.Item\n          active={calendarFilter}\n          color={\"blue\"}\n          content={!calendarFilter ? t(\"Select Diaries After A Date\")\n          : <span><Icon name=\"arrow left\"/>{ t(\"Go back to built-in filters\")}</span> }\n          style={styles}\n          onClick={toggleCalendar}\n        />\n      </Menu>\n      {calendarFilter && (\n          <Calendar\n            onChange={(date) => setPredicate(\"startDate\", date!)}\n            value={predicate.get(\"startDate\") || new Date()}\n          />\n      )}\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ActivityListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst SearchDiaries = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.activityStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchDiaries;\n","import { observer } from \"mobx-react-lite\";\nimport React, {  useContext } from \"react\"; \nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport SearchDiaries from \"../modals/SearchDiaries\";\n\n\nconst ActivityMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.activityStore;\n\n  const { openModal } = rootStore.modalStore;\n\nconst handleSearch = () => {\n  openModal(<SearchDiaries />)\n}\n\n  return (\n    \n    <Menu fluid widths={5} style={{top: '200px'}}>\n      <Menu.Item\n        active={predicate.size === 0}\n        onClick={() => setPredicate(\"all\", \"true\")}\n        color={\"blue\"}\n        icon={\"home\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"isCompleted\")}\n        onClick={() => setPredicate(\"isCompleted\", \"true\")}\n        color={\"blue\"}        \n        icon={\"history\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"isGoing\")}\n        onClick={() => setPredicate(\"isGoing\", \"true\")}\n        color={\"blue\"}\n        icon={\"at\"}\n       \n      />\n      <Menu.Item\n        active={predicate.has(\"isHost\")}\n        onClick={() => setPredicate(\"isHost\", \"true\")}\n        color={\"blue\"}\n        icon={\"heartbeat\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"calendar\")}\n        onClick={() => handleSearch()}\n        color={\"blue\"}\n        icon={\"search\"}\n      />\n      {/* <Menu.Item style={{textAlign:\"left\"}}>\n        <DatePicker\n          onChange={(date) => setPredicate(\"startDate\", date!)}\n          withPortal\n        />\n      </Menu.Item> */}\n    </Menu>\n  );\n};\n\nexport default observer(ActivityMobileFilters);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IAttendee } from '../../../app/models/activity';\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst styles = {\n  borderColor: 'green',\n  borderWidth: 2\n}\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\n\n  return (\n    <List horizontal>\n      {attendees.map((attendee) => (\n        <List.Item key={attendee.username}>\n          <Popup\n            header={attendee.displayName}\n            trigger={\n              <Image\n                size='mini'\n                circular\n                src={attendee.image || '/assets/user.png'}\n                bordered\n                style={attendee.following ? styles : null}\n              />\n            }\n          />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ActivityListItemAttendees;\n","import React, {\n  // useEffect, // , { useContext }\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Accordion, Button, Item, Segment } from \"semantic-ui-react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport ActivityListItemAttendees from \"./ActivityListItemAttendees\";\n\nimport { useTranslation } from \"react-i18next\";\n// import i18next from \"i18next\";\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\n  const { t } = useTranslation([\"diaries\"]);\n\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n\n  const when = t(\"when\");\n  const starting_point = t(\"starting_point\");\n  const destination = t(\"destination\");\n\n  const panels = [\n    {\n      key: \"when\",\n      title: when ,\n      content: [\"On \" + format(activity.date, \"MMMM d yyyy h:mm:a\")].join(\" \"),\n    },\n    {\n      key: \"starting_point\",\n      title: starting_point,\n      content: [\"In \" + activity.city + \", \" + activity.departure].join(\" \"),\n    },\n    {\n      key: \"destination\",\n      title:destination,\n      content: [activity.destination],\n    },\n  ];\n\n  // const descriptionUiShort = activity.description.substring(0, 60);\n  // const seeMore = \"...see more\";\n\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Item.Group>\n          <Item>\n            {/* <Item.Content> */}\n            {/* <Item.Description>\n                {activity.isHost && (\n                  <Label\n                    // pointing='below'\n                    basic\n                    color='teal'\n                    content={userMessage}\n                  />\n                )}\n                {activity.isGoing && !activity.isHost && (\n                  <Label\n                    // pointing='below'\n                    basic\n                    color='green'\n                    content={namedMessage}\n                    //\n                  />\n                )}\n              </Item.Description> */}\n            <Item.Image\n              size='tiny'\n              circular\n              src={host.image || \"/assets/user.png\"}\n              style={{ marginBottom: 3 }}\n            />\n            {/* </Item.Content> */}\n            <Item.Content\n              verticalAlign='middle'\n              style={{ textAlign: \"center\" }}\n            >\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                <h2>{activity.title}</h2>\n              </Item.Header>\n              <Item.Meta>\n                by{\" \"}\n                <Link to={`/profile/${host.username}`}>\n                  {\" \"}\n                  {host.displayName}\n                </Link>\n              </Item.Meta>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        {/* <Icon name='clock' /> {format(activity.date, 'h:mm:a')}\n        <Icon name='marker' /> Starting Point: {activity.venue}, {activity.city}\n        <Icon name='marker' /> Destination: {activity.destination}  */}\n\n        <Accordion fluid panels={panels} styled exclusive={false} />\n      </Segment>\n      <Segment clearing>\n        <Item.Group>\n          <Item.Description as={Link} to={`/activities/${activity.id}`}>\n            <span>{activity.description.substring(0, 60)}</span> <span>...see more</span>\n          </Item.Description>\n        </Item.Group>\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendees attendees={activity.attendees} />\n      </Segment>\n      <Segment secondary>\n        <Button\n          as={Link}\n          to={`/activities/${activity.id}`}\n          // floated='right'\n          content={t(\"Check This Diary\")}\n          color='blue'\n          fluid\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityListItem;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nconst ActivityList = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { activitiesByDate } = rootStore.activityStore;\n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Item.Group divided>\n            {activities.map((activity) => (\n              <ActivityListItem key={activity.id} activity={activity} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityList);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\nimport ActivityMobileFilters from \"./ActivityMobileFilters\";\nimport ActivityList from \"./ActivityList\";\n\n//REFACTOR or delete!!!\n// import ActivityListItemMissedSearch from \"./ActivityListItemMissedSearch\";\n\nconst ActivityDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n    // activityHit,\n    // activityMax\n  } = rootStore.activityStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadActivities().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <ActivityMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <ActivityListItemPlaceholder />\n        ) : \n        // (\n        //   <>\n        //     {(activityHit === false && activityMax === false) ? (\n        //       <ActivityListItemMissedSearch />\n        //     ) : \n            (\n              <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && page + 1 < totalPages}\n                initialLoad={false}\n              >\n                <ActivityList />\n              </InfiniteScroll>\n            )\n          }\n          {/* </>\n        )} */}\n      </Grid.Column>\n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n          <ActivityFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column width={11}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","import { AxiosResponse } from 'axios';\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface IProps {\n  error: AxiosResponse;\n  text?: string ;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({ error, text  }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {error.data && Object.keys(error.data.errors).length > 0 && (\n          <Message.List>\n              {Object.values(error.data.errors).flat().map((err: any, i) => (\n                  <Message.Item key={i}>{err}</Message.Item>\n              ))}\n          </Message.List>\n      )}\n      {text && <Message.Content content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { Form, FormFieldProps, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\n    \nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error },\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {/* type='text' was and error */}\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n\n","import { FORM_ERROR } from 'final-form';\nimport React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\nimport { combineValidators, isRequired } from 'revalidate';\nimport { Button, Form, Header } from 'semantic-ui-react';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\nimport TextInput from '../../app/common/form/TextInput';\nimport { IUserFormValues } from '../../app/models/user';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\n\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n  \n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    email: isRequired({message : t('Email is required')}),\n    password: isRequired({message : t('Password is required')}),\n  });\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        login(values).catch((error) => ({\n          [FORM_ERROR]: error,\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit,\n      }) => (\n        <Form onSubmit={handleSubmit} error={submitError} autoComplete='off'>\n          <Header\n            as='h2'\n            content={t('Login to Motoranza')}\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='email' component={TextInput} placeholder={t('Email')} />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder={t('Password')}\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n              text={t('Invalid email address or password')}\n            />\n          )}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content={t('Login')}\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default LoginForm;\n","import { FORM_ERROR } from \"final-form\";\nimport React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport {\n  combineValidators,\n  isRequired,\n  matchesField,\n  composeValidators,\n  createValidator,\n} from \"revalidate\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport TextInput from \"../../app/common/form/TextInput\";\n// import { IUserFormValues } from '../../app/models/user';\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  \n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n\n  const validate = combineValidators({\n    username: isRequired({ message: t(\"Username is required\") }),\n    displayName: isRequired({ message: t(\"Display Name is required\") }),\n    password: isRequired({ message: t(\"Password is required\") }),\n    email: composeValidators (\n      isRequired({ message: t(\"Email is required\") }),\n      isValidEmail({ message: t(\"Invalid email address\") }),\n    )(),\n    confirmPassword: composeValidators(\n      isRequired({ message: t(\"Confirmation of password is required\") }),\n      matchesField(\n        \"password\",\n        \"confirmPassword\"\n      )({\n        message: t(\"Passwords do not match\"),\n      })\n    )(),\n  });\n\n  return (\n    <FinalForm\n      onSubmit={(values: any) =>\n        register(values)\n          .then(() => addFeedItem(uuid(), \"Registered\", values.username))\n          .catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit,\n      }) => (\n        <Form onSubmit={handleSubmit} error={submitError}>\n          <Header\n            as='h2'\n            content={t(\"Sign up to Motoranza\")}\n            color='teal'\n            textAlign='center'\n          />\n          <Field\n            name='username'\n            component={TextInput}\n            placeholder={t(\"Username\")}\n          />\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder={t(\"Display Name\")}\n          />\n          <Field name='email' component={TextInput} placeholder={t(\"Email\")} />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder={t(\"Password\")}\n            type='password'\n          />\n          <Field\n            name='confirmPassword'\n            component={TextInput}\n            placeholder={t(\"Confirm Password\")}\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage error={submitError} />\n          )}\n\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content={t(\"Register\")}\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import React, { Fragment, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterForm from \"../user/RegisterForm\";\nimport \"./Homepage.css\";\nimport { useTranslation } from \"react-i18next\";\n\nconst HomePage = () => {\n  const token = window.localStorage.getItem(\"jwt\");\n  const rootStore = useContext(RootStoreContext);\n  const { isLoggedIn, user } = rootStore.userStore;\n  const { openModal } = rootStore.modalStore;\n\n  const {t} = useTranslation('home'); \n\n  return (\n    <Segment inverted textAlign='center' vertical className='masthead'>\n      <Container text>\n        {/* <Transition animation='slide left' duration={5} directional> */}\n\n        <Header as='h1' inverted className='animationLeft'>\n          <Image\n            size='massive'\n            src='/assets/logo.png'\n            alt='logo'\n            style={{ marginBottom: 12 }}\n          />\n          MOTORANZA\n        </Header>\n        {/* </Transition> */}\n        {isLoggedIn && user && token ? (\n          <Fragment>\n            <Header\n              // className='animationLeft'\n              as='h2'\n              inverted\n              // content={`t(\"welcome back to motoranza\") ${user.displayName}`}\n            >\n              {t(\"welcome back to motoranza\")}{\" \"} {user.displayName}\n            </Header>\n            <Button\n              as={Link}\n              to='/activities'\n              size='huge'\n              inverted\n              className='btn'\n            >\n             {t('enter motoranza')}\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Header as='h2' inverted content={t(\"Welcome to Motoranza\")} />\n            <Button\n              onClick={() => openModal(<LoginForm />)}\n              to='/login'\n              size='huge'\n              inverted\n            >\n              {/* Login to Enter */}\n              {t('login to enter')}\n            </Button>\n            <Button\n              onClick={() => openModal(<RegisterForm />)}\n              size='huge'\n              inverted\n            >\n              {/* Register to Enter */}\n              {t('register to enter')}\n            </Button>\n          </Fragment>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default HomePage;\n","import { IComment } from \"./comment\";\n\nexport interface IActivitiesEnvelope {\n  activities: IActivity[];\n  activityCount: number;\n}\n\nexport interface IActivity {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  date: Date;\n  city: string;\n  countryName: string;\n  countryId: string;\n  departure: string;\n  destination: string;\n  isGoing: boolean;\n  isHost: boolean;\n  isActive: boolean;\n  attendees: IAttendee[];\n  comments: IComment[];\n  diaryEntries: IDiaryEntry[];\n  motorcycleBrandId: string;\n  motorcycleBrandName: string;\n  motorcycleBrandLogoUrl: string;\n}\n\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n  time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  motorcycleBrandId: string = '';\n  motorcycleBrandName: string = '';\n  motorcycleBrandLogoUrl: string = '';\n  category: string = '';\n  description: string = '';\n  date?: Date = undefined;\n  time?: Date = undefined;\n  city: string = '';\n  countryName: string = '';\n  countryId: string = '';\n  departure: string = '';\n  destination: string = '';\n  //TODO:motorcycleBrandId, name etc...\n\n\n  constructor(init?: IActivityFormValues) {\n    if (init && init.date) {\n      init.time = init.date;\n    }\n    Object.assign(this, init);\n  }\n}\n\nexport interface IAttendee {\n  username: string;\n  displayName: string;\n  image: string;\n  isHost: boolean;\n  following?: boolean;\n}\nexport interface IDiaryEntry {\n  id: string;\n  body: string;\n  dayNumber: string;\n  entryDate: Date;\n  locationCity: string;\n  locationCountry: string;\n  road: string;\n  weather: string;\n  numberOfKilometers: number;\n  photoUrl: string;\n  mood: string;\n  file: any;\n  activityId: string;\n}\n\nexport class DiaryEntryFormValues {\n  id?: string = undefined;\n  mood: string = '';\n  body: string = '';\n  entryDate: Date;\n  locationCity: string = '';\n  locationCountry: string = '';\n  photoUrl: string = '';\n\n}\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n            search \n            selection\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput","export const category = [\n    { key: 'cityRidding', text: 'City Ridding', value: 'City Ridding' },\n    { key: 'outdoors', text: 'Outdoors', value: 'Outdoors' },\n    { key: 'byTheSea', text: 'By The Sea', value: 'By The Sea' },\n    { key: 'mountains', text: 'Mountains', value: 'Mountains' },\n    { key: 'cruise', text: 'Cruise', value: 'Cruise' },\n    { key: 'offRoad', text: 'Off Road', value: 'Off Road' },\n    { key: 'racing', text: 'Racing', value: 'Racing' },\n    { key: 'outToLunch', text: 'Out To Lunch', value: 'Out To Lunch' },\n    { key: 'goToPlaces', text: 'Go To Places', value: 'Go To Places' },\n    { key: 'rockAndRoll', text: 'Rock And Roll', value: 'Rock And Roll' },\n    { key: 'heavyMetal', text: 'Heavy Metal', value: 'Heavy Metal' },\n    { key: 'gang', text: 'Gang', value: 'Gang' }\n  ];","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <DateTimePicker \n            placeholder={placeholder}\n            value={input.value || null}\n            onChange={input.onChange}\n            onBlur={input.onBlur}\n            onKeyDown={(e) => e.preventDefault()}\n            date={date}\n            time={time}\n            {...rest}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default DateInput","import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Form, Grid, Label, Segment } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from 'revalidate';\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity,\n  } = rootStore.activityStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const {loadBrandsToSelect, brands } = rootStore.brandStore;\n  const [editMode, setEditMode] = useState(false);\n\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired( { message: t(\"City is required\") }),\n    departure: isRequired( { message: t(\"Place of departure is required\")}),\n    destination: isRequired( { message: t(\"Place of destination is required\")}),\n    date: isRequired({ message: t(\"Date is required\") }),\n    time: isRequired( { message: t(\"Time is required\") }),\n  });\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadBrandsToSelect();\n\n    loadCountriesToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n      setLoading(true);\n      loadActivity(match.params.id)\n      .then((activity) => setActivity(new ActivityFormValues(activity)))\n      .finally(() => setLoading(false));\n    }\n  }, [loadBrandsToSelect, loadActivity, match.params.id, loadCountriesToSelect]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    // console.log('brands in edit',toJS(brands));\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: newId,\n        isHost: true,\n        isActive: true,\n        diaryEntries: []\n      };\n      createActivity(newActivity);\n      addFeedItem(newId, 'Added Motocycle Diary')\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column \n      computer={10} mobile={16}\n      >\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                {editMode && <Label content={t('Title')}/>}\n                <Field\n                  name='title'\n                  placeholder={t('Title')}\n                  value={activity.title}\n                  component={TextInput}\n                />\n\n                  {!editMode && (\n                    <Field\n                      name='motorcycleBrandName'\n                      placeholder={t(\"Your motorcycyle brand\")} \n                      options={brands}\n                      component={SelectInput}\n                    />\n                  )} \n                  {editMode && <Label content={t('Description')}/>}\n                <Field\n                  placeholder={t('Description')}\n                  name='description'\n                  value={activity.description}\n                  rows={3}\n                  component={TextAreaInput}\n                />\n                {editMode && <Label content={t('Category')}/>}\n                <Field\n                  placeholder={t('Category')}\n                  name='category'\n                  options={category}\n                  value={activity.category}\n                  component={SelectInput}\n                />{editMode && <Label content={t('Date and Time')}/>}\n                <Form.Group widths='equal'>\n                  <Field\n                    placeholder={t('Date')}\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder={t('Time')}\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                  {editMode && <Label content={t('Country')}/>}\n                    <Field\n                      placeholder={t('Country')}\n                      name='countryName'\n                      options={countries}\n                      component={SelectInput}\n                    />\n                {editMode && <Label content={t('City')}/>}\n                <Field\n                  placeholder={t('City')}\n                  name='city'\n                  value={activity.city}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Departure/Starting Point')}/>}\n                <Field\n                  name='departure'\n                  placeholder={t('Departure/Starting Point')}\n                  value={activity.departure}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Destination')}/>}\n                <Field\n                  placeholder={t('Destination')}\n                  name='destination'\n                  value={activity.destination}\n                  component={TextInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content={t('Submit')}\n                ></Button>\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content={t('Cancel')}\n                ></Button>\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n      <Grid.Column width={3} />\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React from 'react';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { IEmbracer } from '../../../app/models/motofy';\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\nconst styles = {\n  borderColor: 'green',\n  borderWidth: 2\n}\nconst GalleryListItemEmbracers: React.FC<IProps> = ({ embracers }) => {\n  return (\n    <List horizontal>\n      {embracers.map(embracer => (\n        <List.Item key={embracer.username}>\n          \n            <Popup\n                header={embracer.displayName}\n                trigger={\n                <Image size='mini' \n                circular \n                src={embracer.image || '/assets/user.png'} \n                bordered\n                style={embracer.following ? styles : null}\n                />\n              }\n            />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default GalleryListItemEmbracers;\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Icon,\n  Item,\n  Segment,\n  Image,\n  Grid,\n  Divider,\n  Header,\n  Popup,\n} from \"semantic-ui-react\";\n\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport GalleryListItemEmbracers from \"./GalleryListItemEmbracers\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  motofy: IMotofy;\n}\n\nconst GalleryListItem: React.FC<IProps> = ({ motofy }) => {\n\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Item>\n          <Divider horizontal>\n            <Header as='h4'>\n              <Item.Meta>\n                {\" \"}\n                {motofy.name}, {motofy.brandName}\n              </Item.Meta>\n            </Header>\n          </Divider>\n          <Item.Group>\n            <Link to={`/gallery/${motofy.id}`}>\n              <img\n                className='ui centered big image'\n                src={motofy.photoUrl! || \"/assets/user.pn\"}\n                alt='Motofy!'\n              />\n            </Link>\n          </Item.Group>\n          <Divider horizontal>\n            <Header as='h4'>\n              {t(\"Info\")}\n            </Header>\n          </Divider>\n          <Grid\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              display: \"flex\",\n              textAlign: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid.Row>\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Popup\n                  header={motofy.brandName}\n                  className='computer only'\n                  trigger={\n                    <Image\n                      size='tiny'\n                      src={motofy.brandLogoUrl || \"/assets/user.pn\"}\n                      centered\n                    />\n                  }\n                />\n              </Grid.Column>\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Item.Header as={Link} to={`/gallery/${motofy.id}`}>\n                  {motofy.name}\n                </Item.Header>\n                <Item.Meta>\n                  {motofy.city}, {motofy.countryName}\n                </Item.Meta>\n              </Grid.Column>\n\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Icon name='motorcycle' /> {motofy.model}\n              </Grid.Column>\n\n              <Grid.Column computer={4} tablet={8} mobile={8}>\n                <Icon name='road' /> {motofy.numberOfKilometers} Km\n              </Grid.Column>\n            </Grid.Row>\n\n          \n          </Grid>\n        </Item>\n\n     \n\n        <Divider horizontal>\n          <Header as='h4'>\n            {t(\"Embraced by\")}\n          </Header>\n        </Divider>\n        <GalleryListItemEmbracers embracers={motofy.embracers} />\n      </Segment>\n      <Segment clearing>\n        <Button\n          as={Link}\n          to={`/gallery/${motofy.id}`}\n          fluid\n          content={t(\"View This \") + motofy.brandName}\n          color='blue'\n        ></Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GalleryListItem);\n","import React, { Fragment, useContext } from 'react';\nimport {  Item } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport GalleryListItem from './GalleryListItem';\nimport { IMotofy } from '../../../app/models/motofy';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst GalleryList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {motofiesByDate } = rootStore.motofyStore;\n\n\n  return (\n\n      <Item.Group divided>\n        {motofiesByDate.map((motofy:IMotofy) => (\n\n          <Fragment key={motofy.id}>\n            <GalleryListItem motofy={motofy} />\n          </Fragment>\n          \n        ))}\n      </Item.Group>\n   \n  );\n};\n// }\n\nexport default observer(GalleryList);\n","import React, { useContext } from \"react\";\nimport { Segment, Grid, Header, Item } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst GalleryChamps: React.FC<{ motofy: IMotofy, info:string }> = ({\n  motofy,\n  info\n}) => {\n  // const motofy = { ...champ };\n  const rootStore = useContext(RootStoreContext);\n\n  const { closeModal } = rootStore.modalStore;\n\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Link to={`/gallery/${motofy.id}`} onClick={() => closeModal()}>\n          <Grid>\n            <Grid.Column width={16}>\n              <Header\n                // icon={\"certificate\"}\n                attached\n                color={\"teal\"}\n                content={info}\n              />\n            </Grid.Column>\n            <Grid.Column width={16}>\n              <Grid.Row>\n              <Item.Image src={motofy.photoUrl} bordered fluid/>\n              </Grid.Row>\n              <Grid.Row>\n                <Item.Group>\n                  <Item>\n                    <Item.Content>\n                      <Item.Header>\n                        <p>{motofy.name}</p>\n                      </Item.Header>\n                      <Item.Description>\n                        {/* {motofy.model}, */}\n                        <p>\n                          {/* {motofy.brandName}, {\" \"} */}\n                          {motofy.city}, {motofy.countryName},{\" \"}\n                        </p>\n                        {/* {motofy.yearOfProduction} */}\n                      </Item.Description>\n\n                      {/* <p>{motofy.name}</p> */}\n                    </Item.Content>\n                  </Item>\n                </Item.Group>\n              </Grid.Row>\n            </Grid.Column>\n          </Grid>\n        </Link>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryChamps;\n","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Input, Divider } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport GalleryChamps from \"../modals/GalleryChamps\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GalleryFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate, mostEmbraced, highestRatedMotofy } =\n    rootStore.motofyStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const handleOpenChamps = (info: string) => {\n    switch (info) {\n      case 'Most Embraced':\n        openModal(<GalleryChamps motofy={mostEmbraced} info={info}/>);\n        break;\n      default:\n        openModal(<GalleryChamps motofy={highestRatedMotofy} info={info}/>);\n        break;\n    }\n  };\n\n  const styles = {\n    textAlign: \"center\",\n    cursor: \"pointer\",\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Divider horizontal content={t(\"or choose from built in filters\")} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"globe\"}\n          content={t(\"All motofies\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => setPredicate(\"bestRated\", \"true\")}\n          color={\"blue\"}\n          name={\"bestRated\"}\n          icon={\"hand spock\"}\n          content={t(\"Best Rated\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"mostEmbraced\")}\n          onClick={() => setPredicate(\"mostEmbraced\", \"true\")}\n          color={\"blue\"}\n          name={\"mostEmbraced\"}\n          icon={\"winner\"}\n          content={t(\"Most Embraced\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"iEmbraced\")}\n          onClick={() => setPredicate(\"iEmbraced\", \"true\")}\n          color={\"blue\"}\n          name={\"username\"}\n          icon={\"heart\"}\n          content={t(\"I Embraced\")}\n          style={styles}\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          content={t(\"By people I follow\")}\n          icon={\"users\"}\n          style={styles}\n        />\n \n        <Divider horizontal content={t('champs at the moment')} />\n        <Menu.Item\n          style={styles}\n          content={t('Most Embraced')}\n          onClick={() => handleOpenChamps('Most Embraced')}\n        />\n\n        <Menu.Item\n          style={styles}\n          content={t('Highest Rated')}\n          onClick={() => handleOpenChamps('Highest Rated')}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(GalleryFilters);\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchGallery = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.motofyStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchGallery;\n","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\"; //, useState\n// Input,\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n// import GalleryChamps from \"../modals/GalleryChamps\";\nimport SearchGallery from \"../modals/SearchGallery\";\n\nconst GalleryMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    predicate,\n    setPredicate,\n    // mostEmbraced, highestRatedMotofy\n  } = rootStore.motofyStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  // const handleOpenChamps = (info: string) => {\n  //   switch (info) {\n  //     case 'Most Embraced':\n  //       openModal(<GalleryChamps motofy={mostEmbraced} info={info}/>);\n  //       break;\n  //     default:\n  //       openModal(<GalleryChamps motofy={highestRatedMotofy} info={info}/>);\n  //       break;\n  //   }\n  // };\n\n  const handleSearch = () => {\n    openModal(<SearchGallery />);\n  };\n\n  return (\n    <Menu fluid widths={6}>\n      <Menu.Item\n        active={predicate.size === 0}\n        onClick={() => setPredicate(\"all\", \"true\")}\n        color={\"blue\"}\n        icon={\"home\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"bestRated\")}\n        onClick={() => setPredicate(\"bestRated\", \"true\")}\n        color={\"blue\"}\n        icon={\"hand spock\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"mostEmbraced\")}\n        onClick={() => setPredicate(\"mostEmbraced\", \"true\")}\n        color={\"blue\"}\n        icon={\"winner\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"iEmbraced\")}\n        onClick={() => setPredicate(\"iEmbraced\", \"true\")}\n        color={\"blue\"}\n        icon={\"heart\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"iFollow\")}\n        onClick={() => setPredicate(\"iFollow\", \"true\")}\n        color={\"blue\"}\n        icon={\"users\"}\n      />\n      <Menu.Item\n        onClick={() => handleSearch()}\n        color={\"blue\"}\n        icon={\"search\"}\n      />\n      {/* <Menu.Item\n          // style={styles}\n          icon={\"sun\"}\n          // content='Most Embraced'\n          onClick={() => handleOpenChamps('Most Embraced')}\n          />\n\n        <Menu.Item\n          // style={styles}\n          icon={\"moon\"}\n          // content='Highest Rated'\n          onClick={() => handleOpenChamps('Highest Rated')}\n        /> */}\n    </Menu>\n  );\n};\n\nexport default observer(GalleryMobileFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst GalleryListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid \n    //   style={{ marginTop: 50 }}\n      >\n        <Segment.Group>\n          <Segment \n          style={{ minHeight: 110 }}\n          >\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default GalleryListItemPlaceholder;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Loader,\nimport GalleryList from \"./GalleryList\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport GalleryFilters from \"./GalleryFilters\";\nimport GalleryMobileFilters from \"./GalleryMobileFilters\";\nimport GalleryListItemPlaceholder from \"./GalleryListItemPlaceholder\";\n\nconst GalleryDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadMotofies, loadingInitial, setPage, page, totalPages } =\n    rootStore.motofyStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMotofies().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMotofies();\n  }, [loadMotofies]);\n\n  return (\n    <Grid>\n\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n\n        <GalleryMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <GalleryListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <GalleryList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n    \n      \n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n           <GalleryFilters />\n        </Sticky>\n      </Grid.Column>\n\n      <Grid.Column computer={11} mobile={16}>\n      <Loader active={loadingNext}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GalleryDashboard);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Item,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IMechanic } from \"../../../app/models/mechanic\";\n\nconst mechanicImageStyle = {\n  filter: \"brightness(95%) contrast(70%) drop-shadow(1px 1px 1px teal)\",\n};\n\nconst testPositionStyles = {\n  textAlign: 'center'\n}\n\nconst MechanicListItem: React.FC<{ mechanic: IMechanic }> = ({ mechanic }) => {\n  const { t } = useTranslation([\"mechanics\"]);\n  return (\n    <Segment.Group raised>\n      <Segment raised>\n        <Header as='h1' floated='right' style={{color: 'rgb(58,\t98,\t139)'}}>\n          {mechanic.name}\n        </Header>\n        <Divider clearing />\n        <Item>\n          <Item.Group>\n            <Grid>\n              <Grid.Column width={5}>\n                <Item>\n                  <Item.Image\n                    style={mechanicImageStyle}\n                    size='small'\n                    rounded\n                    src={mechanic.photoUrl}\n                  />\n                </Item>\n              </Grid.Column>\n              <Divider vertical />\n              <Grid.Column width={6}>\n                <Item style={testPositionStyles}>\n                  <Item.Content>\n                    <Item.Header as='h2'>{t(\"Customers\")}</Item.Header>\n                   { mechanic.ratings !== undefined &&<Item.Extra as='h1'>{mechanic.ratings.length}</Item.Extra>}\n                  </Item.Content>\n                </Item>\n              </Grid.Column>\n              <Divider vertical />\n              <Grid.Column width={5}>\n                <Item style={testPositionStyles}>\n                  <Item.Content>\n                    <Item.Header as='h2'>{t(\"Rating\")}</Item.Header>\n                    {mechanic.averageRating !== undefined && <Item.Extra as='h1'>\n                      {mechanic.averageRating}\n                    </Item.Extra>}\n                  </Item.Content>\n                </Item>\n              </Grid.Column>\n            </Grid>\n          </Item.Group>\n        </Item>\n      </Segment>\n      <Segment>\n        <Grid>\n          <Grid.Column width={5}>\n            <Icon name='history' /> {t(\"In business since\")} {mechanic.yearOfStart}\n          </Grid.Column>\n          <Grid.Column width={6} style={testPositionStyles}>\n            <Icon name='envelope outline' /> {mechanic.city},{\" \"}\n            {mechanic.countryName}, {mechanic.address}\n          </Grid.Column>\n          <Grid.Column width={5} style={testPositionStyles}>\n            <Icon name='mail' /> {mechanic.email || 'email N/A'}\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment clearing>\n        <Button\n          as={Link}\n          to={`/mechanics/${mechanic.id}`}\n          fluid\n          content={t('View')}\n          color='instagram'\n        ></Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default MechanicListItem;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Item } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport MechanicListItem from './MechanicListItem';\n\nconst MechanicList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { mechanicsByDate } = rootStore.mechanicStore;\n\n  return (\n      <Item.Group divided>\n        {mechanicsByDate.map((mechanic) => (\n          <MechanicListItem mechanic={mechanic} key={mechanic.id} />\n        ))}\n      </Item.Group>\n  );\n};\n\nexport default observer(MechanicList);\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Menu, Dropdown, Input, Divider } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\nconst MechanicFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.mechanicStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const { t } = useTranslation([\"mechanics\"]);\n\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\n  const styles = {\n    textAlign: \"center\"\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n\n        <Menu.Item>\n          <Dropdown\n            placeholder={t('Search by country')}\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"arrows alternate\"}\n          content={t(\"All\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"isCustomer\")}\n          onClick={() => setPredicate(\"isCustomer\", \"true\")}\n          color={\"blue\"}\n          name={\"isCustomer\"}\n          icon={\"info\"}\n          content={t(\"My Shops (customer)\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"mostRecommended\")}\n          onClick={() => setPredicate(\"mostRecommended\", \"true\")}\n          color={\"blue\"}\n          name={\"mostRecommended\"}\n          icon={\"heart outline\"}\n          content={t(\"Most Recommended\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"bestRated\")}\n          onClick={() => setPredicate(\"bestRated\", \"true\")}\n          color={\"blue\"}\n          name={\"bestRated\"}\n          icon={\"heart\"}\n          content={t(\"Best Rated\")}\n          style={ styles }\n        />\n\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          content={t(\"By people I follow\")}\n          style={ styles }\n          icon={\"users\"}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(MechanicFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst MechanicListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default MechanicListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchMechanic = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.mechanicStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder='Search all...'\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchMechanic;\n","import React, { useContext, useEffect } from \"react\";\nimport {  Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchMechanicByCountry = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.forumPostStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n  const { closeModal } = rootStore.modalStore;\n\n  //!!NOT Working\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\nconst handleOnChange = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n           <Dropdown\n            placeholder='Filter by country'\n            selection\n            fluid\n            search\n            options={countries}\n            onChange={handleOnChange}\n            clearable\n          />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchMechanicByCountry;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport SearchMechanic from \"../modals/SearchMechanic\";\nimport SearchMechanicByCountry from \"../modals/SearchMechanicByCountry\";\n\nconst MechanicMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.mechanicStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const handleSearch = () => {\n    openModal(<SearchMechanic />);\n  };\n  const handleSearchByCountry = () => {\n    setPredicate(\"all\", \"true\");\n    openModal(<SearchMechanicByCountry />);\n  };\n\n  return (\n    <Menu fluid widths={7} style={{ top: \"200px\" }}>\n      <Menu.Item\n        active={predicate.size === 0}\n        onClick={() => setPredicate(\"all\", \"true\")}\n        color={\"blue\"}\n        icon={\"home\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"isCustomer\")}\n        onClick={() => setPredicate(\"isCustomer\", \"true\")}\n        color={\"blue\"}\n        icon={\"users\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"mostRecommended\")}\n        onClick={() => setPredicate(\"mostRecommended\", \"true\")}\n        color={\"blue\"}\n        icon={\"winner\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"bestRated\")}\n        onClick={() => setPredicate(\"bestRated\", \"true\")}\n        color={\"blue\"}\n        icon={\"chess king\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"iFollow\")}\n        onClick={() => setPredicate(\"iFollow\", \"true\")}\n        color={\"blue\"}\n        icon={\"eye\"}\n      />\n      <Menu.Item\n        onClick={() => handleSearchByCountry()}\n        color={\"blue\"}\n        icon={\"tags\"}\n      />\n      <Menu.Item\n        onClick={() => handleSearch()}\n        color={\"blue\"}\n        icon={\"search\"}\n      />\n    </Menu>\n  );\n};\n\nexport default observer(MechanicMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Rail,\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport MechanicList from \"./MechanicList\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport MechanicFilters from \"./MechanicFilters\";\nimport MechanicListItemPlaceholder from \"./MechanicListItemPlaceholder\";\nimport MechanicMobileFilters from \"./MechanicMobileFilters\";\n\nconst MechanicDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadMechanics, loadingInitial, setPage, page, totalPages } =\n    rootStore.mechanicStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMechanics().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMechanics();\n  }, [loadMechanics]);\n\n  return (\n    <Grid>\n      <Grid.Column mobile={16} tablet={16} className='mobile only'>\n        <MechanicMobileFilters />\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        {loadingInitial && page === 0 ? (\n          <MechanicListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <MechanicList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n      <Grid.Column width={5} className='mobile hidden'>\n        <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n          <MechanicFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column computer={11} mobile={16}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDashboard);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content,\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Link } from 'react-router-dom';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport { observer } from 'mobx-react-lite';\nimport { formatDistance } from 'date-fns';\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createHubConnection,\n    stopHubConnection,\n    addComment,\n    activity,\n  } = rootStore.activityStore;\n\n  const { t } = useTranslation([\"comments\"]);\n\n\n  useEffect(() => {\n    createHubConnection(activity!.id);\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, activity]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>{t(\"Comment This Diary\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{maxWidth:'none'}}>\n          {activity &&\n            activity.comments &&\n            activity.comments.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                  <div>\n                      {formatDistance(\n                        new Date(comment.createdAt),\n                        new Date()\n                      )}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field \n                name='body'\n                component={TextAreaInput}\n                rows={2}\n                placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  fluid\n                  color='instagram'\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailedChat);\n","import React, { Fragment, useContext } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activityId: string;\n}\nconst ConfirmDeactivate: React.FC<IProps> = ({ activityId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deactivateActivity } = rootStore.activityStore;\n  const {\n    addFeedItem,\n  } = rootStore.feedStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeactivateActivity = (id: string) => {\n    deactivateActivity(id)\n      .then(() => addFeedItem(id, \"Deactivated Motocycle Diary\"))\n      .then(() => closeModal())\n      .finally(() => history.push(`/activities`));\n  };\n\n  const cancelDeactivateActivity = () => {\n    closeModal();\n  };\n\n  let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeactivateActivity(activityId)}\n            color='teal'\n            content={t('Yes, I finished my trip!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeactivateActivity()}\n            content={t('No, keep it active')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDeactivate;\n","import React, { Fragment, useContext } from \"react\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activityId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ activityId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteActivity } = rootStore.activityStore;\n\n  const { closeModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteActivity = (id: string) => {\n    deleteActivity(id)\n    //   .then(() => addFeedItem(id, \"Deactivated Motocycle Diary\"))\n      .then(() => closeModal());\n    //   .finally(() => history.push(`/activities`));\n  };\n\n  const cancelDeleteActivity = () => {\n    closeModal();\n  };\n\n  // let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this? You cannot go back...')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteActivity(activityId)}\n            color='teal'\n            content={t('Yes, delete it')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteActivity()}\n            content={t(\"No, don't delete\")}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  Button,\n  // Grid,\n  // GridColumn,\n} from \"semantic-ui-react\"; \nimport { IActivity } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport ConfirmDeactivate from \"../modals/ConfirmDeactivate\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ActivityDetailedManager: React.FC<{ activity: IActivity }> = ({activity}) => {\n\n  const rootStore = useContext(RootStoreContext);\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const { openModal } = rootStore.modalStore;\n\n  const handleCompleteActivity = (id: string) => {\n    openModal(<ConfirmDeactivate activityId={id} />);\n    setManaging(false);\n  };\n  const handleDeleteActivity = (id: string) => {\n    openModal(<ConfirmDelete activityId={id} />);\n    setManaging(false);\n  };\n  const handleCancelAttendance = (id: string) => {\n    cancelAttendance();\n    addFeedItem(id, \"Left Motorcycle Diary\");\n    setManaging(false);\n  };\n  const handleAttendActivity = (id: string) => {\n    attendActivity();\n    addFeedItem(id, \"Joined Motorcycle Diary\");\n    setManaging(false);\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n  return (\n    <Segment.Group raised>\n      {/* {activity.isActive && ( */}\n        <Segment clearing attached='bottom'>\n          {activity.isHost ? (\n            <Fragment>\n              {!managing ? (\n                <Button onClick={toggleManaging} color='instagram' fluid>\n                  {t(\"Manage your diary\")}\n                </Button>\n              ) : (\n                <div className='ui five buttons'>\n                 \n                      <Button\n                        as={Link}\n                        to={`/createDiaryEntry/${activity.id}`}\n                        color='yellow'\n                        basic\n                      >\n                       {t(\"New Day\")}\n                      </Button>\n                   \n                      <Button\n                        as={Link}\n                        to={`/manage/${activity.id}`}\n                        color='pink'\n                        basic\n                      >\n                        {t(\"Edit\")}\n                      </Button>\n                  \n                      <Button\n                        onClick={() => {\n                          handleDeleteActivity(activity.id!);\n                        }}\n                        color='google plus'\n                      >\n                        {t(\"Delete\")}\n                      </Button>\n\n                      <Button\n                        onClick={() => {\n                          handleCompleteActivity(activity.id!);\n                        }}\n                        color='vk'\n                      >\n                        {t(\"Complete\")}\n                      </Button>\n  \n                      <Button\n                        onClick={() => {\n                          setManaging(false);\n                        }}\n                      >\n                        {t(\"Cancel\")}\n                      </Button>\n                   \n                </div>\n              )}\n            </Fragment>\n          ) : activity.isGoing \n          ? (\n            <Button\n              loading={loading}\n              onClick={() => handleCancelAttendance(activity.id)}\n            >\n              {t(\"Stop following this diary\")}\n            </Button>\n          ) : (\n            <Button\n              loading={loading}\n              onClick={() => handleAttendActivity(activity.id)}\n              color='teal'\n            >\n              {t(\"Become a part of it\")}\n            </Button>\n          )}\n        </Segment>\n      {/* )} */}\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityDetailedManager);\n","import React from \"react\";\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityDetailedInfo: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const { t } = useTranslation([\"diaries\"]);\n\n  return (\n    <Segment.Group raised>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='pencil alternate' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p style={{ whiteSpace: \"pre-wrap\" }}>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            \n            {t(\"Started in:\")}\n            <span>\n              {activity.city}, {activity.departure}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='map pin' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"Going to:\")} <span>{activity.destination}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='globe' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"In country:\")}\n            <span>{activity.countryName}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='gem outline' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"In category:\")}\n            <span>{activity.category}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='motorcycle' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            {t(\"You are driving:\")}\n            <span>{activity.motorcycleBrandName}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityDetailedInfo;\n","import { formatDistance } from \"date-fns\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Grid,\n  GridColumn,\n  Header,\n  Image,\n  Label,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IActivity, IDiaryEntry } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  diary: IDiaryEntry;\n  activity: IActivity;\n}\nconst SeeDiaryEntry: React.FC<IProps> = ({ diary, activity }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { closeModal } = rootStore.modalStore;\n  const { deleteDiaryEntry } = rootStore.activityStore;\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n\n  const { diaryEntries } = activity;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const [actualDiary, setActualDiary] = useState(diary);\n\n  const counter = parseInt(actualDiary.dayNumber);\n  const numberDiaries = activity.diaryEntries.length;\n\n  const handleChange = async (diaryDay: number) => {\n    var diary: IDiaryEntry = diaryEntries.find(\n      (diary) => parseInt(diary.dayNumber) === diaryDay\n    )!;\n    setActualDiary(diary);\n  };\n\n  const handleDeleteEntry = async (id: string) => {\n    deleteDiaryEntry(diary, activity);\n  };\n\n  return (\n    <Fragment>\n      <Container text>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          <Grid>\n            <Grid.Column width={3}>\n              <Image src={host.image} size='tiny' circular />\n              <p>{t(\"You are driving:\")} {activity.motorcycleBrandName}</p>\n            </Grid.Column>\n            <Grid.Column width={10}>\n              <Header as='h2' color='pink'>\n                {t(\"Day\")} {actualDiary.dayNumber} {t(\"of\")} {activity.title}\n              </Header>\n              <p>\n                {\" \"}\n                {t(\"Published\")}{\" \"}\n                {formatDistance(new Date(actualDiary.entryDate), new Date(), {\n                  addSuffix: true,\n                })}\n              </p>\n              <Header.Subheader color='pink'>\n                <Link\n                  to={`/profile/${host.username}`}\n                  onClick={() => closeModal()}\n                >\n                  {t(\"by\")} {host.displayName}\n                </Link>\n                <p>\n                  {\" \"}\n                  {t(\"Started in\")} {activity.city}, {activity.countryName}\n                </p>\n                <p>\n                  {\" \"}\n                  {t(\"At the moment in\")} {actualDiary.locationCity},{\" \"}\n                  {actualDiary.locationCountry}\n                </p>\n              </Header.Subheader>\n            </Grid.Column>\n            <Grid.Column width={3} style={{ color: \"red\" }}>\n              <Grid.Row>\n                <Image\n                  src={activity.motorcycleBrandLogoUrl}\n                  size='tiny'\n                  circular\n                />\n              </Grid.Row>\n              {activity.isHost && (\n                <Grid.Row>\n                  <GridColumn width={8}>\n                    <Button\n                      circular\n                      icon='edit outline'\n                      as={Link}\n                      to={`/manageDiaryEntry/${actualDiary.id}/${activity.id}`}\n                      onClick={() => closeModal()}\n                    />\n                  </GridColumn>\n                  <GridColumn width={8}>\n                    {Number(actualDiary.dayNumber) === numberDiaries && (\n                      <Button\n                        circular\n                        icon='delete'\n                        onClick={() => {\n                          handleDeleteEntry(actualDiary.id);\n                          closeModal();\n                        }}\n                      />\n                    )}\n                  </GridColumn>\n                </Grid.Row>\n              )}\n            </Grid.Column>\n          </Grid>\n        </Segment>\n        <Segment>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column computer={9} mobile={16}>\n                <Image src={actualDiary.photoUrl} size='large' floated='left' />\n              </Grid.Column>\n              <Grid.Column computer={7} mobile={16}>\n                <Segment attached>\n                  <p>{t(\"At the moment in\")} {actualDiary.locationCity}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Feeling\")} {actualDiary.mood}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Road was\")} {actualDiary.road}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Weather was\")} {actualDiary.road}</p>\n                </Segment>\n                <Segment attached>\n                  <p>{t(\"Made\")} {actualDiary.numberOfKilometers} {t(\"kilometers\")} </p>\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Segment attached>\n                <Label content={t(\"What happened today?\")}/>\n                <p style={{ whiteSpace: \"pre-wrap\" }}>{actualDiary.body}</p>\n              </Segment>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column width={5}>\n                <Button\n                  className='mobile hidden'\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) - 1)\n                  }\n                  content={t('Previous day')}\n                  icon='angle left'\n                  disabled={counter === 1}\n                />\n                <Button\n                  className='mobile only'\n                  circular\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) - 1)\n                  }\n                  icon='angle left'\n                  disabled={counter === 1}\n                />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <Button fluid onClick={() => closeModal()} content={t('Quit')} />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <Button\n                  className='mobile hidden'\n                  fluid\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) + 1)\n                  }\n                  content={t(\"Next day\")}\n                  icon='angle right'\n                  disabled={counter === numberDiaries}\n                />\n                <Button\n                  className='mobile only'\n                  fluid\n                  circular\n                  onClick={() =>\n                    handleChange(parseInt(actualDiary.dayNumber) + 1)\n                  }\n                  icon='angle right'\n                  disabled={counter === numberDiaries}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default SeeDiaryEntry;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport {\n  Segment,\n  List,\n  Item,\n  Divider,\n  SegmentGroup,\n} from \"semantic-ui-react\";\nimport { IActivity, IDiaryEntry } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SeeDiaryEntry from \"../modals/SeeDiaryEntry\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  activity: IActivity;\n}\nconst ActivityDetailedSidebarRight: React.FC<IProps> = ({ activity }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  const { diaryEntries } = activity;\n\n  const handleOpenDiaryModal = (diary: IDiaryEntry) => {\n    openModal(<SeeDiaryEntry diary={diary} activity={activity} />);\n  };\n  //mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()`\n  // to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())`\n  //to sort & update in place\n  const diariesByDate = diaryEntries\n    .slice()\n    .sort((a, b) => parseInt(b.dayNumber) - parseInt(a.dayNumber));\n\n    const day = t(\"Day\");\n    const days = t(\"Days\");\n\n  return (\n    <SegmentGroup raised>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {diaryEntries.length} {diaryEntries.length === 1 ? day : days}{\" \"}\n        {t(\"passed\")}\n      </Segment>\n      <Segment attached textAlign='center'>\n        <List relaxed divided>\n          {diariesByDate.map((entry) => (\n            <div key={entry.id}>\n              <Item\n                as='h4'\n                onClick={() => handleOpenDiaryModal(entry)}\n                style={{ cursor: \"pointer\" }}\n              >\n                {t(\"Day number \")}\n                {entry.dayNumber}\n                {/* <Image\n                  size='small'\n                  src={entry.photoUrl || \"/assets/user.png\"}\n                /> */}\n                <div className='ui segment'>\n                  <img\n                    className='ui centered medium image'\n                    src={entry.photoUrl || \"/assets/user.png\"}\n                    alt='DayPhoto'\n                  />\n                </div>\n              </Item>\n              <Divider horizontal />\n            </div>\n          ))}\n        </List>\n      </Segment>\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityDetailedSidebarRight);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\"; // , { Fragment, useContext }\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header } from \"semantic-ui-react\"; //, Image\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const host = activity.attendees.filter((h) => h.isHost)[0];\n  const { t } = useTranslation([\"diaries\"]);\n\n  return (\n    <Segment style={{ padding: \"0\" }} raised>\n      <Segment textAlign='center'>\n        <Header as='h2'>\n          {activity.title}\n          <Header.Subheader>\n            <span>\n              {t(\"Hosted by\")}{\" \"}\n              <Link to={`/profile/${host.username}`}>\n                <strong>{host.displayName}</strong>\n              </Link>\n            </span>\n            <span>\n              {\", \"} on {format(activity.date, \"eeee do MMMM\")}{\" \"}\n            </span>\n          </Header.Subheader>\n        </Header>\n      </Segment>\n    </Segment>\n  );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  List,\n  Image,\n} from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\n// import { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst AllAttendeesList: React.FC<IProps> = ({ attendees }) => {\n  // const rootStore = useContext(RootStoreContext);\n\n  // const { closeModal } = rootStore.modalStore;\n\n  return (\n\n        <List animated relaxed verticalAlign='middle' >\n          {attendees.map((attendee) => (\n            <List.Item key={attendee.username} style={{ position: \"relative\" }}>\n       \n              \n              <Image avatar size='mini' src={attendee.image || \"/assets/user.png\"} />\n\n              <List.Content verticalAlign='middle'>\n                <List.Header as='h4'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </List.Header>\n                {attendee.following && (\n                  <List.Description style={{ color: \"green\" }}>Following</List.Description>\n                )}\n              </List.Content>\n            </List.Item>\n          ))}\n        </List>\n  );\n};\n\n\nexport default observer(AllAttendeesList);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  List,\n  Item,\n  Label,\n  Image,\n  SegmentGroup,\n} from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport AllAttendeesList from \"../modals/AllAttendeesList\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\nconst ActivityDetailedSidebarLeft: React.FC<IProps> = ({ attendees }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal, setSize } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n  const handleShowAll = () => {\n    setSize(\"mini\");\n    openModal(<AllAttendeesList attendees={attendees} />);\n  };\n\n  const person = t(\"Person\");\n  const persons = t(\"People\");\n  return (\n    <SegmentGroup raised>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {attendees.length} {attendees.length === 1 ? person : persons }{\" \"}\n        {t(\"following\")}\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.slice(0, 10).map((attendee) => (\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\n              {attendee.isHost && (\n                <Label\n                  style={{ position: \"absolute\" }}\n                  color='teal'\n                  corner='right'\n                >\n                  {t(\"Host\")}\n                </Label>\n              )}\n\n              <Image size='mini' src={attendee.image || \"/assets/user.png\"} />\n\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h4'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && (\n                  <Item.Extra style={{ color: \"green\" }}>{t(\"Following\")}</Item.Extra>\n                )}\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n        {attendees.length > 10 && (\n          <span style={{ cursor: \"pointer\" }} onClick={handleShowAll}>\n            {t(\"and\")} {attendees.length - 10} {t(\"more\")}\n          </span>\n        )}\n      </Segment>\n    </SegmentGroup>\n  );\n};\n\nexport default observer(ActivityDetailedSidebarLeft);\n","import { observer } from \"mobx-react-lite\";\nimport React, {useContext, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedManager from \"./ActivityDetailedManager\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebarRight \nfrom \"./ActivityDetailedSidebarRight\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedSidebarLeft \nfrom \"./ActivityDetailedSidebarLeft\";\nimport { useTranslation } from \"react-i18next\";\n\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadActivity, activity, loadingInitial} = rootStore.activityStore;\n\n  const { t } = useTranslation([\"diaries\"]);\n\n\n  useEffect(() => {\n    loadActivity(match.params.id);\n  }, [loadActivity, match.params.id, history]);\n\n  if (loadingInitial || !activity ) return <LoadingComponent content={t('Loading activity...')} />;\n\n\n  return (\n    <Grid>\n      <Grid.Column computer={3} mobile={16} className={'mobile hidden'}>\n      <ActivityDetailedSidebarLeft attendees={activity!.attendees} />\n      </Grid.Column>\n      <Grid.Column computer={10} mobile={16}>\n \n          <ActivityDetailedHeader activity={activity!} />\n          <ActivityDetailedInfo activity={activity!} />\n          <ActivityDetailedManager activity={activity!} />\n          <ActivityDetailedChat />\n\n      </Grid.Column>\n      <Grid.Column computer={3} mobile={16} className={'hideScroll'} >\n          <ActivityDetailedSidebarRight activity={activity!} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form, Grid, Header } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  hasLengthLessThan,\n  isRequired,\n} from \"revalidate\";\n\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst validate = combineValidators({\n  content: composeValidators(\n    isRequired(\"Body\"),\n    hasLengthGreaterThan(1)({\n      message: \"Body needs to be at least 2 characters\",\n    }),\n    hasLengthLessThan(255)({\n      message: \"Maximum number of characters is 500\",\n    })\n  )(),\n});\n\ninterface IProps {\n  recipientUsername: string;\n  username: string;\n}\n\nconst ContactForm: React.FC<IProps> = ({ recipientUsername, username }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { sendMessage } = rootStore.privateMessageStore;\n  const { closeModal } = rootStore.modalStore;\n\n  const [loading] = useState(false);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let messageToSend = {\n      recipientUsername: recipientUsername,\n      username: username,\n      content: values.content,\n    };\n    sendMessage(messageToSend);\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <FinalForm\n          validate={validate}\n          onSubmit={handleFinalFormSubmit}\n          render={({ handleSubmit, invalid, pristine }) => (\n            <Form onSubmit={handleSubmit} loading={loading}>\n              <Header\n                as='h2'\n                content='Send message'\n                color='teal'\n                textAlign='center'\n              />\n              <Field\n                name='content'\n                rows={4}\n                placeholder='content'\n                component={TextAreaInput}\n              />\n              <Button\n                disabled={invalid || pristine}\n                floated='right'\n                color='teal'\n                type='submit'\n                content='submit'\n              />\n              <Button\n                floated='right'\n                disabled={loading}\n                type='button'\n                content='cancel'\n                onClick={() => closeModal()}\n              />\n            </Form>\n          )}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ContactForm);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    productId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ productId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteProduct } = rootStore.productStore;\n  const { closeModal } = rootStore.modalStore;\n\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteProduct = (id: string) => {\n    deleteProduct(id);\n    closeModal();\n    history.push('/shop');\n  };\n\n  const cancelDeleteProduct = () => {\n    closeModal();\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteProduct(productId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteProduct()}\n            content={t('No, cancel')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Grid, Icon, Image, Button, Label } from \"semantic-ui-react\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ContactForm from \"../../profiles/forms/ContactForm\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst ProductDetailedInfo: React.FC<{ product: IProduct }> = ({ product }) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n  const {\n    followProduct,\n    productFollowed,\n    unfollowProduct,\n    setProductFollowed,\n    markSold,\n  } = rootStore.productStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { user } = rootStore.userStore;\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    product.viewers.forEach((viewer) => {\n      if (viewer.username === user?.userName) {\n        setProductFollowed();\n      }\n    });\n  }, [\n    product.sellerUsername,\n    product.id,\n    setProductFollowed,\n    product.viewers,\n    user,\n  ]);\n\n  const handleDeleteProduct = (id: string) => {\n    openModal(<ConfirmDelete productId={id} />);\n  };\n  const handleFollowProduct = (id: string) => {\n    followProduct(id, user!.userName, user!.displayName);\n    addFeedItem(id, \"Added to favorites\");\n  };\n  const handleMarkSold = (id: string) => {\n    markSold(id, product);\n    addFeedItem(id, \"Marked Sold\");\n  };\n  const handleUnfollowProduct = (id: string) => {\n    unfollowProduct(id);\n    addFeedItem(id, \"Removed from favorites\");\n  };\n  const styles = { minWidth: \"10em\" };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Grid stackable columns={2}>\n      <Grid.Column width={8}>\n        <Segment raised>\n          <Grid>\n            <Grid.Column width={2}>\n              <Icon size='large' color='grey' name='info' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Title\")}{\" \"}\n              </Label>\n              {product.title}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='monero' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Price\")}{\" \"}\n              </Label>\n              {product.price} €\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='calendar' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Published\")}{\" \"}\n              </Label>\n              {formatDistance(new Date(product.datePublished), new Date(), {\n                addSuffix: true,\n              })}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='certificate' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Category\")}{\" \"}\n              </Label>\n              {product.category}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='copyright' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Brand\")}{\" \"}\n              </Label>\n              {product.brand}\n            </Grid.Column>\n          </Grid>\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={2}>\n              <Icon name='id badge outline' size='large' color='grey' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <Label style={styles} color='yellow' horizontal>\n                {t(\"Model\")}{\" \"}\n              </Label>\n              {product.model}\n            </Grid.Column>\n          </Grid>\n          {product.sellerUsername !== user?.userName && (\n            <>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='location arrow' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"City\")}{\" \"}\n                  </Label>\n                  {product.city}\n                </Grid.Column>\n              </Grid>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='map marker alternate' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"Country\")}{\" \"}\n                  </Label>\n                  {product.countryName}\n                </Grid.Column>\n              </Grid>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={2}>\n                  <Icon name='user' size='large' color='grey' />\n                </Grid.Column>\n                <Grid.Column width={14}>\n                  <Label style={styles} color='yellow' horizontal>\n                    {t(\"Seller\")}{\" \"}\n                  </Label>\n                  <Link to={`/profile/${product.sellerUsername}`}>\n                    {\" \"}\n                    {product.sellerDisplayName}\n                  </Link>\n                </Grid.Column>\n              </Grid>\n              {product.phoneNumber && (\n                <Grid verticalAlign='middle'>\n                  <Grid.Column width={2}>\n                    <Icon name='phone' size='large' color='grey' />\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                    <Label color='yellow' horizontal>\n                      {t(\"Contact number\")}{\" \"}\n                    </Label>\n                    {product.phoneNumber}\n                  </Grid.Column>\n                </Grid>\n              )}\n              {product.description && (\n                <Grid verticalAlign='middle'>\n                  <Grid.Column width={2}>\n                    <Icon name='info circle' size='large' color='grey' />\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                    <Label style={styles} color='yellow' horizontal>\n                      {t(\"Description\")}{\" \"}\n                    </Label>\n                    {product.description}\n                  </Grid.Column>\n                </Grid>\n              )}\n            </>\n          )}\n\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={16}>\n              {product.sellerUsername !== user?.userName ? (\n                <div className='ui two buttons'>\n                  <Button\n                    basic\n                    content={t(\"Contact the seller\")}\n                    color='blue'\n                    onClick={() => {\n                      openModal(\n                        <ContactForm\n                          recipientUsername={product.sellerUsername}\n                          username={user?.userName!}\n                        />\n                      );\n                    }}\n                  />\n                  <Button\n                    color='instagram'\n                    content={\n                      productFollowed === true\n                        ? t(\"Unfollow this product\")\n                        : t(\"Follow this product\")\n                    }\n                    onClick={() => {\n                      if (!productFollowed) {\n                        handleFollowProduct(product.id);\n                      } else {\n                        handleUnfollowProduct(product.id);\n                      }\n                    }}\n                  />\n                </div>\n              ) : (\n                <Fragment>\n                  {!managing ? (\n                    <Button onClick={toggleManaging} color='instagram' fluid>\n                      {t(\"Manage\")}\n                    </Button>\n                  ) : (\n                    <div className='ui four buttons'>\n                      <Button\n                        basic\n                        color='olive'\n                        content={t(\"Mark sold\")}\n                        disabled={product.isSold}\n                        onClick={() => handleMarkSold(product.id!)}\n                      />\n                        <Button\n                        as={Link}\n                        to={`/manageProduct/${product.id}`}\n                        color='pink'\n                        basic\n                      >\n                        {t(\"Edit\")}\n                      </Button>\n\n                      <Button\n                        onClick={() => {\n                          handleDeleteProduct(product.id!);\n                        }}\n                        color='red'\n                      >\n                        {t(\"Delete\")}\n                      </Button>\n\n                    \n                      <Button\n                        onClick={() => {\n                          setManaging(false);\n                        }}\n                      >\n                        {t(\"Cancel\")}\n                      </Button>\n                    </div>\n                  )}\n                </Fragment>\n              )}\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </Grid.Column>\n\n      <Grid.Column width={8}>\n        <Segment raised>\n          {product.isSold && (\n            <Label style={{ position: \"absolute\" }} color='red' corner='right'>\n              SOLD\n            </Label>\n          )}\n          <Image src={product.photoUrl} fluid />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductDetailedInfo);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ProductDetailsStatistics: React.FC<{ product: IProduct }> = ({\n  product,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n\n    loadingInitial,\n    visitCounter,\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    visitCounter(product.id);\n  }, [product, visitCounter]);\n\n  if (loadingInitial || !product)\n    return <LoadingComponent content={t('Loading product details...')} />;\n\n  return (\n    <Segment raised>\n      <Header as='h2' icon textAlign='center'>\n        <Icon name='shopping basket' circular />\n        <Header.Content>{product.title}</Header.Content>\n        <Header sub>\n          {t(\"The\")} {product.title} {t(\"is published\")}{\" \"}\n          {formatDistance(new Date(product.datePublished), new Date(), {\n            addSuffix: true,\n          })}\n          , {t(\"seen\")} {product.numberSeen} {t(\"times and expires\")} {\" \"} \n          {formatDistance(new Date(product.inactivityExpirationDate), new Date(), {\n            addSuffix: true,\n          })}\n           \n        </Header>\n\n        <Header.Subheader>\n          {product.numberFollowed !== 0 &&\n            t(\"The\") +\n              product.title +\n              t(\"is in favorites of\") +\n              (product.numberFollowed > 1\n                ? product.numberFollowed + t(\"people\")\n                : product.numberFollowed + t(\"person\"))}\n        </Header.Subheader>\n      </Header>\n    </Segment>\n  );\n};\n\nexport default observer(ProductDetailsStatistics);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductDetailedInfo from \"./ProductDetailedInfo\";\nimport ProductDetailsStatistics from \"./ProductDetailsStatistics\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ProductDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    product,\n    loadProduct,\n    loadingInitial,\n    visitCounter\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    loadProduct(match.params.id); \n    visitCounter(match.params.id);\n  }, [loadProduct, match.params.id, visitCounter]); \n\n  if (loadingInitial || !product )\n    return <LoadingComponent content={t('Loading product details...')} />;\n\n  return (\n    <Grid>\n      <Grid.Row>\n          <Grid.Column width={16}>\n         \n          <ProductDetailsStatistics product={product}/>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n\n      <Grid.Column width={16}>\n        <ProductDetailedInfo product={product} />\n      </Grid.Column>\n      </Grid.Row>\n      \n      \n    </Grid>\n  );\n};\n\nexport default observer(ProductDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to the main page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../stores/rootStore';\n\nconst ModalContainer = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {modal: {open, body, size}, closeModal } = rootStore.modalStore;\n  return (\n    <Modal open={open} onClose={closeModal} size={size}>\n      <Modal.Content>{body}</Modal.Content>\n     \n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useTranslation } from 'react-i18next';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface IProps {\n  setFiles: (files: object[]) => void;\n}\n\nconst dropZoneStyles = {\n  border: 'dashed 3px',\n  borderColor: '#eee',\n  borderRadius: '5px',\n  paddingTop: '30px',\n  textAlign: 'center' as 'center',\n  height: '200px',\n};\n\nconst dropZoneActive = {\n  borderColor: 'green',\n};\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    setFiles(\n      acceptedFiles.map((file: any) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n    );\n  }, [setFiles]);\n  const { t } = useTranslation([\"widget\"]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style={\n        isDragActive ? { ...dropZoneStyles, ...dropZoneActive } : dropZoneStyles\n      }\n    >\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge'/>\n      <Header content={t('Drop image here or click to select file')}/>\n    </div>\n  );\n};\n\nexport default PhotoWidgetDropzone;\n","import React, { useRef } from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n  setImage: (file: Blob) => void;\n  imagePreview: string;\n}\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\n  const cropper = useRef<Cropper>(null);\n\n  const cropImage = () => {\n    if (\n      cropper.current &&\n      typeof cropper.current.getCroppedCanvas() === 'undefined'\n    ) {\n      return;\n    }\n    cropper &&\n      cropper.current &&\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n        setImage(blob);\n      }, 'image/jpeg');\n  };\n  return (\n    <Cropper\n      ref={cropper}\n      src={imagePreview}\n      style={{ height: 200, width: '100%' }}\n      // Cropper.js options\n      initialAspectRatio={1 / 1}\n      preview='.img-preview'\n      guides={false}\n      viewMode={1}\n      dragMode='move'\n      scalable={true}\n      cropBoxMovable={true}\n      cropBoxResizable={true}\n      crop={cropImage}\n      //   ref={cropperRef}\n    />\n  );\n};\n\nexport default PhotoWidgetCropper;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { Header, Grid, Button } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\nimport { useTranslation } from \"react-i18next\";\n// import { RootStoreContext } from \"../../stores/rootStore\";\n\ninterface IProps {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n  const [files, setFiles] = useState<any[]>([]);\n  const [image, setImage] = useState<Blob | null>(null);\n\n  const { t } = useTranslation([\"widget\"]);\n\n\n  // == this is to clean up the uploaded file from memory ==\n  useEffect(() => {\n \n      return () => {\n        files.forEach((file) => URL.revokeObjectURL(file.preview));\n    };\n  });\n\n  return (\n    <Fragment>\n      <Grid>\n     \n\n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header color='teal' sub content={t('Step 1 - Add Photo')} />\n          <PhotoWidgetDropzone setFiles={setFiles} />\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header sub color='teal' content={t('Step 2 - Resize image')} />\n          {files.length > 0 && (\n            <PhotoWidgetCropper\n              setImage={setImage}\n              imagePreview={files[0].preview}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={1} />\n       \n        <Grid.Column \n        computer={4} mobile={16}\n        // width={4}\n        >\n          <Header sub color='teal' content={t('Step 3 - Preview & Upload')} />\n          {files.length > 0 && (\n            <Fragment>\n              <div\n                className='img-preview'\n                style={{ minHeight: '200px', overflow: 'hidden' }}\n              />\n              <Button.Group widths={2}>\n                <Button\n                  positive\n                  icon='check'\n                  loading={loading}\n                  onClick={() => uploadPhoto(image!)}\n                />\n                <Button \n                icon='close'\n                disabled={loading}\n                onClick={() => setFiles([])}\n                />\n              </Button.Group>\n            </Fragment>\n          )}\n        </Grid.Column>       \n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PhotoUploadWidget);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst ProfilePhotos = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    isCurrentUser,\n    uploadPhoto,\n    uploadingPhoto,\n    setMainPhoto,\n    loading,\n    deletePhoto,\n  } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\n  const [target, setTarget] = useState<string | undefined>(undefined);\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\n    undefined\n  );\n  const handleUplaodImage = (photo: Blob) => {\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\n  };\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n          <Header floated='left' icon='image' content={t('Photos')} />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={addPhotoMode ? t('Cancel') : t('Add Photo')}\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handleUplaodImage}\n              loading={uploadingPhoto}\n            />\n          ) : (\n            <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n              {profile &&\n                profile.photos.map((photo) => (\n                  <Card key={photo.id}>\n                    <Image src={photo.url} />\n                    {isCurrentUser && (\n                      <Button.Group fluid widths={2}>\n                        <Button\n                          name={photo.id}\n                          basic\n                          positive\n                          content={t('Main')}\n                          onClick={(e) => {\n                            setMainPhoto(photo);\n                            setTarget(e.currentTarget.name);\n                          }}\n                          disabled={photo.isMain}\n                          loading={loading && target === photo.id}\n                        />\n                        <Button\n                          name={photo.id}\n                          disabled={photo.isMain}\n                          onClick={(e) => {\n                            deletePhoto(photo);\n                            setDeleteTarget(e.currentTarget.name)\n                          }}\n                          loading={loading && deleteTarget === photo.id}\n                          basic\n                          negative\n                          icon='trash'\n                        />\n                      </Button.Group>\n                    )}\n                  </Card>\n                ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfilePhotos);\n","import React from 'react';\nimport { IProfile } from '../../app/models/profile';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { observer } from 'mobx-react-lite';\nimport { combineValidators, isRequired } from 'revalidate';\nimport { Form, Button } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport TextAreaInput from '../../app/common/form/TextAreaInput';\nimport { useTranslation } from 'react-i18next';\n\n\ninterface IProps {\n  updateProfile: (profile: Partial<IProfile>) => void;\n  profile: IProfile;\n}\n\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    displayName: isRequired({ message: t(\"Display Name is required\") })\n  });\n  \n  return (\n    <FinalForm\n      onSubmit={updateProfile}\n      validate={validate}\n      initialValues={profile!}\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder={t('Display Name')}\n            value={profile!.displayName}\n          />\n          <Field\n            name='bio'\n            component={TextAreaInput}\n            rows={3}\n            placeholder={t('Bio')}\n            value={profile!.bio}\n          />\n          <Button \n            loading={submitting}\n            floated='right'\n            disabled={invalid || pristine}\n            positive\n            content={t('Update profile')}\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default observer(ProfileEditForm);","import React, { useContext, useState } from 'react';\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileEditForm from './ProfileEditForm';\nimport { observer } from 'mobx-react-lite';\nimport { useTranslation } from 'react-i18next';\n\nconst ProfileDescription = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  const [editMode, setEditMode] = useState(false);\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={t(\"About\") + \" \" + profile!.displayName}\n          />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={editMode ? t('Cancel') : t('Edit Profile')}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\n          ) : (\n            <span>{profile!.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileDescription);","import React from 'react';\nimport { Card, Image, Icon} from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IProfile } from '../../app/models/profile';\nimport { useTranslation } from 'react-i18next';\n\ninterface IProps{\n    profile: IProfile\n}\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\n  const { t } = useTranslation([\"social\"]);\n\n  return (\n    <Card as={Link} to={`/profile/${profile.username}`}>\n      <Image src={profile.image || '/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName || 'display name'}</Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div>\n          <Icon name='user' />\n          {profile.followersCount} {t(\"Followers\")}\n        </div>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default ProfileCard;\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    followings,\n    loading,\n    activeTab\n  } = rootStore.profileStore;\n  const { t } = useTranslation([\"social\"]);\n\n  return (\n    <Tab.Pane loading={loading}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user circle'\n            content={\n              activeTab === 7\n                ? t(\"People following\") +' '+ profile!.displayName \n                : t(\"People\") + ' ' + profile!.displayName + \" \" + t(\"is following\")\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n              {followings.map((profile) => (\n                  <ProfileCard key={profile.username} profile={profile}/>\n              ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default ProfileFollowings;\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { useTranslation } from 'react-i18next';\n\n\nconst ProfileEvents = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserActivities,\n    profile,\n    loadingActivities,\n    userActivities\n  } = rootStore.profileStore!;\n\n  const { t } = useTranslation([\"social\"]);\n  const panes = [\n    { menuItem: t('Active'), pane: { key: 'active' } },\n    { menuItem: t('Completed'), pane: { key: 'completed' } },\n    { menuItem: t('In future'), pane: { key: 'in future' } },\n  ];\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 0:\n        predicate = 'active';\n        break;\n      case 1:\n        predicate = 'completed';\n        break;\n      case 2:\n        predicate = 'in future';\n        break;\n      default:\n        break;\n    }\n    loadUserActivities(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='blogger' content={t('Motorcycle Diaries')} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userActivities.map((activity: IUserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.id}`}\n                key={activity.id}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileEvents);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { IUserMotofy } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ProfileMotofies = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserMotofies, profile, loadingMotofies, userMotofies } =\n    rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n  const panes = [\n    { menuItem: t(\"Embraced\"), pane: { key: \"iEmbraced\" } },\n    { menuItem: t(\"Published\"), pane: { key: \"iPublished\" } },\n    { menuItem: t(\"Rated\"), pane: { key: \"iRated\" } },\n  ];\n\n  useEffect(() => {\n    loadUserMotofies(profile!.username);\n  }, [loadUserMotofies, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iPublished\";\n        break;\n      case 2:\n        predicate = \"iRated\";\n        break;\n      default:\n        predicate = \"iEmbraced\";\n        break;\n    }\n    loadUserMotofies(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingMotofies}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='motorcycle' content={\"Motofies\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userMotofies.map((motofy: IUserMotofy) => (\n              <Card as={Link} to={`/gallery/${motofy.id}`} key={motofy.id}>\n                <Image\n                  src={motofy.photoUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{motofy.name}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(motofy.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(motofy.yearOfProduction), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileMotofies);\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport {  IUserForumpost } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { useTranslation } from 'react-i18next';\n\n\nconst ProfileForumposts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserForumposts,\n    profile,\n    loadingForumposts,\n    userForumposts\n  } = rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t('Asked'), pane: { key: 'iAsked' } },\n    { menuItem: t('Rated'), pane: { key: 'iRated' } },\n  ];\n  useEffect(() => {\n    loadUserForumposts(profile!.username);\n  }, [loadUserForumposts, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'iRated';\n        break;\n      default:\n        predicate = 'iAsked';\n        break;\n    }\n    loadUserForumposts(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingForumposts}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='question circle' content={'Forumposts'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userForumposts.map((forumpost: IUserForumpost) => (\n              <Card\n                as={Link}\n                to={`/forum/${forumpost.id}`}\n                key={forumpost.id}\n              >\n                <Image\n                  src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{forumpost.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(forumpost.dateAdded), 'do LLL')}</div>\n                    <div>{format(new Date(forumpost.dateAdded), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileForumposts);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { IUserMechanic } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ProfileMechanics = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserMechanics, profile, loadingMechanics, userMechanics } =\n  rootStore.profileStore!;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t(\"Published\"), pane: { key: \"iPublished\" } },\n    { menuItem: t(\"Rated\"), pane: { key: \"iRated\" } },\n    { menuItem: t(\"Recommended\"), pane: { key: \"iRecommend\" } },\n  ];\n\n  useEffect(() => {\n    loadUserMechanics(profile!.username);\n  }, [loadUserMechanics, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    // let predicate = undefined ?? 'iEmbraced';\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iRated\";\n        break;\n      case 2:\n        predicate = \"iRecommend\";\n        break;\n      default:\n        predicate = \"iPublished\";\n        break;\n    }\n    loadUserMechanics(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingMechanics}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='servicestack' content={\"Mechanics\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userMechanics.map((mechanic: IUserMechanic) => (\n              <Card\n                as={Link}\n                to={`/mechanics/${mechanic.id}`}\n                key={mechanic.id}\n              >\n                <Image\n                  src={mechanic.photoUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{mechanic.name}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(mechanic.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(mechanic.datePublished), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileMechanics);\n","import React, { useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport {  IUserProduct } from \"../../app/models/profile\";\nimport { format } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst ProfileProducts = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUserProducts, profile, loadingProducts, userProducts } =\n  rootStore.profileStore!;\n  const { t } = useTranslation([\"social\"]);\n\n  const panes = [\n    { menuItem: t(\"I am selling\"), pane: { key: \"iAmSelling\" } },\n    { menuItem: t(\"I sold\"), pane: { key: \"iSold\" } },\n  ];\n  useEffect(() => {\n    loadUserProducts(profile!.username);\n  }, [loadUserProducts, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = \"iSold\";\n        break;\n      case 2:\n        predicate = \"iAmSelling\";\n        break;\n      default:\n       \n        break;\n    }\n    loadUserProducts(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingProducts}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='calendar' content={\"Products\"} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n            {userProducts.map((product: IUserProduct) => (\n              <Card\n                as={Link}\n                to={`/product/${product.id}`}\n                key={product.id}\n              >\n                <Image\n                  src={product.pictureUrl}\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{product.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>\n                      {format(new Date(product.datePublished), \"do LLL\")}\n                    </div>\n                    <div>\n                      {format(new Date(product.datePublished), \"h:mm a\")}\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileProducts);\n","import React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport ProfilePhotos from \"./ProfilePhotos\";\nimport ProfileDescription from \"./ProfileDescription\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileMotofies from \"./ProfileMotofies\";\nimport ProfileForumposts from \"./ProfileForumposts\";\nimport ProfileMechanics from \"./ProfileMechanics\";\nimport ProfileProducts from \"./ProfileProducts\";\nimport { useTranslation } from \"react-i18next\";\n\n// const panes = [\n//   { menuItem: \"About\", render: () => <ProfileDescription /> },\n//   { menuItem: \"Photos\", render: () => <ProfilePhotos /> },\n//   {\n//     menuItem: \"Motofies!\",\n//     render: () => <ProfileMotofies />,\n//   },\n//   {\n//     menuItem: \"Motorcycle Diaries\",\n//     render: () => <ProfileActivities />,\n//   },\n//   {\n//     menuItem: \"Forumposts\",\n//     render: () => <ProfileForumposts />,\n//   },\n//   {\n//     menuItem: \"Mechanics\",\n//     render: () => <ProfileMechanics />,\n//   },\n//   {\n//     menuItem: \"Products\",\n//     render: () => <ProfileProducts />,\n//   },\n//   {\n//     menuItem: \"Followers\",\n//     render: () => <ProfileFollowings />,\n//   },\n//   {\n//     menuItem: \"Followings\",\n//     render: () => <ProfileFollowings />,\n//   },\n// ];\nconst mobilePanes = [\n  {\n    menuItem: { key: \"About\", icon: \"user\" },\n    render: () => <ProfileDescription />,\n  },\n  {\n    menuItem: { key: \"Photos\", icon: \"image\" },\n    render: () => <ProfilePhotos />,\n  },\n  {\n    menuItem: { key: \"Motofies!\", icon: \"motorcycle\" },\n    render: () => <ProfileMotofies />,\n  },\n  {\n    menuItem: { key: \"Motorcycle Diaries\", icon: \"blogger\" },\n    render: () => <ProfileActivities />,\n  },\n  {\n    menuItem: { key: \"Forumposts\", icon: \"question circle\" },\n    render: () => <ProfileForumposts />,\n  },\n  {\n    menuItem: { key: \"Mechanics\", icon: \"servicestack\" },\n    render: () => <ProfileMechanics />,\n  },\n  {\n    menuItem: { key: \"Products\", icon: \"shopping bag\" },\n    render: () => <ProfileProducts />,\n  },\n  {\n    menuItem: { key: \"Followers\", icon: \"user circle\" },\n    render: () => <ProfileFollowings />,\n  },\n  {\n    menuItem: { key: \"Followings\", icon: \"users\" },\n    render: () => <ProfileFollowings />,\n  },\n];\n\ninterface IProps {\n  setActiveTab: (activeIndex: any) => void;\n}\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\n\n  const { t } = useTranslation([\"social\"]);\n\n\n  const panes = [\n    { menuItem: t(\"About\"), render: () => <ProfileDescription /> },\n    { menuItem: t(\"Photos\"), render: () => <ProfilePhotos /> },\n    {\n      menuItem: \"Motofies!\",\n      render: () => <ProfileMotofies />,\n    },\n    {\n      menuItem: t(\"Motorcycle Diaries\"),\n      render: () => <ProfileActivities />,\n    },\n    {\n      menuItem: t(\"Forumposts\"),\n      render: () => <ProfileForumposts />,\n    },\n    {\n      menuItem: t(\"Mechanics\"),\n      render: () => <ProfileMechanics />,\n    },\n    {\n      menuItem: t(\"Products\"),\n      render: () => <ProfileProducts />,\n    },\n    {\n      menuItem: t(\"Followers\"),\n      render: () => <ProfileFollowings />,\n    },\n    {\n      menuItem: t(\"Followings\"),\n      render: () => <ProfileFollowings />,\n    },\n  ];\n  return (\n    <>\n      <Tab\n        className='mobile hidden'\n        menu={{ fluid: true, vertical: true }}\n        menuPosition='right'\n        panes={panes}\n        onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n      />\n      {/* , style:{width: '0.9em' */}\n      <Tab\n        className='mobile only'\n        menu={{ fluid: true, style:{fontSize: '0.85em'} }}\n        panes={mobilePanes}\n        onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n      />\n    </>\n  );\n};\n// == so that the switching is disabled ==\n// activeIndex={1}\n\nexport default ProfileContent;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport {\n  Segment,\n  Item,\n  Header,\n  Button,\n  Grid,\n  Statistic,\n  Divider,\n  Reveal,\n} from \"semantic-ui-react\";\nimport { IProfile } from \"../../app/models/profile\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport ContactForm from \"./forms/ContactForm\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  profile: IProfile;\n  loading: boolean;\n  isCurrentUser: boolean;\n  follow: (username: string) => void;\n  unfollow: (username: string) => void;\n}\nconst ProfileHeader: React.FC<IProps> = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n\n  const handleSendMessage = () => {\n    openModal(\n      <ContactForm\n        recipientUsername={profile.username}\n        username={user!.userName}\n      />\n    );\n  };\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column computer={12} mobile={16}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size='tiny'\n                src={profile.image || \"/assets/user.png\"}\n              />\n              <Item.Content verticalAlign='middle'>\n                <Header as='h1'>{profile.displayName}</Header>\n              </Item.Content>\n              {user?.userName !== profile.username && (\n                <Button\n                  circular\n                  content={t('Send Message')}\n                  onClick={handleSendMessage}\n                />\n              )}\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column computer={4} mobile={16}>\n          <Statistic.Group widths={2}>\n            <Statistic label={t('Followers')} value={profile.followersCount} />\n            <Statistic label={t('Following')} value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          {!isCurrentUser && (\n            <Reveal animated='move'>\n              <Reveal.Content visible style={{ width: \"100%\" }}>\n                <Button\n                  fluid\n                  color='instagram'\n                  content={profile.following ? t(\"Following\") : t(\"Not following\")}\n                />\n              </Reveal.Content>\n              <Reveal.Content hidden>\n                <Button\n                  loading={loading}\n                  fluid\n                  basic\n                  color={profile.following ? \"red\" : \"instagram\"}\n                  content={profile.following ? t(\"Unfollow\") : t(\"Follow\")}\n                  onClick={\n                    profile.following\n                      ? () => [unfollow(profile.username),  addFeedItem(uuid(), 'Unfollows You', profile.username)]\n                      : () => [follow(profile.username),  addFeedItem(uuid(), 'Started Following You', profile.username)]\n                  }\n                />\n              </Reveal.Content>\n            </Reveal>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(ProfileHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\ninterface RouteParams {\n  username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {}\n\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    loadingProfile,\n    loadProfile,\n    follow,\n    unfollow,\n    isCurrentUser,\n    loading,\n    setActiveTab,\n  } = rootStore.profileStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  useEffect(() => {\n    loadProfile(match.params.username);\n  }, [loadProfile, match]);\n\n  if (loadingProfile) return <LoadingComponent content={t('Loading profile...')} />;\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <ProfileHeader\n          // username={user?.userName!}\n          profile={profile!}\n          isCurrentUser={isCurrentUser}\n          follow={follow}\n          unfollow={unfollow}\n          loading={loading}\n        />\n        <ProfileContent setActiveTab={setActiveTab} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProfilePage);\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Link } from \"react-router-dom\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { observer } from \"mobx-react-lite\";\nimport { formatDistance } from \"date-fns\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst GaleryDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, motofy } =\n    rootStore.motofyStore;\n\n  const connectionArgument = \"RecieveMotofyComment\";\n\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n\n    createHubConnection(motofy!.id, connectionArgument); \n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, motofy]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Comment this motofy\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{maxWidth:'none'}}>\n          {motofy &&\n            motofy.commentMotofies &&\n            motofy.commentMotofies.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  fluid\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    \n    </Fragment>\n  );\n};\n\nexport default observer(GaleryDetailedChat);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  motofyId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ motofyId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteMotofy } = rootStore.motofyStore;\n  const { closeModal } = rootStore.modalStore;\n  const {addFeedItem} = rootStore.feedStore;\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteMotofy = (id: string) => {\n    addFeedItem(id, 'Deleted Motofy');\n    deleteMotofy(id);\n    closeModal();\n    history.push(`/gallery`);\n  };\n\n  const cancelDeleteMotofy = () => {\n    closeModal();\n  };\n\n  let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteMotofy(motofyId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteMotofy()}\n            content={t('No, keep it')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Item, Header, Button, Image, Icon } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst motofyImageStyle = {\n  filter: \"brightness(90%)\",\n  border: \"white solid 1px\",\n  borderRadius: \"5px\",\n};\n// const buttonOwnerStyle = {\n//   borderRadius: \"7px\",\n//   width: \"40%\",\n// };\nconst buttonVisitorStyle = {\n  borderRadius: \"7px\",\n  backgroundColor: \"rgb(29, 115, 152)\",\n};\n\nconst motofyImageTextStyle = {\n  position: \"absolute\",\n  top: \"10%\",\n  left: \"10%\",\n  fontSize: \"1rem\",\n  color: \"#FFD700\",\n  backgroundColor: \"lightblue\",\n  borderRadius: \"50%\",\n};\n\ninterface IProps {\n  motofy: IMotofy;\n}\nconst GaleryDetailedHeader: React.FC<IProps> = ({ motofy }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const { embraceMotofy, unembraceMotofy, loading } = rootStore.motofyStore;\n\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { openModal } = rootStore.modalStore;\n\n  const [managing, setManaging] = useState(false);\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  const handleDeleteMotofy = (id: string) => {\n    openModal(<ConfirmDelete motofyId={id} />);\n  };\n  const handleEmbraceMotofy = (id: string) => {\n    embraceMotofy(id);\n    addFeedItem(id, \"Embraced Motofy\");\n  };\n  const handleUnembraceMotofy = (id: string) => {\n    unembraceMotofy(id);\n    addFeedItem(id, \"Unembraced Motofy\");\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={motofy!.photoUrl || `/assets/placeholder.png`}\n          fluid\n          style={motofyImageStyle}\n        />\n        <Segment basic style={motofyImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='large'\n                  content={motofy.name}\n                  style={{ color: \"white\" }}\n                />\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached='bottom'>\n        {motofy.publisherUsername === user!.userName ? (\n          <Fragment>\n            {!managing ? (\n              <Button onClick={toggleManaging} color='instagram' fluid>\n                {t(\"Manage\")}\n              </Button>\n            ) : (\n              <div className='ui three buttons'>\n                <Button\n                  as={Link}\n                  to={`/manageGallery/${motofy.id}`}\n                  color='pink'\n                  basic\n                >\n                  {t(\"Edit\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    handleDeleteMotofy(motofy.id!);\n                  }}\n                  color='google plus'\n                \n                >\n                  {t(\"Delete\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    setManaging(false);\n                  }}\n                  // color='grey'\n                  // basic\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </div>\n            )}\n          </Fragment>\n        ) : motofy.embraced ? (\n          <Button\n            style={buttonVisitorStyle}\n            negative\n            loading={loading}\n            fluid\n            onClick={() => handleUnembraceMotofy(motofy.id!)}\n          >\n            {t(\"Embraced\")}\n          </Button>\n        ) : (\n          <Button\n            style={buttonVisitorStyle}\n            loading={loading}\n            fluid\n            onClick={() => handleEmbraceMotofy(motofy.id)}\n            color='teal'\n          >\n            <Icon name='heart' />\n            {t(\"Embrace\")}\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GaleryDetailedHeader);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { Item, ItemExtra, Rating, RatingProps, Segment } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface IProps {\n  motofy: IMotofy;\n}\nconst GaleryDetailedRating: React.FC<IProps> = ({ motofy }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { rateMotofy } = rootStore.motofyStore;\n  const { user } = rootStore.userStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  let username = user?.userName;\n  const [rated, setRated] = useState(false);\n  const [userRated, setUserRated] = useState<string | number | undefined>();\n\n\n  useEffect(() => {\n\n    if(motofy.motofyScores.length > 0) {\n\n      if (motofy.motofyScores.some((x) => x.username === username)) {\n        setUserRated(\n          motofy.motofyScores.find((x) => x.username === username).score\n        );\n        setRated(true);\n      } \n     \n    }\n\n\n  }, [motofy.motofyScores, username]); \n\n\n  const handleRate = (e: any, rating: RatingProps) => {\n\n    rateMotofy(rating.rating, motofy, user);\n    setUserRated(rating.rating);\n    e.preventDefault();\n    setRated(true);\n  };\n  return (\n    <Segment.Group>\n      <Segment style={{\n          display: 'flex', \n          flexDirection: 'column', \n          textAlign: 'center', \n          justifyContent: 'space-around'}}>\n        <Item.Group>\n\n        <Item.Header>{t(\"Average Rating:\")} {motofy.averageRating}</Item.Header>\n        {motofy.publisherUsername !== user!.userName ? (\n          <Fragment>\n            <Rating\n              icon='star'\n              size='large'\n              onRate={(e, rating) => {\n                handleRate(e, rating);\n              }}\n              defaultRating={motofy.averageRating}\n              maxRating={5}\n              disabled={rated}\n            />\n            {userRated ? (\n              <ItemExtra>{t(\"You Gave This Motofy \")} {userRated} {t(\"Stars\")}</ItemExtra>\n            ) : (\n              <ItemExtra>{t(\"You Have Not Rated Yet\")}</ItemExtra>\n            )}\n          </Fragment>\n        ) : (\n          <Fragment>{t(\"NB: You cannot rate your own motofy\")}</Fragment>\n        )}\n        </Item.Group>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(GaleryDetailedRating);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, List, Item, Label, Image, Grid } from \"semantic-ui-react\";\nimport { IEmbracer } from \"../../../app/models/motofy\";\nimport { useTranslation } from \"react-i18next\";\n\n\ninterface IProps {\n  embracers: IEmbracer[];\n}\n\nconst GaleryDetailedSidebar: React.FC<IProps> = ({ embracers }) => {\n  const { t } = useTranslation([\"gallery\"]);\n  \n  const person = t(\"Person\");\n  const persons = t(\"People\");\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {embracers.length} {embracers.length === 1 ? person : persons}{\" \"}\n        {t(\"embraced\")}\n      </Segment>\n      <>\n        <List divided>\n          <Item.Group divided>\n            {embracers.map((embracer) => (\n              <Segment key={embracer.username} style={{ position: \"relative\" }}>\n                <Grid>\n                  <Grid.Column width={4}>\n                    <Image\n                      size='mini'\n                      circular\n                      src={embracer.image || \"/assets/user.png\"}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={12}>\n                        <Link to={`/profile/${embracer.username}`}>\n                          <Item.Extra as='h5'>\n                            {embracer.displayName}\n                           \n                          </Item.Extra>\n\n                          {embracer.isOwner && (\n                            <Label\n                              style={{ position: \"top\" }}\n                              color='teal'\n                              corner='right'\n                            >\n                              Pub\n                            </Label>\n                          )}\n                        </Link>\n                      </Grid.Column>\n                </Grid>\n              </Segment>\n            ))}\n          </Item.Group>\n        </List>\n      </>\n    </Fragment>\n  );\n};\n\nexport default observer(GaleryDetailedSidebar);\n","import React from \"react\";\nimport { Segment, Grid, Icon, Image, GridRow } from \"semantic-ui-react\";\nimport { IMotofy } from \"../../../app/models/motofy\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GalleryDetailedInfo: React.FC<{ motofy: IMotofy }> = ({ motofy }) => {\n  const iconStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: \"right\",\n    justifyContent: \"center\",\n  };\n\n  const { t } = useTranslation([\"gallery\"]);\n\n\n  return (\n    <Segment.Group>\n      <Segment\n        attached='top'\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          textAlign: \"left\",\n          justifyContent: \"center\",\n          // color: 'red'\n        }}\n      >\n        <Grid verticalAlign='middle'>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Image size='mini' src={motofy.brandLogoUrl} />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <p>\n                <strong>{motofy.brandName} - </strong> {motofy.model}\n              </p>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Icon\n                size='large'\n                color='teal'\n                name='info'\n                style={{ iconStyle }}\n              />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <p style={{ whiteSpace: \"pre-wrap\" }}>{motofy.description}</p>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <GridRow>\n            <Grid.Column width={2}>\n              <Icon name='calendar' size='large' color='teal' />\n            </Grid.Column>\n            <Grid.Column width={14}>\n              <span>{t(\"Made\")} {motofy.yearOfProduction}</span>\n            </Grid.Column>\n          </GridRow>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {t(\"In\")} {motofy.city}, {motofy.countryName}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='motorcycle' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {\" \"}\n              {t(\"Engine\")} {motofy.cubicCentimeters}{t(\"cc\")}, {t(\"done\")}{\" \"}\n              {motofy.numberOfKilometers} {t(\"kilometers\")}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={2}>\n            <Icon name='euro sign' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <span>\n              {\" \"}\n              {t(\"Price paid\")} {motofy.pricePaid} {t(\"Euro\")}, {t(\" present value\")}{\" \"}\n              {motofy.estimatedValue} Euro\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default GalleryDetailedInfo;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport GaleryDetailedChat from \"./GaleryDetailedChat\";\nimport GaleryDetailedHeader from \"./GaleryDetailedHeader\";\nimport GaleryDetailedRating from \"./GaleryDetailedRating\";\nimport GaleryDetailedSidebar from \"./GaleryDetailedSidebar\";\nimport GalleryDetailedInfo from \"./GalleryDetailedInfo\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DetailParams {\n  id: string;\n}\nconst GaleryDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { motofy, loadMotofy, loadingInitial } = rootStore.motofyStore;\n\n  const { t } = useTranslation([\"gallery\"]);\n\n  useEffect(() => {\n    loadMotofy(match.params.id);\n  }, [loadMotofy, match.params.id]);\n\n  if (loadingInitial || !motofy)\n    return <LoadingComponent content={t('Loading motofies...')} />;\n\n  return (\n    <Grid>     \n      <Grid.Column computer={12} mobile={16} >\n        <GaleryDetailedHeader motofy={motofy} />\n        <GaleryDetailedRating motofy={motofy}/>\n        <GalleryDetailedInfo motofy={motofy} />\n\n        <GaleryDetailedChat />\n      </Grid.Column>\n     \n      <Grid.Column computer={4} mobile={16} >\n        <GaleryDetailedSidebar embracers={motofy.embracers} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(GaleryDetails);\n","import { formatDistance } from \"date-fns\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Divider,\n  Header,\n  Icon,\n  Item,\n  Label,\n  Segment,\n} from \"semantic-ui-react\";\nimport HeaderSubHeader from \"semantic-ui-react/dist/commonjs/elements/Header/HeaderSubheader\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumListItem: React.FC<{ forumpost: IForumpost }> = ({ forumpost }) => {\n  const { t } = useTranslation([\"forum\"]);\n\n  const Response = \" \" + t(\"Response\");\n  const Responses = \" \" + t(\"Responses\");\n  const Member = \" \" + t(\"Member\");\n  const Members = \" \" + t(\"Members\");\n  const Rating = \" \" + t(\"Rating\");\n  const Ratings = \" \" + t(\"Ratings\");\n  return (\n    <Segment.Group raised>\n      <Segment>\n        <Header as='h1' floated='right'>\n          {forumpost.title}\n          <HeaderSubHeader></HeaderSubHeader>\n        </Header>\n        <HeaderSubHeader floated='right'>\n          <Label pointing='below' content={forumpost.category} />\n\n          {/* <p>\n          Posted by{\" \"}\n          <Link to={`/profile/${forumpost.userName}`}>\n            {forumpost.displayName}\n          </Link>\n          </p> */}\n        </HeaderSubHeader>\n\n        <Divider clearing />\n        <Item>\n          <Item.Image\n            size='tiny'\n            // circular\n            src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n            floated='left'\n          />\n          <Item.Content>\n            <Item.Description>\n              <>{forumpost.body}</>\n            </Item.Description>\n\n            <Item.Extra></Item.Extra>\n          </Item.Content>\n        </Item>\n      </Segment>\n\n      <Segment>\n        <Icon name='clock' /> {t(\"Posted\")}{\" \"}\n        {formatDistance(new Date(forumpost.dateAdded), new Date())} {t(\"ago by\")}{\" \"}\n        <Link to={`/profile/${forumpost.userName}`}>\n          {forumpost.displayName}\n        </Link>\n        {forumpost.commenters?.length! > 0 && (\n          <Segment>\n            {forumpost.numberOfComents! > 1\n              ? forumpost.numberOfComents + Response\n              : forumpost.numberOfComents + Responses}{\" \"}\n            {t(\"from\")}{\" \"}\n            {forumpost.commenters?.length! > 1\n              ? forumpost.commenters?.length + Members\n              : forumpost.commenters?.length + Member}\n          </Segment>\n        )}\n        {forumpost.forumpostRatings?.length! > 0 && (\n          <Segment>\n            {forumpost.forumpostRatings!.length > 1\n              ? forumpost.forumpostRatings?.length + Ratings\n              : forumpost.forumpostRatings?.length + Rating}{\" \"}\n            {t(\"from\")}{\" \"}\n            {forumpost.forumpostRatings?.length! > 1\n              ? forumpost.forumpostRatings?.length + Members\n              : forumpost.forumpostRatings?.length + Member}\n          </Segment>\n        )}\n      </Segment>\n      <Segment>\n        <Button\n          as={Link}\n          to={`/forum/${forumpost.id}`}\n          fluid\n          content={t('View')}\n          color='instagram'\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ForumListItem;\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ForumListItem from \"./ForumListItem\";\n\nconst ForumList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { forumpostsByDate } = rootStore.forumPostStore; //forumposts,\n\n  return (\n    <Fragment>\n      {forumpostsByDate.map(([group, forumposts]) => (\n        <Fragment key={group}>\n          <Item.Group divided>\n            {forumposts.map((forumpost) => (\n              <ForumListItem forumpost={forumpost} key={forumpost.id} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ForumList);\n","export const category = [\n    { key: 'Offer information', text: 'Offer information', value: 'Offer information' },\n    { key: 'Ask for assistance', text: 'Ask for assistance', value: 'Ask for assistance' },\n    { key: 'Ask for advice', text: 'Ask for advice', value: 'Ask for advice' },\n  ];","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Dropdown, Input, Divider } from \"semantic-ui-react\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.forumPostStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const styles = {\n    textAlign: \"center\"\n  };\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Menu.Item>\n          <Dropdown\n            placeholder={t('Filter by category')}\n            selection\n            fluid\n            search\n            options={category}\n            onChange={handleOnChange}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          icon={\"arrows alternate\"}\n          content={t(\"All Posts\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iAsked\")}\n          onClick={() => setPredicate(\"iAsked\", \"true\")}\n          color={\"blue\"}\n          name={\"iAsked\"}\n          icon={\"question circle outline\"}\n          content={t(\"I Asked\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iRated\")}\n          onClick={() => setPredicate(\"iRated\", \"true\")}\n          color={\"blue\"}\n          name={\"iRated\"}\n          icon={\"heart outline\"}\n          content={t(\"I rated\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"trending\")}\n          onClick={() => setPredicate(\"trending\", \"true\")}\n          color={\"blue\"}\n          name={\"trending\"}\n          icon={\"globe\"}\n          content={t(\"Trending\")}\n          style={ styles }\n        />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"country\"}\n          icon={\"users\"}\n          content={t(\"By people I follow\")}\n          style={ styles }\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ForumListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n      {/* style={{ marginTop: 50 }} */}\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' fluid content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ForumListItemPlaceholder;\n\n","import React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {  Grid, Input } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n\nconst SearchForum = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.forumPostStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n      closeModal();\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n            <Input\n              style={{ width: \"100%\" }}\n              icon='search'\n              placeholder={t('Search all')}\n              onKeyDown={(e: any) => handleResultSelect(e)}\n            />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchForum;\n","import React, { useContext } from \"react\";\nimport { Dropdown, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst SearchForumByCategory = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setPredicate } = rootStore.forumPostStore;\n\n  const { closeModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"modals\"]);\n\n  const handleOnChange = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Dropdown\n          placeholder={t('Filter by category')}\n          selection\n          fluid\n          search\n          options={category}\n          onChange={handleOnChange}\n          clearable\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchForumByCategory;\n","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\"; \nimport {  Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport SearchForum from \"../modals/SearchForum\";\nimport SearchForumByCategory from \"../modals/SearchForumByCategory\";\n\nconst ForumMobileFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.forumPostStore;\n\n  const { openModal } = rootStore.modalStore;\n\n\n  const handleSearch = () => {\n    openModal(<SearchForum />);\n  };\n  const handleSearchByCategory = () => {\n    openModal(<SearchForumByCategory />);\n  };\n\n  return (\n    <Menu fluid widths={7}>\n      <Menu.Item\n        active={predicate.size === 0}\n        onClick={() => setPredicate(\"all\", \"true\")}\n        color={\"blue\"}\n        icon={\"home\"}\n      />\n       {/* <Dropdown\n            icon={\"tags\"}\n            selection\n            fluid\n            search\n            options={category}\n            onChange={handleOnChange}\n            clearable\n          /> */}\n      <Menu.Item\n        active={predicate.has(\"iAsked\")}\n        onClick={() => setPredicate(\"iAsked\", \"true\")}\n        color={\"blue\"}\n        icon={\"question circle outline\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"iRated\")}\n        onClick={() => setPredicate(\"iRated\", \"true\")}\n        color={\"blue\"}\n        icon={\"heart outline\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"trending\")}\n        onClick={() => setPredicate(\"trending\", \"true\")}\n        color={\"blue\"}\n        icon={\"globe\"}\n      />\n      <Menu.Item\n        active={predicate.has(\"iFollow\")}\n        onClick={() => setPredicate(\"iFollow\", \"true\")}\n        color={\"blue\"}\n        icon={\"users\"}\n      />\n       <Menu.Item\n        onClick={() => handleSearchByCategory()}\n        color={\"blue\"}\n        icon={\"tags\"}\n      />\n      <Menu.Item\n        onClick={() => handleSearch()}\n        color={\"blue\"}\n        icon={\"search\"}\n      />\n     \n       {/* <Menu.Item> */}\n         \n        {/* </Menu.Item> */}\n    </Menu>\n  );\n};\n\nexport default observer(ForumMobileFilters);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\"; //Button,\nimport ForumList from \"./ForumList\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ForumFilters from \"./ForumFilters\";\nimport ForumListItemPlaceholder from \"./ForumListItemPlaceholder\";\nimport ForumMobileFilters from \"./ForumMobileFilters\";\n\nconst ForumDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadForumPosts, loadingInitial, setPage, page, totalPages } =\n    rootStore.forumPostStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadForumPosts().then(() => setLoadingNext(false));\n  };\n  useEffect(() => {\n    loadForumPosts();\n  }, [loadForumPosts]);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column mobile={16} tablet={16} className='mobile only'>\n          <ForumMobileFilters />\n        </Grid.Column>\n        <Grid.Column computer={11} mobile={16}>\n          {loadingInitial && page === 0 ? (\n            <ForumListItemPlaceholder />\n          ) : (\n            <InfiniteScroll\n              pageStart={0}\n              loadMore={handleGetNext}\n              hasMore={!loadingNext && page + 1 < totalPages}\n              initialLoad={false}\n            >\n              <ForumList />\n            </InfiniteScroll>\n          )}\n        </Grid.Column>\n        <Grid.Column width={5} className='mobile hidden'>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <ForumFilters />\n          </Sticky>\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default observer(ForumDashboard);\n","import { IComment } from \"./comment\";\n\nexport interface IForumpostEnvelope {\n  forumposts: IForumpost[];\n  forumpostCount: number\n\n}\n\nexport interface IForumpost {\n  id: string;\n  title: string;\n  body: string;\n  // dateAdded: Date;\n  dateAdded: string;\n  displayName: string;\n  userName: string;\n  authorPhotoUrl: string;\n  category: string;\n  commentForumPosts: IComment[];\n  numberOfComents?: number;\n  commenters?: IComment [];\n  forumpostRatings?: any [];\n  forumpostRating: number;\n}\n\nexport class ForumpostFormValues {\n  id?: string;\n  title: string = '';\n  body: string = '';\n  // dateAdded: Date = '';\n  dateAdded: string = '';\n  // displayName: string = '';\n  category: string = '';\n\n  constructor(init?: ForumpostFormValues) {\n    if (init)\n      Object.assign(this, init);\n  }\n}\n\nexport interface IRateForumpost {\n  id: string;\n  rating: string;\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button, Form, Grid, Label, Segment } from \"semantic-ui-react\";\nimport { ForumpostFormValues } from \"../../../app/models/forumpost\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { category } from \"../../../app/common/options/forumCategoryOptions\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n}\nconst ForumForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createForumpost, editForumpost, submitting, loadForumPost } =\n    rootStore.forumPostStore;\n\n  const { user } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [editMode, setEditMode] = useState(false);\n\n  const [forumpost, setForumpost] = useState(new ForumpostFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    body: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n  });\n\n  useEffect(() => {\n    if (match.params.id) {\n      setEditMode(true);\n\n      setLoading(true);\n      loadForumPost(match.params.id)\n        .then((forumpost) => setForumpost(new ForumpostFormValues(forumpost)))\n        .finally(() => setLoading(false));\n    }\n  }, [loadForumPost, match.params.id, setEditMode]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const { ...forumpost } = values;\n    if (!forumpost.id) {\n      let newForumpost = {\n        ...forumpost,\n        id: newId,\n        dateAdded: new Date().toISOString(),\n        displayName: user?.displayName,\n        userName: user?.userName,\n      };\n      createForumpost(newForumpost);\n      addFeedItem(newId, \"Added Forumpost\");\n    } else {\n      editForumpost(forumpost);\n    }\n  };\n\n\n  return (\n    <Grid>\n      <Grid.Column width={3} />\n      <Grid.Column \n      // width={10}\n      computer={10} mobile={16}\n      >\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={forumpost}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                {editMode && <Label content={t('Title')} />}\n\n                <Field\n                  placeholder={t('Title')}\n                  name='title'\n                  value={forumpost.title}\n                  component={TextInput}\n                />\n                {editMode && <Label content={t('Body')} />}\n\n                <Field\n                  placeholder={t('Body')}\n                  name='body'\n                  rows={4}\n                  value={forumpost.body}\n                  component={TextAreaInput}\n                />\n                {editMode && <Label content={t('Category')} />}\n\n                <Field\n                  placeholder={t('Category')}\n                  name='category'\n                  options={category}\n                  value={forumpost.category}\n                  component={SelectInput}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content={t('Submit')}\n                />\n                <Button\n                  floated='right'\n                  disabled={loading}\n                  type='button'\n                  content={t('Cancel')}\n                  onClick={\n                    forumpost.id\n                      ? () => history.push(`/forum/${forumpost.id}`)\n                      : () => history.push(\"/forum\")\n                  }\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumForm);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ForumDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, forumpost } =\n    rootStore.forumPostStore;\n\n  const connectionArgument = \"RecieveForumPostComment\";\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n    createHubConnection(forumpost!.id, connectionArgument); //, mechanic!\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, forumpost]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Comments\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{ maxWidth: \"none\" }}>\n          {forumpost &&\n            forumpost.commentForumPosts &&\n            forumpost.commentForumPosts.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  loading={submitting}\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumDetailedChat);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Segment, Image, Item } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\n\nconst activityImageStyle = {\n  filter: \"brightness(90%)\",\n};\n\nconst activityImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"15%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\nconst ForumDetailedHeader: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n \n  return (\n    <Segment.Group raised>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={`/assets/forumCategoryImages/${forumpost.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment basic style={activityImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <p>{forumpost.category}</p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      \n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedHeader);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Grid, Icon, Divider, Rating } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ForumDetailedInfo: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { rated } = rootStore.forumPostStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n\n  return (\n    <Segment.Group>\n      <Segment attached='top' textAlign='center'>\n        <Grid>\n          <Grid.Column width={8}>\n            <Grid.Row>\n              <h1>{forumpost.title}</h1>\n              {forumpost.forumpostRating > 0 && (\n                <Rating\n                  icon='star'\n                  size='large'\n                  defaultRating={forumpost.forumpostRating}\n                  maxRating={5}\n                />\n              )}\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Link to={`/profile/${forumpost.userName}`}>\n              <img\n                className='ui centered circular tiny image'\n                src={forumpost.authorPhotoUrl || \"/assets/user.png\"}\n                alt='user'\n              />\n            </Link>\n          </Grid.Column>\n        </Grid>\n        <Divider vertical>{t(\"By\")} {forumpost.displayName}</Divider>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='info' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <i>\n              <span>\n                {t(\"Posted\")}{\" \"}\n                {formatDistance(new Date(forumpost.dateAdded), new Date())}\n              </span>{\" \"}\n              {t(\"ago in\")} <span>'{forumpost.category}' {t(\"category\")} </span>\n              {forumpost.numberOfComents! > 0 && (\n                <span>, {t(\"so far with\")} {forumpost.numberOfComents} {t(\"comments\")} </span>\n              )}\n              {forumpost.forumpostRating > 0 && (\n                <span>\n                  , {t(\"rated\")} {forumpost.forumpostRating.toFixed(2)}\n                </span>\n              )}\n              {rated && <span>, {t(\"you already rated\")} </span>}\n            </i>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={16}>\n            <span style={{ whiteSpace: \"pre-wrap\" }}>{forumpost.body}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ForumDetailedInfo);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n// import { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n  forumpostId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ forumpostId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {deleteForumpost } = rootStore.forumPostStore;\n \n  const { closeModal } = rootStore.modalStore;\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  const handleDeleteForumpost = (id: string) => {\n    deleteForumpost(id)\n    //   .then(() => addFeedItem(id, \"Deactivated Motocycle Diary\"))\n      .then(() => closeModal())\n      .finally(() => history.push(`/forum`));\n  };\n\n  const cancelDeleteForumpost = () => {\n    closeModal();\n  };\n\n  // let history = useHistory();\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Irreversible action! Are you sure you want to do this?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteForumpost(forumpostId)}\n            color='teal'\n            content={t('Yes, delete it')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteForumpost()}\n            content={t(\"No, don't delete\")}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Button, Grid, GridColumn } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst ForumDetailedManager: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"forum\"]);\n\n  const [managing, setManaging] = useState(false);\n\n  const handleDeleteForumpost = () => {\n    openModal(<ConfirmDelete forumpostId={forumpost.id} />);\n    setManaging(false);\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <>\n      <Segment clearing attached='bottom'>\n        <>\n          {!managing ? (\n            <Button onClick={toggleManaging} color='instagram' fluid>\n              {t(\"Manage your post\")}\n            </Button>\n          ) : (\n            <div className='ui three buttons'>\n\n          \n                <Button\n                  as={Link}\n                  to={`/manageForum/${forumpost.id}`}\n                  color='pink'\n                  basic\n                >\n                  {t(\"Edit\")}\n                </Button>\n           \n                <Button\n                  onClick={handleDeleteForumpost}\n                  color='google plus'\n                  // fluid\n                >\n                  {t(\"Delete\")}\n                </Button>\n                <Button\n                  onClick={() => {\n                    setManaging(false);\n                  }}\n                  // color='grey'\n                  // fluid\n                >\n                  {t(\"Cancel\")}\n                </Button>\n            </div>\n          )}\n        </>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(ForumDetailedManager);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Segment, Grid, Button } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ForumDetailedRating: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n  const { setRating } = rootStore.forumPostStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const [rated, setRated] = useState(false);\n  const { t } = useTranslation([\"forum\"]);\n\n\n  useEffect(() => {\n\n    if (forumpost.forumpostRatings!.length > 0) {\n      \n      forumpost.forumpostRatings?.forEach((rating) => {\n        if (rating.authorUsername === user?.userName) {\n          setRated(true);\n        } \n      });\n    }\n  }, [forumpost, user]);\n\n  const handleRating = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    data: any\n  ) => {\n    setRated(true);\n    setRating(forumpost.id, data.content);\n    addFeedItem(forumpost.id, 'Rated Forumpost')\n  };\n\n  return (\n    <>\n    {user?.userName !== forumpost.userName && !rated && (\n        \n        <Segment attached>\n          <Grid verticalAlign='middle'>\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Interesting')}\n              />\n            </Grid.Column>\n\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Usefull')}\n              />\n            </Grid.Column>\n\n            <Grid.Column width={5} style={{ width: \"100%\" }}>\n              <Button\n                fluid\n                onClick={(e, data) => handleRating(e, data)}\n                content={t('Helping')}\n              />\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      )}\n    </>\n  );\n};\n\nexport default observer(ForumDetailedRating);\n","// import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, List, Item, Image, Grid } from \"semantic-ui-react\";\nimport { IForumpost } from \"../../../app/models/forumpost\";\n\nconst ForumDetailedSidebar: React.FC<{ forumpost: IForumpost }> = ({\n  forumpost,\n}) => {\n  const { t } = useTranslation([\"forum\"]);\n  const person = \" \" + t(\"person\");\n  const people = \" \" + t(\"people\");\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: \"none\" }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {forumpost.commenters?.length !== undefined &&\n\n        forumpost.commenters?.length > 1 ? forumpost.commenters?.length  + people : forumpost.commenters?.length+ person \n        }\n          {\" \"}{t(\"participating\")}\n      </Segment>\n\n      <Segment attached>\n        <List relaxed divided>\n          <Item.Group divided>\n            {forumpost.commenters?.map((commenter) => (\n              <Segment key={commenter.id}>\n                <Grid>\n                  <Grid.Column width={6}>\n                    <Image size='mini' circular src={commenter.image} />\n                  </Grid.Column>\n                  <Grid.Column width={10}>\n                    <Link to={`/profile/${commenter.username}`}>\n                      <Item.Header as='h3'>{commenter.displayName}</Item.Header>\n                    </Link>\n                  </Grid.Column>\n                </Grid>\n              </Segment>\n            ))}\n          </Item.Group>\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ForumDetailedSidebar);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ForumDetailedChat from \"./ForumDetailedChat\";\nimport ForumDetailedHeader from \"./ForumDetailedHeader\";\nimport ForumDetailedInfo from \"./ForumDetailedInfo\";\nimport ForumDetailedManager from \"./ForumDetailedManager\";\nimport ForumDetailedRating from \"./ForumDetailedRating\";\nimport ForumDetailedSidebar from \"./ForumDetailedSidebar\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ForumDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { forumpost, loadForumPost, loadingInitial, rated } =\n    rootStore.forumPostStore;\n\n  const { user } = rootStore.userStore;\n  const { t } = useTranslation([\"forum\"]);\n\n\n  useEffect(() => {\n    loadForumPost(match.params.id);\n  }, [loadForumPost, match.params.id]);\n\n  if (loadingInitial || !forumpost)\n    return <LoadingComponent content={t('Loading forum post details...')} />;\n\n  return (\n    <Grid>\n      <Grid.Column computer={11} mobile={16}>\n        <ForumDetailedInfo forumpost={forumpost} />\n        {user?.userName !== forumpost.userName && !rated && (\n          <ForumDetailedRating forumpost={forumpost} />\n        )}\n\n        {/* {forumpost.userName === formattedUser.username && ( */}\n        {forumpost.userName === user?.userName && (\n          <ForumDetailedManager forumpost={forumpost} />\n        )}\n        <ForumDetailedChat />\n      </Grid.Column>\n      <Grid.Column computer={5} mobile={16}>\n        <Grid.Row className='mobile hidden'>\n          <ForumDetailedHeader forumpost={forumpost} />\n        </Grid.Row>\n        <ForumDetailedSidebar forumpost={forumpost} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ForumDetails);\n","export const ratingOptions = [\n    {\n      key: \"1\",\n      text: \"Not satisfied at all\",\n      value: \"1\",\n    },\n    {\n      key: \"2\",\n      text: \"It could be better, but ok\",\n      value: \"2\",\n    },\n    { key: \"3\", text: \"Satified\", value: \"3\" },\n    { key: \"4\", text: \"Very satisfied\", value: \"4\" },\n    {\n      key: \"5\",\n      text: \"Totally happy\",\n      value: \"5\",\n    },\n  ];\n","export const yesNo = [\n    { key: \"Yes\", text: \"Yes\", value: \"1\" },\n    { key: \"No\", text: \"No\", value: \"0\" },\n  ];","import React, { Fragment, useContext } from \"react\";\n// import { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { IUser } from \"../../../app/models/user\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    mechanicId: string;\n    username: string | undefined;\n    rating: string;\n    testimonial: string;\n    user: IUser | null;\n    hasRecommended: string;\n}\nconst ConfirmBecomeCustomer: React.FC<IProps> = ({ hasRecommended, mechanicId, rating, testimonial, user}) => {\n// const ConfirmBecomeCustomer = () => {\n  const rootStore = useContext(RootStoreContext);\n  // const { user } = rootStore.userStore;\n\n  const { \n    // becomeCustomer, \n    becomeCustomer, recommend, rate, addTestimonial,\n    setCloseCustomerForm } = rootStore.mechanicStore;//, setHasBecomeCustomer\n  const { closeModal } = rootStore.modalStore;\n\n  const handleBecomeCustomer = (id: string) => {\n\n    setCloseCustomerForm();\n\n    becomeCustomer(mechanicId, user, hasRecommended)\n    .then(() => recommend(mechanicId, user?.userName, hasRecommended))\n    .then(() => rate(mechanicId, rating, user))\n    .then(() => addTestimonial(mechanicId, testimonial, user))\n    .catch(error => console.log(error));\n\n    closeModal();\n  };\n\n  const cancelBecomeCustomer = () => {\n    closeModal();\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content='Become a customer of this moto shop?'\n          color='teal'\n          textAlign='center'\n        />\n        <Fragment>\n          <Button\n            // fluid\n            onClick={() => handleBecomeCustomer('id')}\n            color='teal'\n            content='Yes, gladly!'\n            floated='left'\n          />\n          <Button\n            // fluid\n            onClick={() => cancelBecomeCustomer()}\n            content='No, cancel'\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmBecomeCustomer;\n","import React, { useContext} from \"react\";//, useState \n// import { Field } from \"react-final-form\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\n\n// import { useHistory } from \"react-router\";\nimport {\n  Header,\n  Button,\n  Grid,\n  Form,\n  Segment,\n  Checkbox,\n  Label,\n} from \"semantic-ui-react\";\n// import { IUser } from \"../../../app/models/user\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\n// import TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nimport { ratingOptions } from \"../../../app/common/options/ratingOptions\";\nimport { yesNo}   from '../../../app/common/options/yesNoOptions';\n\nimport {\n  combineValidators,\n    composeValidators,\n    hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport ConfirmBecomeCustomer from \"../modals/ConfirmBecomeCustomer\";\nimport { useTranslation } from \"react-i18next\";\n\nconst validate = combineValidators({\n  recommend: isRequired(\"recommend\"),\n  rating: isRequired(\"rating\"),\n    testimonial: composeValidators(\n      isRequired(\"Testimonial\"),\n      hasLengthGreaterThan(4)({\n        message: \"Testimonial needs to be at least 25 characters\",\n      })\n    )(),\n});\n\n\n\ninterface IProps {\n  mechanicId: string;\n}\nconst CustomerForm: React.FC<IProps> = ({ mechanicId }) => {\n  const rootStore = useContext(RootStoreContext);\n    const { user } = rootStore.userStore;\n    const { openModal } = rootStore.modalStore;\n\n    const { t } = useTranslation([\"forms\"]);\n\n\n    const { \n      setCloseCustomerForm , \n      } = rootStore.mechanicStore;\n\n  const handleFinalFormSubmit = (values: any) => {\n    \n    let username = user?.userName;\n    let rating = values.rating;\n    let hasRecommended = values.recommend;\n    let testimonial = values.testimonial;\n\n    openModal(<ConfirmBecomeCustomer mechanicId={mechanicId} \n        username={username} \n        rating={rating}\n        hasRecommended={hasRecommended}\n        testimonial={testimonial}\n        user={user}\n        />);\n    \n\n  };\n\n  const handleChange = (key: any, value: any) => {\n    \n    if (value.checked === true){\n        // setAgreeTermsAndServices(value.checked);\n    } else {\n        // setAgreeTermsAndServices(value.checked);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Segment clearing>\n          <Header\n            as='h2'\n            content={t('Register as a customer of this mechanic is enabling you to review, evaluate, comment and more...')}\n            color='teal'\n            textAlign='center'\n          />\n          <FinalForm\n            validate={validate}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit}>\n                <Field\n                  name='rating'\n                  placeholder={t('How would you evaluate this shop?')}\n                  options={ratingOptions}\n                  component={SelectInput}\n                />\n                <Field\n                  name='recommend'\n                  placeholder={t('Would you recommend this shop?')}\n                  options={yesNo}\n                  component={SelectInput}\n                />\n                <Field\n                  name='testimonial'\n                  rows={4}\n                  placeholder={t('Please write a couple of words about your experience with this mechanic shop')}\n                  component={TextAreaInput}\n                />\n                <Checkbox\n                  name='checkForUpdates'\n                  onChange={(e, data) => handleChange(e, data)}\n                  />\n                <Label onClick={()=> console.log('open modal')} content={t('I have read and understood the rules of a portal')}/>\n\n                <Button\n                  floated='right'\n                  type='button'\n                  content={t(\"No, don't register me\")}\n                  onClick={() => setCloseCustomerForm()}\n                />\n                <Button\n                  floated='right'\n                  disabled={invalid || pristine}\n                  positive\n                  type='submit'\n                  content={t('Yes, register me as a customer')}\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default CustomerForm;\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { useTranslation } from \"react-i18next\";\n\nconst MechanicDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { createHubConnection, stopHubConnection, addComment, mechanic } =\n    rootStore.mechanicStore;\n\n  const connectionArgument = \"RecieveMechanicComment\";\n\n  const { t } = useTranslation([\"comments\"]);\n\n  useEffect(() => {\n    createHubConnection(mechanic!.id, connectionArgument); //, mechanic!\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, mechanic]);\n  \n\n  // const handleTest = (event: FormEvent<HTMLTextAreaElement>) => {\n\n  //   const {name, value} = event.currentTarget;\n\n  // }\n\n\n  return (\n    <>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: \"none\" }}\n      >\n        <Header>{t(\"Chat about this mechanic\")}</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group style={{ maxWidth: \"none\" }}>\n          {mechanic &&\n            mechanic.commentMechanics &&\n            mechanic.commentMechanics.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>\n                      {formatDistance(new Date(comment.createdAt), new Date())}\n                    </div>{\" \"}\n                    {t(\"ago\")}\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form, pristine }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field\n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder={t('Add your comment')}\n                  // onChange={handleTest}\n                />\n                <Button\n                  content={t('Add Reply')}\n                  labelPosition='left'\n                  icon='edit'\n                  color='instagram'\n                  loading={submitting}\n                  fluid\n                  disabled={pristine}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(MechanicDetailedChat);\n","import { observer } from \"mobx-react-lite\";\nimport React\n// , { \n//   Fragment, \n//   useCallback, \n//   useContext, \n//   useEffect \n// } \nfrom \"react\"; //useCallback,\nimport { useTranslation } from \"react-i18next\";\n// import { Link } from \"react-router-dom\";\nimport { Segment, Item, Header, \n  // Button, \n  Image } from \"semantic-ui-react\";\nimport { IMechanic\n  // , IMechanicCustomer \n} from \"../../../app/models/mechanic\";\n// import { RootStoreContext } from \"../../../app/stores/rootStore\";\n// import ConfirmDelete from \"../modals/ConfirmDelete\";\n\n// import LoadingComponent from '../../../app/layout/LoadingComponent';\n\nconst mechanicImageStyle = {\n  filter: \"brightness(90%) contrast(50%) drop-shadow(4px 4px 8px teal)\",\n};\n\nconst mechanicImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"5%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\nconst MechanicDetailedHeader: React.FC<{ mechanic: IMechanic }> = ({mechanic}) => {\n  const { t } = useTranslation([\"mechanics\"]);\n\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: \"0\" }}>\n        <Image\n          src={mechanic.photoUrl || `/assets/placeholder.png`}\n          fluid\n          style={mechanicImageStyle}\n          rounded\n        />\n        <Segment basic style={mechanicImageTextStyle}>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='huge'\n                  content={mechanic.name}\n                  style={{ color: \"white\" }}\n                />\n                <p>{t(\"In business since\")} {mechanic.yearOfStart}</p>\n                <p>\n                  {t(\"Posted by\")} <strong>{mechanic.publisher}</strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedHeader);\n","import { formatDistance } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Segment, Grid, Icon, List, Popup, Image, Label } from \"semantic-ui-react\";\nimport { IMechanic } from \"../../../app/models/mechanic\";\n\nconst MechanicDetailedInfo: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const { t } = useTranslation([\"mechanics\"]);\n\n  return (\n    <Segment.Group raised>\n      {mechanic.brands.length>0 && <Segment attached='top'>\n        <Label pointing='below'> <Icon name='trademark' />\n        {/* <img src={mechanic.photoUrl!} alt='Mechanic'/> */}\n        {' '} {t(\"Specialized in\")} {' '} {mechanic.brands.length} {' '} {t(\"brands\")}</Label>\n        <Grid>\n          <>\n            <Grid.Column width={1}>\n              <Icon size='large' color='teal' name='trademark' />\n            </Grid.Column>\n            <Grid.Column width={15}>\n              <List horizontal>\n                {mechanic.brands.map((brand: any) => (\n                  <List.Item key={brand.name}>\n                    <Popup\n                      header={brand.name}\n                      trigger={\n                        <Image\n                          size='mini'\n                          circular\n                          src={brand.logoUrl || \"/assets/user.png\"}\n                          bordered\n                        />\n                      }\n                    />\n                  </List.Item>\n                ))}\n              </List>\n            </Grid.Column>\n          </>\n        </Grid>\n      </Segment>}\n      <Segment attached>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{mechanic.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{t(\"In business since\")}: {mechanic.yearOfStart}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='address card' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {mechanic.city}, {mechanic.countryName}, {mechanic.address}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='tty' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{t(\"Phone number\")}: {mechanic.phone || t(\"Phone not available\")}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='envelope open' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {t(\"Email address\")}: {mechanic.email || t(\"Email address not available\")}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='internet explorer' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{t(\"Website\")}: {mechanic.website || t(\"Website not available\")}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n\n      <Segment attached='bottom'>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar check outline' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {t(\"Published\")}:{\" \"} \n              {formatDistance(new Date(mechanic.datePublished), new Date())}\n            </span>{\" \"}\n            {t(\"ago\")}\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedInfo);\n","import React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { Header, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n    mechanicId: string;\n}\nconst ConfirmDelete: React.FC<IProps> = ({ mechanicId }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { deleteMechanic } = rootStore.mechanicStore;\n  const { closeModal } = rootStore.modalStore;\n\n  const handleDeleteMechanic = (id: string) => {\n    deleteMechanic(id);\n    closeModal();\n    history.push(`/mechanics`);\n  };\n\n  const cancelDeleteMechanic = () => {\n    closeModal();\n  };\n  let history = useHistory();\n\n  const { t } = useTranslation([\"modals\"]);\n\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Header\n          as='h2'\n          content={t('Sure you want to do this (cannot undo)?')}\n          color='teal'\n          textAlign='center'\n        />\n\n        <Fragment>\n          <Button\n            fluid\n            onClick={() => handleDeleteMechanic(mechanicId)}\n            color='teal'\n            content={t('Yes, delete it!')}\n            floated='left'\n          />\n          <Button\n            fluid\n            onClick={() => cancelDeleteMechanic()}\n            content={t('No, cancel')}\n            floated='right'\n          />\n        </Fragment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ConfirmDelete;\n","import { observer } from \"mobx-react-lite\";\nimport React, {\n  Fragment,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Button, Item, Grid, GridColumn } from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ConfirmDelete from \"../modals/ConfirmDelete\";\n\nconst MechanicDetailedManager: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n  const { user } = rootStore.userStore;\n\n  const { t } = useTranslation([\"mechanics\"]);\n\n  const [managing, setManaging] = useState(false);\n\n  const {\n    isCustomer,\n    setCustomer,\n    setOpenCustomerForm,\n    openCustomerForm,\n    setCloseCustomerForm,\n  } = rootStore.mechanicStore;\n\n  const handleView = useCallback(\n    (localMechanic: any) => {\n      localMechanic.customers.forEach((customer: IMechanicCustomer) => {\n        if (user!.userName === customer.username) setCustomer(true);\n      });\n    },\n    [setCustomer, user]\n  );\n\n  useEffect(() => {\n    handleView(mechanic);\n    return () => {\n      setCustomer(false);\n      setCloseCustomerForm();\n    };\n  }, [handleView, mechanic, setCustomer, setCloseCustomerForm]);\n\n  const handleDeleteMechanic = (id: string) => {\n    openModal(<ConfirmDelete mechanicId={id} />);\n  };\n  const handleBecomeCustomer = () => {\n    setOpenCustomerForm();\n  };\n\n  const toggleManaging = () => {\n    setManaging(true);\n  };\n\n  return (\n    <Segment.Group>\n      <Segment clearing raised>\n        <Item>{mechanic.name}</Item>\n        {mechanic.publisherUsername !== user?.userName && (\n          <Fragment>\n            {!isCustomer && !openCustomerForm && (\n              <Button\n                onClick={() => {\n                  handleBecomeCustomer();\n                }}\n                color='instagram'\n                fluid\n              >\n                {t(\"Register As Customer\")}\n              </Button>\n            )}\n          </Fragment>\n        )}\n        {mechanic.publisherUsername === user?.userName &&\n          (!managing ? (\n            <Button onClick={toggleManaging} color='instagram' fluid>\n              {t(\"Manage mechanic\")}\n            </Button>\n          ) : (\n            <div className='ui three buttons'>\n              <Button\n                as={Link}\n                to={`/manageMechanic/${mechanic.id}`}\n                color='pink'\n                basic\n              >\n                {t(\"Edit\")}\n              </Button>\n\n              <Button\n                onClick={() => {\n                  handleDeleteMechanic(mechanic.id!);\n                }}\n                color='red'\n              >\n                {t(\"Delete\")}\n              </Button>\n\n              <Button\n                onClick={() => {\n                  setManaging(false);\n                }}\n              >\n                {t(\"Cancel\")}\n              </Button>\n            </div>\n          ))}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(MechanicDetailedManager);\n","import { formatDistance } from \"date-fns\";\n// import { toJS } from \"mobx\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Image,\n  Segment,\n} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\ninterface IProps {\n \n    customer: IMechanicCustomer\n    mechanic:IMechanic\n}\nconst ShowTestimonial: React.FC<IProps> = ({  customer, mechanic }) => {\n  const rootStore = useContext(RootStoreContext);\n\n//   console.log('customer', customer)\n//   console.log('mechanic', toJS(mechanic))\n\n  const { closeModal } = rootStore.modalStore;\n\n  return (\n    <Fragment>\n      <Container text>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          <Grid>\n           \n            <Grid.Column width={10}>\n           \n              <p>\n               \n                Published {\" \"}\n                {formatDistance(\n                  new Date(customer.testimonial?.dateAdded!),\n                  new Date()\n                )}{\" \"}\n                ago{\" \"}\n              </p>\n              <Header.Subheader as='h2' color='pink'>\n                <Link\n                  to={`/profile/${customer.username}`}\n                  onClick={() => closeModal()}\n                >\n                  by {customer.displayName}\n                </Link>\n              \n              </Header.Subheader>\n            </Grid.Column>\n            <Grid.Column width={3}>\n             \n              <Image src={mechanic.photoUrl} size='small' floated=\"left\"/>\n            </Grid.Column>\n           \n          </Grid>\n        </Segment>\n        <Segment>\n              <Image src={customer.image} size='tiny' circular floated=\"left\"/>\n         \n          \n              <p style={{ whiteSpace: 'pre-wrap' }}>{customer.testimonial?.text}</p>\n             \n         \n              <Button fluid onClick={() => closeModal()} content='Close' />\n         \n        </Segment>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default ShowTestimonial;\n","import { toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Segment,\n  List,\n  Item,\n  Image,\n  Grid,\n  Label,\n  Button,\n  Popup,\n} from \"semantic-ui-react\";\nimport { IMechanic, IMechanicCustomer } from \"../../../app/models/mechanic\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ShowTestimonial from \"../modals/ShowTestimonial\";\n\n\nconst MechanicDetailedSidebar: React.FC<{ mechanic: IMechanic }> = ({\n  mechanic,\n}) => {\n  const mechanicShop = toJS(mechanic);\n  const rootStore = useContext(RootStoreContext);\n\n  const { openModal } = rootStore.modalStore;\n\n  const { t } = useTranslation([\"mechanics\"]);\n\n\n  const handleShowTestimonial = (customer: IMechanicCustomer, mechanic:IMechanic) => {\n    openModal(<ShowTestimonial customer={customer} mechanic={mechanic}/>);\n  };\n  return (\n    <>\n      <Fragment>\n        <Segment\n          textAlign='center'\n          style={{ border: \"none\" }}\n          attached='top'\n          secondary\n          inverted\n          color='teal'\n        >\n          {mechanicShop.customers && mechanicShop.customers.length > 1 \n          ? mechanicShop.customers.length + t(\"People are customers\") : mechanicShop.customers.length + t(\"Person is customer\")}  \n           {t(\"of this shop\")}\n        </Segment>\n        <>\n          <List divided>\n            <Item.Group divided>\n              {mechanicShop.customers &&\n                mechanicShop.customers.map((customer) => (\n                  <Segment key={customer.username}>\n                    <Grid>\n                      <Grid.Column width={4}>\n                        <Image\n                          size='mini'\n                          circular\n                          src={customer.image || \"/assets/user.png\"}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={10}>\n                        <Link to={`/profile/${customer.username}`}>\n                          <Item.Extra as='h5'>\n                            {customer.displayName}\n                            {customer.customerRecommended && (\n                              <p style={{ color: \"green\" }}>{t(\"Recommending\")}</p>\n                            )}\n                          </Item.Extra>\n\n                          {customer.isOwner && (\n                            <Label\n                              style={{ position: \"top\" }}\n                              color='teal'\n                              corner='right'\n                            >\n                              {t(\"Owner\")}\n                            </Label>\n                          )}\n                        </Link>\n                      </Grid.Column>\n                      <Grid.Column width={2}>\n                        {customer.testimonial && (\n                        <Popup \n                          content={customer.displayName + t(\"'s testimony about\") + mechanic.name} \n                          className='computer large screen only'\n                          trigger={\n                            <Button\n                              circular\n                              icon='comment alternate'\n                              color='instagram'\n                              // className='hidePopup'\n                              onClick={() => \n                                handleShowTestimonial(customer, mechanic) \n                              }\n                            />\n                          }\n                        />\n                        )}\n                      </Grid.Column>\n                    </Grid>\n                  </Segment>\n                ))}\n            </Item.Group>\n          </List>\n        </>\n      </Fragment>\n    </>\n  );\n};\n\nexport default observer(MechanicDetailedSidebar);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport CustomerForm from \"../form/CustomerForm\";\nimport MechanicDetailedChat from \"./MechanicDetailedChat\";\nimport MechanicDetailedHeader from \"./MechanicDetailedHeader\";\nimport MechanicDetailedInfo from \"./MechanicDetailedInfo\";\nimport MechanicDetailedManager from \"./MechanicDetailedManager\";\nimport MechanicDetailedSidebar from \"./MechanicDetailedSidebar\";\n\ninterface DetailParams {\n  id: string;\n}\nconst MechanicDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { t } = useTranslation([\"mechanics\"]);\n\n  const [ready, setReady] = useState(false);\n\n  const {\n    mechanic,\n    loadMechanic,\n    loadingInitial,\n    openCustomerForm,\n    isCustomer,\n  } = rootStore.mechanicStore;\n\n  useEffect(() => {\n      loadMechanic(match.params.id);  \n      setReady(true)   \n  }, [loadMechanic, match.params.id]); \n\n  if (loadingInitial || !mechanic || !ready)\n    return <LoadingComponent content={t('Loading mechanic shop...')} />;\n\n  return (\n    <Grid>\n    \n      <Grid.Column computer={11} mobile={16} >\n        <MechanicDetailedHeader mechanic={mechanic} />\n        <MechanicDetailedManager mechanic={mechanic}/>\n         { openCustomerForm && <CustomerForm mechanicId={mechanic.id} />}\n        <MechanicDetailedInfo mechanic={mechanic} />\n       {isCustomer  && <MechanicDetailedChat />}\n      </Grid.Column>\n     \n      <Grid.Column computer={4} mobile={16} >\n        <MechanicDetailedSidebar mechanic={mechanic} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(MechanicDetails);\n","import { IComment } from \"./comment\";\n\nexport interface IMechanicsEnvelope {\n    mechanics: IMechanic[];\n    mechanicCount: number;\n}\nexport interface IMechanic {\n    id: string;\n    // author: string | null;\n    photoUrl: string | null;\n    name: string;\n    publisher: string;\n    publisherUsername: string;\n    owner: string;\n    description: string;\n    yearOfStart: string;//Date;\n    datePublished: string;// Date | undefined;\n    country: string;\n    countryName: string;\n    countryId: string;\n    city: string;\n    address: string;\n    email: string;\n    phone: string;\n    website: string;\n    commentMechanics: IComment[];\n    file: Blob;\n    customers: IMechanicCustomer[];\n    averageRating: string;\n    ratings: IRating[];\n    brands: any;\n\n}\n\nexport interface IRating {\n    username: string;\n    displayName: string;\n    score: string;\n}\n\nexport interface IMechanicCustomer {\n    username: string;\n    displayName: string;\n    image: string;\n    isOwner: boolean;\n    isCustomer: boolean;\n    customerRecommended: boolean;\n    testimonial?: IMechanicTestimonial;             \n}\nexport interface IMechanicCustomerToBecome {\n    mechanicId: string;\n    isCustomer: boolean;             \n}\n\nexport interface IMechanicTestimonial {\n    id: string;\n    text: string;\n    dateAdded: string;\n}\n\nexport interface IMechanicRate {\n    id: string;\n    score: string;\n}\nexport interface IMechanicRecommend {\n    mechanicId: string;\n    isRecommended: string;\n}\n\n\nexport class MechanicFromValues {\n    id?: string;\n    photoUrl: string = '';\n    name: string = '';\n    owner: string = '';\n    description: string = '';\n    yearOfStart: string = '';\n    datePublished: string = '';\n    country: string = '';\n    countryName: string= '';\n    countryId: string= '';\n    city: string = '';\n    address: string = '';\n    email: string= '';\n    phone: string= '';\n    website: string= '';\n    customers: IMechanicCustomer[];\n    file: Blob;\n    brands = [] ;\n\n\n\n    constructor(init?: MechanicFromValues ) {\n        if (init)\n        Object.assign(this, init);\n    }\n}","export const year = [\n    { key: '1990', text: '1990', value: '1990' },\n    { key: '1991', text: '1991', value: '1991' },\n    { key: '1992', text: '1992', value: '1992' },\n    { key: '1993', text: '1993', value: '1993' },\n    { key: '1994', text: '1994', value: '1994' },\n    { key: '1995', text: '1995', value: '1995' },\n    { key: '1996', text: '1996', value: '1996' },\n    { key: '1997', text: '1997', value: '1997' },\n    { key: '1998', text: '1998', value: '1998' },\n    { key: '1999', text: '1999', value: '1999' },\n    { key: '2000', text: '2000', value: '2000' },\n    { key: '2001', text: '2001', value: '2001' },\n    { key: '2002', text: '2002', value: '2002' },\n    { key: '2003', text: '2003', value: '2003' },\n    { key: '2004', text: '2004', value: '2004' },\n    { key: '2005', text: '2005', value: '2005' },\n    { key: '2006', text: '2006', value: '2006' },\n    { key: '2007', text: '2007', value: '2007' },\n    { key: '2008', text: '2008', value: '2008' },\n    { key: '2009', text: '2009', value: '2009' },\n    { key: '2010', text: '2010', value: '2010' },\n    { key: '2011', text: '2011', value: '2011' },\n    { key: '2012', text: '2012', value: '2012' },\n    { key: '2013', text: '2013', value: '2013' },\n    { key: '2014', text: '2014', value: '2014' },\n    { key: '2015', text: '2015', value: '2015' },\n    { key: '2016', text: '2016', value: '2016' },\n    { key: '2017', text: '2017', value: '2017' },\n    { key: '2018', text: '2018', value: '2018' },\n    { key: '2019', text: '2019', value: '2019' },\n    { key: '2020', text: '2020', value: '2020' },\n    { key: '2021', text: '2021', value: '2021' },\n    { key: '2022', text: '2022', value: '2022' },\n  ];","export const motoOptions = [\n    'Love & peace and safe riding' ,\n    'Take care of yourself and others' ,\n    'Drinking and riding - do in only never!' ,\n    'With a good wind in your face' ,\n    'Wave your hand to brothers and sisters <3' ,\n  ];","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectMultiple: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    multiple,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value || []}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n            search \n            selection\n            multiple={true}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectMultiple","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n  Label,\n} from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { MechanicFromValues } from \"../../../app/models/mechanic\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport { year } from \"../../../app/common/options/yearOptions\";\n\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n  createValidator,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport SelectMultiple from \"../../../app/common/form/SelectMultiple\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ownerOptions = [\n  { key: \"Owner\", text: \"Owner\", value: \"Owner\" },\n  { key: \"Customer\", text: \"Customer\", value: \"Customer\" },\n];\ninterface DetailParams {\n  id: string;\n}\nconst MechanicForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  history,\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createMechanic, editMechanic, submitting, loadMechanic } =\n    rootStore.mechanicStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const isValidEmail = createValidator(\n    (message) => (value) => {\n      if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        return message;\n      }\n    },\n    t(\"Invalid email address\")\n  );\n  const validate = combineValidators({\n    name: isRequired({ message: \"Name is required\" }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    // photoUrl: isRequired(\"Photo\"),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired( { message: t(\"City is required\") }),\n    address: isRequired( { message: t(\"Address is required\") }),\n    phone: composeValidators(\n      isNumeric({ message: t(\"Phone must be numeric value\") }),\n      isRequired({ message: t(\"Phone is required\") }),\n      hasLengthGreaterThan(8)({\n        message: t(\"Phone needs to be at least 9 characters\"),\n      })\n    )(),\n    email: isValidEmail(),\n    yearOfStart: isRequired({ message: t(\"Year of start is required\") }),\n    brands: isRequired({ message: t(\"Brand is required\") }),\n  });\n\n  const { user } = rootStore.userStore;\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const { loadBrandsToSelect, brands } = rootStore.brandStore;\n\n  const [mechanic, setMechanic] = useState(new MechanicFromValues());\n  const [loading, setLoading] = useState(false);\n\n  const [uploaded, setUploaded] = useState(false);\n\n  const [edited, setEdited] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n    loadBrandsToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n\n      setLoading(true);\n      setUploaded(true);\n      setEdited(true);\n\n      loadMechanic(match.params.id)\n        .then((mechanic) => {\n          setMechanic(new MechanicFromValues(mechanic));\n        })\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [\n    loadCountriesToSelect,\n    loadMechanic,\n    match.params.id,\n    loadBrandsToSelect,\n  ]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n    const { ...mechanic } = values;\n    let owner: boolean = values.owner === \"Owner\" ? true : false;\n    let customer = {\n      username: user?.userName,\n      displayName: user?.displayName,\n      image: user?.image,\n      isOwner: owner,\n      isCustomer: !owner,\n      customerRecommended: !owner,\n      testimonial: values.description,\n    };\n    if (!mechanic.id) {\n      let newMechanic = {\n        ...mechanic,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        publisherUsername: user?.userName,\n        customers: [customer],\n      };\n      createMechanic(newMechanic);\n      addFeedItem(newId, \"Added Mechanic\");\n    } else {\n      editMechanic(mechanic);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n\n  if (!ready) return <LoadingComponent content={t(\"Loading values...\")} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column\n          // width={10}\n          computer={10}\n          mobile={16}\n        >\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={mechanic}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  {editMode && <Label content={t(\"Name\")} />}\n\n                  <Field\n                    placeholder={t(\"Name\")}\n                    name='name'\n                    value={mechanic.name}\n                    component={TextInput}\n                  />\n\n                  {!editMode && (\n                    <Field\n                      name='owner'\n                      placeholder={t(\"Are you owner or customer of this shop?\")}\n                      options={ownerOptions}\n                      value={mechanic.owner}\n                      component={SelectInput}\n                    />\n                  )}\n                  {!editMode && (\n                    <Field\n                      name='brands'\n                      placeholder={t(\"What brands are you specialized in *\")}\n                      options={brands}\n                      multiple\n                      component={SelectMultiple}\n                    />\n                  )}\n\n                  {!editMode && (\n                    <Field\n                      name='countryName'\n                      placeholder={t(\"Country\")} //\n                      options={countries}\n                      component={SelectInput}\n                    />\n                  )}\n\n                  {!editMode && (\n                    <Field\n                      name='city'\n                      placeholder={t(\"City\")}\n                      value={mechanic.city}\n                      component={TextInput}\n                    />\n                  )}\n                  {editMode && <Label content={t(\"Address *\")} />}\n\n                  <Field\n                    placeholder={t(\"Address *\")}\n                    name='address'\n                    value={mechanic.address}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Phone *\")} />}\n\n                  <Field\n                    placeholder={t(\"Phone *\")}\n                    name='phone'\n                    value={mechanic.phone}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content='Email' />}\n\n                  <Field\n                    placeholder={t(\"Email\")}\n                    name='email'\n                    value={mechanic.email}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Website\")} />}\n\n                  <Field\n                    placeholder={t(\"Website\")}\n                    name='website'\n                    value={mechanic.website}\n                    component={TextInput}\n                  />\n                  {!editMode && (\n                    <Field\n                      name='yearOfStart'\n                      placeholder={t(\"Year of Start *\")}\n                      value={mechanic.yearOfStart}\n                      options={year}\n                      component={SelectInput}\n                    />\n                  )}\n                  {editMode && <Label content={t(\"Description\")} />}\n\n                  <Field\n                    name='description'\n                    raws={3}\n                    placeholder={t(\"Description\")}\n                    value={mechanic.description}\n                    component={TextAreaInput}\n                  />\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    positive\n                    floated='right'\n                    type='submit'\n                    content={toast(\"Submit\")}\n                  />\n                  <Button\n                    onClick={\n                      mechanic.id\n                        ? () => history.push(`/mechanics/${mechanic.id}`)\n                        : () => history.push(\"/mechanicForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t(\"Cancel\")}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{mechanic.name}</Header>\n              <Image size='large' bordered src={mechanic.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(MechanicForm);\n","import { IComment } from \"./comment\";\n\nexport interface IMotofyEnvelope {\n    motofies: IMotofy[];\n    motofyCount: number;\n    mostEmbraced: IMotofy;\n    highestRatedMotofy: IMotofy;\n}\nexport interface IMotofy {\n    id: string;\n    name: string;\n    publisherUsername: string;\n    publisherDisplayName: string;\n    brandId: string;\n    brandName: string;\n    brandLogoUrl: string;\n    model: string;\n    cubicCentimeters: string;\n    photoUrl?: string | null;\n    description?: string;\n    yearOfProduction?: string;// Date;\n    datePublished?: string;\n    city: string;\n\n    countryName: string;\n    countryId: string;\n\n    pricePaid: string;\n    estimatedValue: string;\n    numberOfKilometers: string; \n    embraced: boolean;\n    isOwner: boolean;\n    embracers: IEmbracer[];\n    commentMotofies: IComment[];\n    file: Blob;\n\n    motofyScores: any[];\n    averageRating: string;\n}\n\nexport interface IMotofyFormValues extends Partial<IMotofy>{//, Partial<IBrand> \n\n}\n\nexport class MotofyFormValues implements IMotofyFormValues {\n    id?: string = '';\n    name: string = '';\n    // brand: string= '';\n    brandId: string= '';\n    brandName: string= '';\n    model: string= '';\n    cubicCentimeters: string= '';\n    photoUrl: string  = '';\n    description: string= '';\n    yearOfProduction: string= '';\n    // datePublished?: Date = undefined;\n    datePublished?: string= '';\n    city: string= '';\n    countryName: string= '';\n    countryId: string= '';\n    pricePaid: string= '';\n    estimatedValue: string= '';\n    numberOfKilometers: string= '';\n    // file: IPhoto;\n    // brands?: IBrand[];\n\n    constructor(init?: MotofyFormValues ) {//, brandsToSelect?: IBrand[]\n        if (init ) {//&& brandsToSelect\n            // init.brands = brandsToSelect;\n        }\n        Object.assign(this, init);\n    }\n} \n\nexport interface IEmbracer {\n    username: string;\n    displayName: string;\n    image: string;\n    isOwner: boolean;\n    following?: boolean;\n}\n\nexport interface IRateMotofy {\n    id: string;\n    score: string | number | undefined;\n}\n\nexport interface IMotofyScore {\n    username: string | undefined;\n    displayName: string | undefined;\n    score: string | number | undefined;\n}\n\n","import React, { useContext, useEffect, useState } from \"react\"; \nimport {\n  Button,\n  Form,\n  Grid,\n  Segment,\n  Image,\n  Sticky,\n  Header,\n  Label,\n} from \"semantic-ui-react\";\nimport { MotofyFormValues } from \"../../../app/models/motofy\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nimport { year } from \"../../../app/common/options/yearOptions\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\n\n\nimport { toast } from \"react-toastify\";\n\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { useTranslation } from \"react-i18next\";\n\n\n\n\ninterface DetailParams {\n  id: string;\n}\nconst GalleryForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const {\n    createMotofy,\n    editMotofy,\n    submitting,\n    loadMotofy,\n  } = rootStore.motofyStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n  const motomoto = motoOptions[random];\n\n  const { loadBrandsToSelect, brands } = rootStore.brandStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n  const { addFeedItem } = rootStore.feedStore;\n\n  const { t } = useTranslation([\"forms\"]);\n  const validate = combineValidators({\n    name: isRequired({ message: \"Name is required\" }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    city: isRequired( { message: t(\"City is required\") }),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    model: isRequired( { message: t(\"Model is required\") }),\n    // pricePaid: composeValidators(\n    //   isNumeric(\"Price paid\"),\n    //   isRequired(\"Price paid\")\n    // )(),\n    cubicCentimeters: composeValidators(\n      isNumeric({ message: t(\"Power of engine must be numeric value\") }),\n      isRequired( { message: t(\"Power of engine is required\") })\n    )(),\n    yearOfProduction: isRequired({ message: t(\"Year of production is required\") }),\n    numberOfKilometers: composeValidators(\n      isNumeric({ message: t(\"Number of kilometers must be numeric value\") }),\n      isRequired({ message: t(\"Number of kilometers is required\") })\n    )(),\n    // estimatedValue: composeValidators(\n    //   isNumeric(\"Estimated valude\"),\n    //   isRequired(\"Estimated valude\")\n    // )(),\n  });\n\n  const [motofy, setMotofy] = useState(new MotofyFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n\n\n  const [uploaded, setUploaded] = useState(false);\n\n  const [edited, setEdited] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  //==proposal for AA001 bug==\n  useEffect(() => {\n    return () => {\n      history.goForward();\n    };\n  }, [history]);\n\n  useEffect(() => {\n    loadBrandsToSelect();\n    loadCountriesToSelect();\n    if (match.params.id) {\n      setEditMode(true);\n\n      setUploaded(true);\n      setLoading(true);\n      setEdited(true);\n      loadMotofy(match.params.id)\n        .then((motofy) => setMotofy(new MotofyFormValues(motofy)))\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [loadBrandsToSelect, loadCountriesToSelect, loadMotofy, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const { ...motofy } = values;\n    let newId = uuid();\n    if (!motofy.id) {\n      let newMotofy = {\n        ...motofy,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        isOwner: true,\n        motofyScores: [],\n      };\n\n      createMotofy(newMotofy); \n      addFeedItem(newId, \"Added Motofy\");\n    } else {\n      editMotofy(motofy);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n  \n  if (!ready) return <LoadingComponent content={t('Loading values...')} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded &&  (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={motofy}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                 {editMode && <Label content={t('Motorcycle name')}/>}\n                  <Field\n                    name='name'\n                    placeholder={t('Motorcycle name')}\n                    value={motofy.name}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Description')}/>}\n                  <Field\n                    placeholder={t('Description')}\n                    name='description'\n                    rows={3}\n                    value={motofy.description}\n                    component={TextAreaInput}\n                  />\n                    {editMode && <Label content={t('City')}/>}\n                  <Field\n                    placeholder={t('City')}\n                    name='city'\n                    value={motofy.city}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Country\")}/>}\n                  <Field\n                    placeholder={t(\"Country\")}\n                    name='countryName'\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  {!editMode && (\n                    <>\n                      <Field\n                        name='brandName'\n                        placeholder={t(\"Brand\")} //\n                        options={brands}\n                        component={SelectInput}\n                      />\n\n                      <Field\n                        name='model'\n                        placeholder={t('Model')}\n                        value={motofy.model}\n                        component={TextInput}\n                      />\n                      <Field\n                        name='cubicCentimeters'\n                        placeholder={t('Cubics')}\n                        value={motofy.cubicCentimeters}\n                        component={TextInput}\n                      />\n                      <Field\n                        name='yearOfProduction'\n                        placeholder={t('Year of production')}\n                        options={year}\n                        value={motofy.yearOfProduction}\n                        component={SelectInput}\n                      />\n                    </>\n                  )}\n                    {editMode && <Label content={t('Number of kilometers')}/>}\n                  <Field\n                    placeholder={t('Number of kilometers')}\n                    name='numberOfKilometers'\n                    value={motofy.numberOfKilometers}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Price paid')}/>}\n                  <Field\n                    placeholder={t('Price paid')}\n                    name='pricePaid'\n                    value={motofy.pricePaid}\n                    component={TextInput}\n                  />\n                    {editMode && <Label content={t('Estimated value')}/>}\n                  <Field\n                    placeholder={t('Estimated value')}\n                    name='estimatedValue'\n                    value={motofy.estimatedValue}\n                    component={TextInput}\n                  />\n                  {edited && (\n                    <Button\n                      loading={submitting}\n                      disabled={loading || invalid}\n                      positive\n                      floated='right'\n                      type='submit'\n                      content={t('Submit')}\n                    />\n                  )}\n                  {!edited && (\n                    <Button\n                      loading={submitting}\n                      disabled={loading || invalid || pristine}\n                      positive\n                      floated='right'\n                      type='submit'\n                      content={t('Submit')}\n                    />\n                  )}\n                  <Button\n                    onClick={\n                      motofy.id\n                        ? () => history.push(`/gallery/${motofy.id}`)\n                        : () => history.push(\"/galleryForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t('Cancel')}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motofy.name}</Header>\n              <Image size='large' bordered src={motofy.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(GalleryForm);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react'\nimport { RouteComponentProps, RouteProps, Route, Redirect } from 'react-router'\nimport { RootStoreContext } from '../stores/rootStore'\n\ninterface IProps extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>>\n\n}\n\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {isLoggedIn} = rootStore.userStore;\n\n    return (\n\n        <Route \n        {...rest}\n        render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to={'/'}/>}\n        />\n    )\n}\n\nexport default observer(PrivateRoute);","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Card, Label } from \"semantic-ui-react\";\nimport { IProduct } from \"../../../app/models/product\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst ProductListItem: React.FC<{ product: IProduct }> = ({ product }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    toogleActivate\n  } = rootStore.productStore;\n\n  const { t } = useTranslation([\"shop\"]);\n\n  const handleToogleActivate = () => {\n    toogleActivate(product.id, product)\n  }\n  \n  let descriptionUiShort;\n  if (product.description) {\n    descriptionUiShort = product.description.substring(0, 20);\n  }\n  // const productTitleUiShort = product.title.substring(0, 15);\n\n  const threeDots = \"...\";\n  return (\n    <Card raised>\n      <Card.Content>\n        <Card.Header style={{ textAlign: \"center\" }}>\n          {product.title.substring(0, 15)}\n        </Card.Header>\n        {product.isSold && (\n          <Label style={{ position: \"absolute\" }} color='red' corner='right'>\n            {t(\"SOLD\")}\n          </Label>\n        )}\n        {!product.isActive && (\n          <Label color='red' attached='top' style={{textAlign: 'center'}}>\n            {t(\"INACTIVE\")}\n          </Label>\n        )}\n        <div className='ui segment'>\n          <img\n            className='ui centered medium image'\n            src={product.photoUrl}\n            alt='Product'\n            \n          />\n        </div>\n\n        <Card.Content extra>\n          <span>{descriptionUiShort || \"Description N/A\"}</span>{\" \"}\n          <span>{threeDots}</span>\n        </Card.Content>\n        {product.isActive ?\n        <Button\n          as={Link}\n          to={`/product/${product.id}`}\n          fluid\n          content={t('View product')}\n          color='instagram'\n        /> :\n\n        <Button\n          onClick={()=> handleToogleActivate()}\n          fluid\n          content={t('Activate')}\n          color='instagram'\n        />\n        }\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default observer(ProductListItem);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductListItem from \"./ProductListItem\";\n\nconst ProductList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { productsByDate } = rootStore.productStore;\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <Card.Group itemsPerRow={4} stackable={true} doubling={true} centered>\n          {productsByDate.map((product) => (\n            <ProductListItem product={product} key={product.id} />\n          ))}\n        </Card.Group>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductList);\n","export const categories  = [\n    //hope to examine why - text and value both capitialized\n    { key: 'clothing', text: 'Clothing', value: 'Clothing' },\n    { key: 'equipment', text: 'Equipment', value: 'Equipment' },\n    { key: 'gear', text: 'Gear', value: 'Gear' },\n    { key: 'vehicle', text: 'Vehicle', value: 'Vehicle' },\n    { key: 'tools', text: 'Tools', value: 'Tools' },\n    { key: 'other', text: 'Other', value: 'Other' },\n    \n]","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Divider, Dropdown, Input, Menu } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { categories } from \"../../../app/common/options/productOptions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ProductFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.productStore;\n  const { countries, loadCountriesToSelect } = rootStore.countryStore;\n\n  const handleOnChangeCountry = (e: any, data: any) => {\n    setPredicate(\"country\", data.value);\n  };\n\n  const handleOnChangeCategory = (e: any, data: any) => {\n    setPredicate(\"category\", data.value);\n  };\n\n  const handleResultSelect = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  const { t } = useTranslation([\"shop\"]);\n\n  useEffect(() => {\n    loadCountriesToSelect();\n  }, [loadCountriesToSelect]);\n\n  const styles = {\n    textAlign: \"center\"\n  };\n  return (\n    <Fragment>\n      <Menu vertical size='large' style={{ width: \"100%\" }}>\n       \n        <Menu.Item active={predicate.has(\"search\")}>\n          <Input\n            icon='search'\n            placeholder={t('Search all')}\n            onKeyDown={(e: any) => handleResultSelect(e)}\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or')} />\n        <Menu.Item active={predicate.has(\"country\")}>\n          <Dropdown\n            fluid\n            placeholder={t('Search products by country')}\n            selection\n            floating\n            search\n            options={countries}\n            onChange={handleOnChangeCountry}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or')} />\n        <Menu.Item>\n          <Dropdown\n            fluid\n            placeholder={t('Search products by category')}\n            selection\n            floating\n            search\n            options={categories}\n            onChange={handleOnChangeCategory}\n            clearable\n          />\n        </Menu.Item>\n        <Divider horizontal content={t('or choose from built in filters')} />\n\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          style={ styles }\n          content={t(\"All Products\")}\n        />\n          <Menu.Item\n            active={predicate.has(\"iView\")}\n            onClick={() => setPredicate(\"iView\", \"true\")}\n            color={\"blue\"}\n            name={\"iView\"}\n            style={{ textAlign: \"center\" }}\n            content={t(\"Favorites\")}\n          />\n          <Menu.Item\n            active={predicate.has(\"myProducts\")}\n            onClick={() => setPredicate(\"myProducts\", \"true\")}\n            color={\"blue\"}\n            name={\"myProducts\"}\n            style={{ textAlign: \"center\" }}\n            content={t(\"My products\")}\n          />\n        <Menu.Item\n          active={predicate.has(\"iFollow\")}\n          onClick={() => setPredicate(\"iFollow\", \"true\")}\n          color={\"blue\"}\n          name={\"iFollow\"}\n          style={ styles }\n          content={t(\"By people I follow\")}\n        />\n        <Menu.Item\n          active={predicate.has(\"inActive\")}\n          onClick={() => setPredicate(\"inActive\", \"true\")}\n          color={\"blue\"}\n          name={\"inActive\"}\n          style={ styles }\n          content={t(\"Inactive products\")}\n        />\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default ProductFilters;\n","import React from \"react\";\nimport { Segment, Placeholder, Grid } from \"semantic-ui-react\";\nconst ProductListItemPlaceholder = () => {\n  return (\n    <Grid columns={4} stackable>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment raised>\n          <Placeholder style={{ height: 100, width: 100 }}>\n            <Placeholder.Line />\n            <Placeholder.Image />\n          </Placeholder>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\nexport default ProductListItemPlaceholder;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader, Sticky } from \"semantic-ui-react\";\nimport ProductList from \"./ProductList\";\n\n// import LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport ProductFilters from \"./ProductFilters\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ProductListItemPlaceholder from \"./ProductListItemPlaceholder\";\n\nconst ProductDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadProducts, loadingInitial, setPage, page, totalPages } = rootStore.productStore;\n\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadProducts().then(()=> {\n      setLoadingNext(false);\n    })\n  }\n\n  useEffect(() => {\n    loadProducts();\n  }, [loadProducts]);\n  \n  return (\n    <Grid>\n      {/* width={9} */}\n      <Grid.Column computer={11} mobile={16} >\n     { loadingInitial && page === 0 ? <ProductListItemPlaceholder/> :\n     <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n        <ProductList />\n        </InfiniteScroll>}\n      </Grid.Column>\n      <Grid.Column width={5}>\n        <Sticky className=\"mobile hidden\" style={{ marginRight: 30, position: \"fixed\" }}>\n          <ProductFilters />\n        </Sticky>\n      </Grid.Column>\n      <Grid.Column computer={9} mobile={16}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProductDashboard);\n","export interface IProductsEnvelope {\n  products: IProduct[];\n  productCount: number;\n}\n\nexport interface IProduct {\n  id: string;\n  sellerId: string;\n  sellerUsername: string;\n  sellerDisplayName: string;\n  title: string;\n  model: string;\n  description: string;\n  price: string;\n  brand: string;\n  category: string;\n  countryName: string;\n  countryId: string;\n  city: string;\n  phoneNumber: string;\n  isActive: boolean;\n  isSold: boolean;\n  isAdvertised: boolean;\n  numberSeen: number;\n  numberFollowed: number;\n  viewers: IProductViewer [];\n  datePublished: string;\n  dateActivated: Date;\n  advertisingEndDate?: Date;\n  inactivityExpirationDate: Date;\n  dateAdvertised: Date;\n  typeAdvertising: string;\n  photoUrl: string;\n  file: Blob;\n\n}\n\nexport interface IProductViewer {\n  dateStarted?: Date;\n  displayName: string;\n  image?: string;\n  username: string;\n}\n\nexport class ProductFormValues {\n  id: string;\n  sellerId: string = '';\n  sellerUsername: string = '';\n  title: string = '';\n  model: string = '';\n  description: string = '';\n  price: string = '';\n  brand: string = '';\n  category: string = '';\n  countryName: string;\n  countryId: string;\n  city: string = '';\n  phoneNumber: string = '';\n  isActive: boolean;\n  isAdvertised: boolean;\n  datePublished: string = '';\n  dateActivated: Date;\n  dateAdvertised: Date;\n  photoUrl: string = '';\n  file: Blob;\n\n\n  constructor(init?: ProductFormValues) {\n    if (init)\n      Object.assign(this, init);\n  }\n}\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n  Label,\n} from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { ProductFormValues } from \"../../../app/models/product\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\n\nimport { categories } from \"../../../app/common/options/productOptions\";\n\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n  isNumeric,\n} from \"revalidate\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DetailParams {\n  id: string;\n}\nconst ProductForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  history,\n  match,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n\n  const { createProduct, editProduct, submitting, loadProduct } =\n    rootStore.productStore;\n  const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n  const { user } = rootStore.userStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"forms\"]);\n\n  const validate = combineValidators({\n    title: isRequired({ message: t(\"Title is required\") }),\n    category: isRequired({ message: t(\"Category is required\") }),\n    description: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    countryName: isRequired({ message: t(\"Country is required\") }),\n    city: isRequired({ message: t(\"City is required\") }),\n    phoneNumber: composeValidators(\n      isNumeric({ message: t(\"Phone must be numeric value\") }),\n      // isRequired({ message: t(\"Phone is required\") }),\n      hasLengthGreaterThan(8)({\n        message: t(\"Phone needs to be at least 9 characters\"),\n      })\n    )(),\n    price: composeValidators(\n      isNumeric({ message: t(\"Price must be numeric value\") }),\n      isRequired({ message: t(\"Price is required\") })\n    )(),\n  });\n  const [product, setProduct] = useState(new ProductFormValues());\n  const [loading, setLoading] = useState(false);\n\n  const [uploaded, setUploaded] = useState(false);\n  const [edited, setEdited] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const [imageToUpload, setImageToUpload] = useState(null);\n\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n\n    if (match.params.id) {\n      setEditMode(true);\n      setLoading(true);\n      setUploaded(true);\n      setEdited(true);\n\n      loadProduct(match.params.id)\n        .then((product) => {\n          setProduct(new ProductFormValues(product));\n        })\n        .finally(() => setLoading(false));\n    }\n    setReady(true);\n  }, [loadCountriesToSelect, loadProduct, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    let newId = uuid();\n\n    const { ...product } = values;\n    if (product.brand === \"\") product.brand = \"Brand not asigned\";\n    if (product.model === \"\") product.model = \"Model not asigned\";\n\n    if (!product.id) {\n      let newProduct = {\n        ...product,\n        id: newId,\n        datePublished: new Date().toISOString(),\n        inactivityExpirationDate: new Date(\n          Date.now() + 1000 /*sec*/ * 60 /*min*/ * 60 /*hour*/ * 24 /*day*/ * 30\n        ),\n        file: imageToUpload,\n        photoUrl: previewImage,\n        sellerUsername: user?.userName,\n      };\n      createProduct(newProduct);\n      addFeedItem(newId, \"Added Product\");\n    } else {\n      editProduct(product);\n    }\n  };\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n  if (!ready) return <LoadingComponent content={t(\"Loading values...\")} />;\n\n  return (\n    <Grid>\n      {!uploaded && !editMode && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={product}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  {editMode && <Label content={t(\"Title\")} />}\n\n                  <Field\n                    placeholder={t(\"Title\")}\n                    name='title'\n                    value={product.title}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Price\")} />}\n                  <Field\n                    placeholder={t(\"Price\")}\n                    name='price'\n                    value={product.price}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Description\")} />}\n                  <Field\n                    placeholder={t(\"Description\")}\n                    name='description'\n                    rows={3}\n                    value={product.description}\n                    component={TextAreaInput}\n                  />\n\n                  {editMode && <Label content={t(\"Category\")} />}\n                  <Field\n                    placeholder={t(\"Category\")}\n                    name='category'\n                    options={categories}\n                    value={product.category}\n                    component={SelectInput}\n                  />\n\n                  {editMode && <Label content={t(\"Country\")} />}\n                  <Field\n                    placeholder={t(\"Country\")}\n                    name='countryName'\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  {editMode && <Label content={t(\"City\")} />}\n                  <Field\n                    placeholder={t(\"City\")}\n                    name='city'\n                    value={product.city}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Phone\")} />}\n                  <Field\n                    placeholder={t(\"Phone\")}\n                    name='phoneNumber'\n                    value={product.phoneNumber}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Model\")} />}\n                  <Field\n                    placeholder={t(\"Model\")}\n                    name='model'\n                    value={product.model}\n                    component={TextInput}\n                  />\n                  {editMode && <Label content={t(\"Brand\")} />}\n                  <Field\n                    placeholder={t(\"Brand\")}\n                    name='brand'\n                    value={product.brand}\n                    component={TextInput}\n                  />\n\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    positive\n                    floated='right'\n                    type='submit'\n                    content={t(\"Submit\")}\n                  />\n                  <Button\n                    onClick={\n                      product.id\n                        ? () => history.push(`/product/${product.id}`)\n                        : () => history.push(\"/productForm\")\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t(\"Cancel\")}\n                  />\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{product.title}</Header>\n              <Image size='large' bordered src={product.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(ProductForm);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Feed, Segment } from \"semantic-ui-react\";\nimport { IFeed } from \"../../../app/models/feed\";\n\nconst FeedListItem: React.FC<{ feed: IFeed }> = ({ feed }) => {\n  return (\n    <Segment.Group raised>\n\n      <Feed>\n        <Feed.Event>\n          <Feed.Label\n          >\n            <img\n              src={feed.notifierPhotoUrl || \"/assets/user.png\"}\n              alt='userPoto'\n            />\n          </Feed.Label>\n          <Feed.Content>\n            <Feed.Summary>\n              <Feed.User as={Link} to={`/profile/${feed.notifierUsername}`}>\n                {feed.notifierDisplayname} \n              </Feed.User>\n              {\" \"} \n              <Feed.Meta>{feed.info}</Feed.Meta>\n              {/* <Feed.Date>\n                {feed.dateTriggered}\n              </Feed.Date> */}\n            </Feed.Summary>\n          </Feed.Content>\n        </Feed.Event>\n      </Feed>\n    </Segment.Group>\n  );\n};\n\nexport default FeedListItem;\n\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext } from \"react\";\nimport { Item } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport FeedListItem from \"./FeedListItem\";\n\nconst FeedList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { feedByDate } = rootStore.feedStore;\n\n  return (\n    <Fragment>\n      {feedByDate.map(([gr, feeds]) => (\n        <Fragment key={gr}>\n            <Item.Group divided>\n              {feeds.map((feed:any) => (\n                <FeedListItem feed={feed} key={feed.id} />\n              ))}\n            </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(FeedList);\n","import React from \"react\";\nimport { Segment, Placeholder } from \"semantic-ui-react\";\nconst FeedListItemPlaceholder = () => {\n  return (\n    <Segment.Group raised>\n      <Segment>\n\n      <Placeholder fluid>\n        <Placeholder.Header image>\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Header>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n      </Placeholder>\n      </Segment>\n    </Segment.Group>\n  );\n};\nexport default FeedListItemPlaceholder;\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {  Grid, Loader} from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport FeedList from \"./FeedList\";\nimport FeedListItemPlaceholder from \"./FeedListItemPlaceholder\";\n\nconst FeedDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadFeed, loadingInitial, setPage, page, totalPages } =\n    rootStore.feedStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadFeed().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadFeed();\n  }, [loadFeed]);\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column mobile={16} computer={15}>\n        {loadingInitial && page === 0 ? (\n          <FeedListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <FeedList />\n          </InfiniteScroll>\n            )}\n        </Grid.Column>\n        <Grid.Column mobile={16} computer={15}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(FeedDashboard);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Image } from \"semantic-ui-react\";\nimport { IProfile } from \"../../../app/models/profile\";\n\nconst PeopleListItem: React.FC<{ member: IProfile }> = ({ member }) => {\n\n  const { t } = useTranslation([\"social\"]);\n\n \n  return (\n    // <Card as={Link} to={`/profile/${member.username}`}>\n    //     <Image src={member.image || '/assets/user.png'} size='tiny' circular/>\n    //     <Card.Content>\n    //       <Card.Header>{member.displayName || 'display name'}</Card.Header>\n    //     </Card.Content>\n    //     <Card.Meta>\n    //       {/* <div> */}\n    //         <Icon name='user' />\n    //         {member.followersCount} Followers\n    //       {/* </div> */}\n    //     </Card.Meta>\n    //   </Card>\n\n    <Card as={Link} to={`/profile/${member.username}`} raised>\n      <Card.Content>\n        <Image\n          floated='right'\n          size='mini'\n          src={member.image || \"/assets/user.png\"}\n        />\n        <Card.Header>{member.displayName || \"display name\"}</Card.Header>\n        <Card.Meta>{member.followersCount === 1 ? member.followersCount + t('Folower') : t('Followers')} </Card.Meta>\n        {member.following && (\n          <Card.Description style={{ color: \"green\" }}>\n            {t(\"Following\")}\n          </Card.Description>\n        )}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default PeopleListItem;\n\n\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Card, Grid, Input } from \"semantic-ui-react\"; //Button, Form, , Menu\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PeopleListItem from \"./PeopleListItem\";\n\n// import { Form as FinalForm, Field } from \"react-final-form\";\n// import TextInput from \"../../../app/common/form/TextInput\";\n\nconst PeopleList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { displayPeople, setPredicate } = rootStore.peopleStore;\n\n  const { t } = useTranslation([\"social\"]);\n\n  const [input, setInput] = useState(\"\"); \n\n  const handleSearchResults = (e: any) => {\n    if (e.key === \"Enter\") {\n      setPredicate(\"search\", e.target.value);\n      e.target.value = \"\";\n    }\n  };\n  //CHECK when redeployed\n  // const handleFinalFormSubmit = (values: any) => {\n  //   console.log(values);\n  // };\n\n  return (\n    <Grid>\n          <Grid.Column width={8}>\n            <Input\n              // icon='Search'\n              name='search'\n              // style={{ width: \"80%\" }}\n              fluid\n              placeholder={t('Search all')}\n              value={input}\n              onInput={(e: any) => setInput(e.target.value)}\n              onKeyDown={(e: any) => handleSearchResults(e)}\n            />\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Button\n              content={t('See all')}\n              fluid\n              // style={{ width: \"19%\" }}\n              floated='right'\n              // onClick={()=>setPredicate(\"search\", e.target.value)}\n              onClick={() => setPredicate(\"all\", \"true\")}\n            />\n          </Grid.Column>\n        {/* </Grid>\n    <Grid> */}\n      <Grid.Column width={16}>\n        {/* <Menu vertical size={\"large\"} style={{ width: \"100%\" }}> */}\n        {/* <FinalForm\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit }) => (\n              <Form onSubmit={handleSubmit}>\n                <Menu.Item\n                >\n                   <Field\n                  name='rating'\n                  placeholder='Search all...'\n                  component={TextInput}\n                  style={{ width: \"80%\" }}\n                  onInput={(e: any) => setInput(e.target.value)}\n                  onKeyDown={(e: any) => handleSearchResults(e)}\n                /> */}\n        \n\n        {/*\n                </Menu.Item>\n              </Form>\n            )}\n          />*/}\n        {/* </Menu>  */}\n        <Card.Group itemsPerRow={4} stackable={true} doubling={true}>\n          {displayPeople.map((member) => (\n            <PeopleListItem member={member} key={member.id} />\n          ))}\n        </Card.Group>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(PeopleList);\n","import React from 'react';\nimport { Segment, Placeholder, Grid } from 'semantic-ui-react';\nconst PeopleListItemPlaceholder = () => {\n\n\n  return (\n    <Grid columns={4} stackable>\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n\n    <Grid.Column>\n      <Segment raised>\n        <Placeholder>\n          <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line length='medium' />\n            <Placeholder.Line length='short' />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      </Segment>\n    </Grid.Column>\n  </Grid>\n    \n  );\n};\nexport default PeopleListItemPlaceholder;\n\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {  Grid, Loader} from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport PeopleList from \"./PeopleList\";\nimport PeopleListItemPlaceholder from \"./PeopleListItemPlaceholder\";\n\nconst PeopleDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadPeople, loadingPeople, setPage, page, totalPages, cleanPeople } =//, cleanPeople\n    rootStore.peopleStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadPeople().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, [loadPeople]);\n\n  useEffect(() => {\n    return () => {\n      cleanPeople()\n    };\n  }, [cleanPeople]);\n\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column mobile={16} computer={16}>\n        {loadingPeople && page === 0 ? (\n          <PeopleListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <PeopleList />\n          </InfiniteScroll>\n          )}\n        </Grid.Column>\n        <Grid.Column mobile={16} computer={15}>\n          <Loader active={loadingNext} />\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PeopleDashboard);\n","export const mood = [\n    { key: 'Enthusiastic', text: 'Enthusiastic', value: 'Enthusiastic' },\n    { key: 'Happy', text: 'Happy', value: 'Happy' },\n    { key: 'Relaxed', text: 'Relaxed', value: 'Relaxed' },\n    { key: 'Concerned', text: 'Concerned', value: 'Concerned' },\n    { key: 'Tired', text: 'Tired', value: 'Tired' }\n  ];\n","export const weather = [\n    { key: 'Partly Cloudy', text: 'Partly Cloudy', value: 'Partly Cloudy' },\n    { key: 'Cloudy', text: 'Cloudy', value: 'Cloudy' },\n    { key: 'Rainy', text: 'Rainy', value: 'Rainy' },\n    { key: 'Stormy', text: 'Stormy', value: 'Stormy' },\n    { key: 'Sunny', text: 'Sunny', value: 'Sunny' },\n  ];","export const road = [\n    { key: 'Poor', text: 'Poor', value: 'Poor' },\n    { key: 'Not bad', text: 'Not bad', value: 'Not bad' },\n    { key: 'Decent', text: 'Decent', value: 'Decent' },\n    { key: 'Very good', text: 'Very good', value: 'Very good' },\n    { key: 'Excellent', text: 'Excellent', value: 'Excellent' },\n  ];","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Segment,\n  Sticky,\n  Image,\n} from \"semantic-ui-react\";\nimport { DiaryEntryFormValues } from \"../../../app/models/activity\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport { mood } from \"../../../app/common/options/moodOptions\";\nimport { motoOptions } from \"../../../app/common/options/motoOptions\";\nimport { weather } from \"../../../app/common/options/weatherOptions\";\nimport { road } from \"../../../app/common/options/roadOptions\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport {\n  combineValidators,\n  composeValidators,\n  hasLengthGreaterThan,\n  isRequired,\n} from \"revalidate\";\nimport { toast } from \"react-toastify\";\nimport PhotoUploadWidget from \"../../../app/common/photoUpload/PhotoUploadWidget\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\ninterface DetailParams {\n  id: string;\n  activityId: string;\n}\n\nconst DiaryEntryForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    submitting,\n    loadActivity,\n    createDiaryEntry,\n    loadDiaryEntry,\n    editDiaryEntry,\n    // ,\n  } = rootStore.activityStore;\n\n  // const { addFeedItem } = rootStore.feedStore;\n  const { loadCountriesToSelect, countries } = rootStore.countryStore;\n\n  const random = Math.floor(Math.random() * motoOptions.length);\n\n  const motomoto = motoOptions[random];\n\n  const { t } = useTranslation([\"diaries\"]);\n  const validate = combineValidators({\n    locationCity: isRequired({ message: t(\"The location city is required\")}),\n    locationCountry: isRequired({ message: t(\"The location country is required\") }),\n    body: composeValidators(\n      isRequired({ message: t(\"Description is required\") }),\n      hasLengthGreaterThan(4)({\n        message: t(\"Description needs to be at least 5 characters\"),\n      })\n    )(),\n    mood: isRequired({ message: \"The mood is required\" }),\n  });\n\n  const [diaryEntry, setdiaryEntry] = useState(new DiaryEntryFormValues());\n  const [loading, setLoading] = useState(false);\n\n  //===PHOTO UPLOAD===\n  let image: any;\n  const [previewImage, setPreviewImage] = useState();\n  const [imageToUpload, setImageToUpload] = useState(null);\n  const [uploaded, setUploaded] = useState(false);\n\n  const setPreview = (imageToSet: any) => {\n    Object.assign(image, {\n      preview: URL.createObjectURL(imageToSet),\n    });\n    setPreviewImage(image.preview);\n  };\n\n  const handleUploadImage = (photo: any) => {\n    setImageToUpload(photo);\n    image = photo;\n    setPreview(photo);\n    setUploaded(true);\n    toast.info(t(\"Your image is uploaded, please give us more details\"));\n  };\n\n  const [edited, setEdited] = useState(false);\n\n  const [activity, setActivity] = useState();\n\n  useEffect(() => {\n    loadCountriesToSelect();\n\n    loadActivity(match.params.activityId)\n      .then((activity) => setActivity(activity))\n      .finally(() => setLoading(false));\n\n    if (match.path === \"/manageDiaryEntry/:id/:activityId\") {\n      // console.log(\"match\", match);\n      loadDiaryEntry(match.params.id)\n        .then((diaryEntry) => setdiaryEntry(diaryEntry!))\n        .finally(() => setLoading(false));\n      setEdited(true);\n      setUploaded(true);\n\n    }\n  }, [\n    loadActivity,\n    match,\n    match.path,\n    match.params.id,\n    loadCountriesToSelect,\n    loadDiaryEntry,\n  ]);\n\n\n  const handleFinalFormSubmit = (values: any) => {\n    let uiId = uuid();\n    if (match.path === \"/createDiaryEntry/:activityId\") {\n      let newDiaryEntry = {\n        ...values,\n        id: uiId,\n        entryDate: new Date(),\n        file: imageToUpload,\n        photoUrl: previewImage,\n      };\n      createDiaryEntry(newDiaryEntry, activity!);\n \n    } else {\n      let newDiaryEntry = {\n        ...values,\n        activityId: match.params.activityId,\n      };\n\n      editDiaryEntry(newDiaryEntry, activity!);\n    }\n\n  };\n\n  return (\n    <Grid>\n      {!uploaded && (\n        <Grid.Column width={16}>\n          <Segment>\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploaded}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && (\n        <Grid.Column computer={10} mobile={16}>\n          <Segment clearing>\n            <FinalForm\n              validate={validate}\n              initialValues={diaryEntry}\n              onSubmit={handleFinalFormSubmit}\n              render={({ handleSubmit, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} loading={loading}>\n                  <Field\n                    name='body'\n                    placeholder={t('What happened today?')}\n                    rows={5}\n                    component={TextAreaInput}\n                  />\n                  <Field\n                    name='mood'\n                    placeholder={t('What is your mood today?')}\n                    options={mood}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='weather'\n                    placeholder={t('What is weather like today?')}\n                    options={weather}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='road'\n                    placeholder={t('What is road like')}\n                    options={road}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='locationCountry'\n                    placeholder={t(\"Country you are in\")} //\n                    options={countries}\n                    component={SelectInput}\n                  />\n                  <Field\n                    name='locationCity'\n                    placeholder={t('City you are in')}\n                    component={TextInput}\n                  />\n                  <Field\n                    name='numberOfKilometers'\n                    placeholder={t('Number of kilometers')}\n                    component={TextInput}\n                  />\n                  <Button\n                    loading={submitting}\n                    disabled={loading || invalid || pristine}\n                    floated='right'\n                    positive\n                    type='submit'\n                    content={t('Submit')}\n                  ></Button>\n                  <Button\n                    onClick={() =>\n                      history.push(`/activities/${match.params.activityId}`)\n                    }\n                    disabled={loading}\n                    floated='right'\n                    type='button'\n                    content={t('Cancel')}\n                  ></Button>\n                </Form>\n              )}\n            />\n          </Segment>\n        </Grid.Column>\n      )}\n      {uploaded && !edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>{motomoto}</Header>\n              <Image size='large' bordered src={previewImage} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n      {uploaded && edited && (\n        <Grid.Column width={6}>\n          <Sticky style={{ marginRight: 30, position: \"fixed\" }}>\n            <Segment>\n              <Header as='h2'>\n                {diaryEntry.locationCity}\n              </Header>\n              <Image size='large' bordered src={diaryEntry.photoUrl} />\n            </Segment>\n          </Sticky>\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n};\n\nexport default observer(DiaryEntryForm);\n","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport { Grid, Image, Container } from \"semantic-ui-react\";\nimport { formatDistance } from \"date-fns\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { IPrivateMessage } from \"../../app/models/privatemessages\";\n\nconst PrivateMessageThreadList = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    messagesByThreadId,\n     markReadInDB,\n    setInitialView,\n    setView,\n    createHubConnection,\n  } = rootStore.privateMessageStore;\n\n  useEffect(() => {\n    setInitialView();\n  }, [setInitialView]);\n\n  const markRead = (messages: IPrivateMessage[]) => {\n    messages.forEach((m) => {\n      if (m.senderUsername !== user?.userName && m.dateRead === null) {\n        // console.log(toJS(m));\n        markReadInDB(m.id);\n      }\n    });\n  };\n\n  // getSenderPhoto();\n  // const getSenderPhoto =()=> {\n  //   messagesByThreadId.map(([id, message]) => {\n  //     console.log(toJS(message[0]))\n  //   })\n  // }\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column width={16}>\n          {messagesByThreadId.map(([id, messages]) => (\n            <Container\n              key={id}\n              style={{ backgroundColor: \"lightblue\", paddingTop: \"3em\" }}\n            >\n              <Grid\n                onClick={() => {\n                  markRead(messages);\n                  setView(messages[0].privateMessageThreadId);\n                  createHubConnection(messages[0].privateMessageThreadId);\n                }}\n                divided\n                style={{ cursor: \"pointer\" }}\n              >\n                <Grid.Column\n                  mobile={16}\n                  className='mobile only'\n                  style={{ padding: \"0px\", margin: \"0px\" }}\n                >\n                  <img\n                    className='ui centered medium image'\n                    style={{ borderRadius: \"50%\" }}\n                    width={\"40px\"}\n                    src={messages[0].senderPhotoUrl || \"/assets/user.png\"}\n                    alt='sender'\n                  />\n                </Grid.Column>\n\n                <Grid.Column computer={4} className='mobile hidden'>\n                  <Image\n                    size='mini'\n                    circular\n                    verticalAlign='middle'\n                    src={messages[0].senderPhotoUrl || \"/assets/user.png\"}\n                  />\n                  <span>\n                    {\" \"}\n                    {messages[0].senderUsername === user?.userName\n                      ? \"Me\"\n                      : messages[0].senderDisplayName}\n                  </span>\n                </Grid.Column>\n                <Grid.Column width={12} className='mobile hidden'>\n                  <Grid.Row\n                    style={\n                      // unreadPrivateMessages > 0 &&\n\n                      messages[0].dateRead === null &&\n                      messages[0].senderUsername !== user?.userName\n                        ? { fontWeight: \"bold\", color: \"rgb(211, 81, 21)\" }\n                        : { fontWeight: \"normal\" }\n                    }\n                  >\n                    <span>\n                      {formatDistance(\n                        new Date(messages[0].dateSent),\n                        new Date(),\n                        {\n                          addSuffix: true,\n                        }\n                      )}\n                    </span>\n\n                    <Grid.Row>\n                      {messages[0].content.substring(0, 18)}...\n                    </Grid.Row>\n                  </Grid.Row>\n                </Grid.Column>\n              </Grid>\n            </Container>\n          ))}\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PrivateMessageThreadList);\n","import React, { Fragment, useCallback, useContext, useEffect } from \"react\";\nimport {\n  Segment,\n  Image,\n  Grid,\n  GridColumn,\n  GridRow,\n  // TextArea,\n} from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { IPrivateMessage } from \"../../app/models/privatemessages\";\n// import { toJS } from \"mobx\";\n\nconst PrivateMessageThreadListItem = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  // let formattedUser: any = user;\n\n  const {\n    // setRecipient,\n    // setMessageThreadId,\n    listOfMessagesInFocus,\n    markReadInDB,\n    // setUsername,\n    createHubConnection,\n    stopHubConnection,\n    // setReply,\n    // addReply,\n    // // unreadPrivateMessages\n  } = rootStore.privateMessageStore;\n\n  const userStyles = {\n    fontWeight: \"normal\",\n    borderRadius: \"20px\",\n    border: \"solid 1px\",\n    color: \"rgb(29, 115, 152)\",\n    width: \"97%\",\n    marginTop: \"20px\",\n    backgroundColor: \"lightblue\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    marginLeft: \"1rem\",\n  };\n  const senderStyles = {\n    fontWeight: \"normal\",\n    borderRadius: \"20px\",\n    border: \"solid 1px\",\n    color: \"black\",\n    width: \"97%\",\n    marginTop: \"20px\",\n    backgroundColor: \"inherit\",\n  };\n\n  // const [input, setInput] = useState(\"\");\n\n  // const handleSendReply = (e: any) => {\n  //   if (e.key === \"Enter\") {\n  //     e.target.value = \"\";\n  //     console.log(e);\n  //     if (input === \"\") {\n  //       console.log(\"need to validate\");\n  //     } else {\n  //       setInput(\"\");\n  //       handleSetRecipient();\n  //       setMessageThreadId(listOfMessagesInFocus![0]);\n  //       setReply(input);\n  //       setUsername(user?.userName!);\n  //       addReply();\n  //     }\n  //   }\n  // };\n\n  // const handleSetRecipient = () => {\n  //   if (listOfMessagesInFocus![1][0].senderUsername === user?.userName) {\n  //     setRecipient(listOfMessagesInFocus![1][0].recipientUsername!, user?.image);\n  //   } else {\n  //     setRecipient(listOfMessagesInFocus![1][0].senderUsername!, user?.image);\n  //   }\n  // };\n\n  const markRead = useCallback((messages: IPrivateMessage[]) => {\n    messages.forEach((m) => {\n      if (m.senderUsername !== user?.userName && m.dateRead === null) {\n        markReadInDB(m.id);\n      }\n    });\n  }, [markReadInDB, user]);\n\n  // const markRead = (messages: IPrivateMessage[]) => {\n  //   messages.forEach((m) => {\n  //     if (m.senderUsername !== user?.userName && m.dateRead === null) {\n  //       markReadInDB(m.id);\n  //     }\n  //   });\n  // };\n\n  useEffect(() => {\n    createHubConnection(listOfMessagesInFocus![0]);\n    markRead(listOfMessagesInFocus![1]);\n    // return () => {\n    //   stopHubConnection(listOfMessagesInFocus![0]);\n    // };\n  }, [createHubConnection, stopHubConnection, listOfMessagesInFocus, markRead]);\n\n  return (\n    <>\n      <Segment\n        className='scrollRevert'\n        style={{ height: \"70vh\", width: \"100%\" }}\n      >\n        {listOfMessagesInFocus![1].map((message: IPrivateMessage) => (\n          <Fragment key={message.id}>\n            {message.senderUsername !== user?.userName && (\n              <Grid\n                key={message.id}\n                style={senderStyles}\n                textAlign='left'\n                floated='left'\n              >\n                <GridRow className='mobile hidden'>\n                  <GridColumn width={2}>\n                    <Image\n                      size='mini'\n                      circular\n                      verticalAlign='middle'\n                      src={message.senderPhotoUrl || \"/assets/user.png\"}\n                    />\n                  </GridColumn>\n\n                  <GridColumn width={14}>{message.content}</GridColumn>\n                </GridRow>\n                <GridRow\n                  only={\"mobile\"}\n                  style={{\n                    fontSize: \"smaller\",\n                    paddingTop: \".3rem\",\n                    paddingBottom: \".3rem\",\n                  }}\n                >\n                  <GridColumn width={14}>{message.content}</GridColumn>\n                </GridRow>\n              </Grid>\n            )}\n            {message.senderUsername === user?.userName && (\n              <div>\n                <Grid style={userStyles} textAlign='right' floated='right'>\n                  <GridRow className='mobile hidden'>\n                    <GridColumn width={14}>{message.content}</GridColumn>\n                    <GridColumn width={2}>\n                      <Image\n                        size='mini'\n                        circular\n                        verticalAlign='middle'\n                        src={message.senderPhotoUrl || \"/assets/user.png\"}\n                      />\n                    </GridColumn>\n                  </GridRow>\n                  <GridRow\n                    only={\"mobile\"}\n                    style={{\n                      fontSize: \"smaller\",\n                      paddingTop: \".3rem\",\n                      paddingBottom: \".3rem\",\n                    }}\n                  >\n                    <GridColumn width={14}>{message.content}</GridColumn>\n                  </GridRow>\n                </Grid>\n              </div>\n            )}\n          </Fragment>\n        ))}\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(PrivateMessageThreadListItem);\n","import React, { useContext, useLayoutEffect, useRef, useState } from \"react\";\n// import { TextArea } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useTranslation } from \"react-i18next\";\nimport Picker from \"emoji-picker-react\";\nimport { Form, Grid, GridColumn, GridRow, Icon, TextArea } from \"semantic-ui-react\";\n\nconst PrivateMessageReply = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n\n  const {\n    setRecipient,\n    setMessageThreadId,\n    listOfMessagesInFocus,\n    setUsername,\n    setReply,\n    addReply,\n  } = rootStore.privateMessageStore;\n\n  const tAreatyles = {\n    width: \"100%\",\n    borderRadius: \"10px\",\n    border: \"none\",\n    fontSize: \"18px\",\n    marginTop: \"8px\",\n  };\n\n  const { t } = useTranslation([\"social\"]);\n  // const [chosenEmoji, setChosenEmoji] = useState<any>(null);\n\n  // const onEmojiClick = (event:any, emojiObject:any) => {\n  //   setChosenEmoji(emojiObject);\n  // };\n\n  // const [input, setInput] = useState(\"\");\n  // const [inputStr, setInputStr] = useState(\"\");\n  const [showPicker, setShowPicker] = useState(false);\n\n  \n\n  // const areaHeight = 16;\n  const MIN_TEXTAREA_HEIGHT = 16;\n\n\n  const textareaRef = useRef<any>(null);\n  const [value, setValue] = useState(\"\");\n  const onChange = (event:any) => setValue(event.target.value);\n\n  const onEmojiClick = (event: any, emojiObject: any) => {\n    setValue((prevInput) => prevInput + emojiObject.emoji);\n    setShowPicker(false);\n  };\n  \n  useLayoutEffect(() => {\n    // Reset height - important to shrink on delete\n    textareaRef.current.style.height = \"inherit\";\n    // Set height\n    textareaRef.current.style.height = `${Math.max(\n      textareaRef.current.scrollHeight,\n      MIN_TEXTAREA_HEIGHT\n    )}px`;\n  }, [value]);\n\n\n\n  const handleSendReply = (e: any) => {\n    if (e.key === \"Enter\") {\n      e.target.value = \"\";\n      console.log('value:::', value)\n      // console.log(e.target.value);\n      // console.log(inputStr);\n      if (value === \"\") {\n        console.log(\"need to validate\");\n      } else {\n        e.preventDefault();\n        setValue(\"\");\n        handleSetRecipient();\n        setMessageThreadId(listOfMessagesInFocus![0]);\n        setReply(value);\n        setUsername(user?.userName!);\n        addReply();\n      }\n    }\n  };\n\n  const handleSetRecipient = () => {\n    if (listOfMessagesInFocus![1][0].senderUsername === user?.userName) {\n      setRecipient(\n        listOfMessagesInFocus![1][0].recipientUsername!,\n        user?.image\n      );\n    } else {\n      setRecipient(listOfMessagesInFocus![1][0].senderUsername!, user?.image);\n    }\n  };\n\n  return (\n    // <TextArea\n    //   autoFocus\n    //   value={input}\n    //   placeholder={t('Reply')}\n    //   name='reply'\n    //   onInput={(e: any) => setInput(e.target.value)}\n    //   onKeyDown={(e: any) => handleSendReply(e)}\n    //   style={tAreatyles}\n    // />\n    // <div className=\"app\">\n    // <h3>Add Emoji Picker</h3>\n    <Grid>\n      <GridRow>\n        {/* <GridColumn width={2}>\n          <Icon name=\"smile outline\" size=\"big\" onClick={() => setShowPicker((val) => !val)}/>\n          \n        </GridColumn> */}\n        <GridColumn width={16}>\n          \n        <Form>\n          <textarea\n            ref={textareaRef}\n            autoFocus\n            placeholder={t(\"Reply\")}\n            // value={inputStr}\n            // onChange={(e) => setInputStr(e.currentTarget.value)}\n            onKeyDown={(e: any) => handleSendReply(e)}\n            onChange={onChange}\n            style={{\n              minHeight: MIN_TEXTAREA_HEIGHT,\n              resize: \"none\"\n            }}\n            value={value}\n           \n          />\n          <img\n            className='emoji-icon'\n            src='https://icons.getbootstrap.com/assets/icons/emoji-smile.svg'\n            onClick={() => setShowPicker((val) => !val)}\n          />\n          {showPicker && (\n            <Picker\n              pickerStyle={{ width: \"100%\", marginTop:\"-380px\" }}\n              onEmojiClick={onEmojiClick}\n              // native\n            />\n          )}\n        </Form>\n        </GridColumn>\n      </GridRow>\n    </Grid>\n\n    // <div className=\"picker-container\">\n    //   <input\n    //     className=\"input-style\"\n    //     placeholder={t('Reply')}\n    //     value={inputStr}\n    //     onChange={e => setInputStr(e.target.value)}\n    //     onKeyDown={(e: any) => handleSendReply(e)}/>\n    //   <img\n    //     className=\"emoji-icon\"\n    //     src=\"https://icons.getbootstrap.com/assets/icons/emoji-smile.svg\"\n    //     onClick={() => setShowPicker(val => !val)} />\n    //   {showPicker && <Picker\n    //     pickerStyle={{ width: '100%' }}\n    //     onEmojiClick={onEmojiClick} />}\n    // </div>\n  );\n};\n\nexport default observer(PrivateMessageReply);\n{\n  /* </div> */\n}\n","import React, { Fragment } from 'react';\nimport { Segment,  Placeholder } from 'semantic-ui-react';\nconst PrivateMessagesListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid >\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header >\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default PrivateMessagesListItemPlaceholder;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Segment } from \"semantic-ui-react\"; //, Loader\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PrivateMessageThreadList from \"./PrivateMessageThreadList\";\nimport PrivateMessageThreadListItem from \"./PrivateMessageThreadListItem\";\nimport PrivateMessageReply from \"./PrivateMessageReply\";\nimport PrivateMessagesListItemPlaceholder from \"./PrivateMessagesListItemPlaceholder\";\n\nconst PrivateMessagesDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadMessages, loadingInitial, setPage, page, totalPages, listOfMessagesInFocus } =\n    rootStore.privateMessageStore;\n\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadMessages().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadMessages();\n  }, [loadMessages]);\n\n  return (\n    <Segment\n      style={{ backgroundColor: \"lightblue\" }}\n      raised\n      // className='sideScroll'\n    >\n      <Grid style={{ margin: \"0\", padding: \"0\" }}>\n        {loadingInitial && page === 0 ? (\n          <Grid.Row>\n            <Grid.Column width={16}>\n              <PrivateMessagesListItemPlaceholder />\n            </Grid.Column>\n          </Grid.Row>\n        ) : (\n          <Grid.Row>\n            <Grid.Column width={4}>\n              <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && page + 1 < totalPages}\n                initialLoad={false}\n              >\n                <PrivateMessageThreadList />\n              </InfiniteScroll>\n            </Grid.Column>\n              \n            <Grid.Column width={12}>\n            <Grid.Row>\n              {listOfMessagesInFocus && <PrivateMessageThreadListItem />}\n            {/* </Grid.Column> */}\n            </Grid.Row>\n            <Grid.Row>\n\n            {/* <Grid.Column width={12}> */}\n              <PrivateMessageReply/>\n            </Grid.Row>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(PrivateMessagesDashboard);\n","import { useLocation } from \"react-router-dom\";\n\nexport default function useQuery() {\n    return new URLSearchParams(useLocation().search);\n}","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport useQuery from \"../../app/common/util/hooks\";\n\nconst RegisterSuccess = () => {\n  const email = useQuery().get(\"email\") as string;\n  const { t } = useTranslation([\"forms\"]);\n\n  function handleConfirmEmailResend() {\n    agent.User.resendVerifyEmailConfirm(email)\n      .then(() => {\n        toast.success(t(\"Verification email resent - please check your email\"));\n      })\n      .catch((error) => console.log(error));\n  }\n\n  return (\n    <Segment placeholder textAlign='center'>\n      <Header icon color='green'>\n        <Icon name='check' />\n        {t(\"Successfully registered!\")}\n      </Header>\n      <p>\n        {t(\"Please check your email (including junk email) for the verification email\")}\n      </p>\n      {email && (\n        <>\n          <p>{t(\"Didn't receive the email? Click the below button to resend\")}</p>\n          <Button\n            primary\n            onClick={handleConfirmEmailResend}\n            content={t('Resend email')}\n            size='huge'\n          />\n        </>\n      )}\n    </Segment>\n  );\n};\n\nexport default RegisterSuccess;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport agent from '../../app/api/agent';\nimport { Button, Segment, Header, Icon } from 'semantic-ui-react';\nimport LoginForm from './LoginForm';\nimport { toast } from 'react-toastify';\nimport useQuery from '../../app/common/util/hooks';\nimport { useTranslation } from 'react-i18next';\n\nconst VerifyEmail = () => {\n    const email = useQuery().get('email') as string;\n    const token = useQuery().get('token') as string;\n\n  const rootStore = useContext(RootStoreContext);\n  const Status = {\n    Verifying: 'Verifying',\n    Failed: 'Failed',\n    Success: 'Success',\n  };\n\n  const [status, setStatus] = useState(Status.Verifying);\n  const { openModal } = rootStore.modalStore;\n  const { t } = useTranslation([\"forms\"]);\n\n  useEffect(() => {\n    agent.User.verifyEmail(token as string, email as string)\n      .then(() => {\n        setStatus(Status.Success);\n      })\n      .catch(() => {\n        setStatus(Status.Failed);\n      });\n  }, [Status.Failed, Status.Success, token, email]);\n\n  const handleConfirmEmailResend = () => {\n    agent.User.resendVerifyEmailConfirm(email as string)\n      .then(() => {\n        toast.success(t('Verification email resent - please check your email'));\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getBody = () => {\n    switch (status) {\n      case Status.Verifying:\n        return <p>{t(\"Verifying...\")}</p>;\n      case Status.Failed:\n        return (\n          <div className='center'>\n            <p>\n              {t(\"Verication failed - you can try resending the verification email\")}\n            </p>\n            <Button onClick={handleConfirmEmailResend} primary size='huge' content={t('Resend email')} />\n          </div>\n        );\n      case Status.Success:\n        return (\n          <div className='center'>\n            <p>{t(\"Email has been verified - you can now login\")}</p>\n            <Button\n              primary\n              onClick={() => openModal(<LoginForm />)}\n              size='large'\n              content={t('Login')}\n            />\n          </div>\n        );\n    }\n\n  };\n  return (\n    <Segment placeholder>\n        <Header icon>\n            <Icon name='envelope' />\n            {t(\"Email verification\")}\n        </Header>\n\n        <Segment.Inline>\n            {getBody()}\n        </Segment.Inline>\n    </Segment>\n)\n};\n\nexport default VerifyEmail","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"../../features/nav/NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport HomePage from \"../../features/home/HomePage\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport GalleryDashboard from \"../../features/gallery/dashboard/GalleryDashboard\";\nimport MechanicDashboard from \"../../features/mechanics/dashboard/MechanicDashboard\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport ProductDetails from \"../../features/shop/details/ProductDetails\";\nimport NotFound from \"./NotFound\";\nimport { ToastContainer } from \"react-toastify\";\nimport LoginForm from \"../../features/user/LoginForm\";\nimport { RootStoreContext } from \"../stores/rootStore\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\nimport GaleryDetails from \"../../features/gallery/details/GaleryDetails\";\nimport ForumDashboard from \"../../features/forum/dashboard/ForumDashboard\";\nimport ForumForm from \"../../features/forum/form/ForumForm\";\nimport ForumDetails from \"../../features/forum/details/ForumDetails\";\nimport MechanicDetails from \"../../features/mechanics/details/MechanicDetails\";\nimport MechanicForm from \"../../features/mechanics/form/MechanicForm\";\nimport GalleryForm from \"../../features/gallery/form/GalleryForm\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport ConfirmDelete from \"../../features/gallery/modals/ConfirmDelete\";\nimport ProductDashboard from \"../../features/shop/dashboard/ProductDashboard\";\nimport ProductForm from \"../../features/shop/forms/ProductForm\";\nimport FeedDashboard from \"../../features/feed/dashboard/FeedDashboard\";\nimport PeopleDashboard from \"../../features/people/dashboard/PeopleDashboard\";\nimport DiaryEntryForm from \"../../features/activities/form/DiaryEntryForm\";\nimport PrivateMessagesDashboard from \"../../features/private_messages/PrivateMessagesDashboard\";\nimport RegisterSuccess from \"../../features/user/RegisterSuccess\";\nimport VerifyEmail from \"../../features/user/VerifyEmail\";\nimport { useTranslation } from \"react-i18next\";\n\n\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n\n  const { t } = useTranslation([\"home\"]);\n\n  useEffect(() => {\n    if (token) {\n      getUser().finally(() => setAppLoaded());\n     \n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token]);\n\n\n  if (!appLoaded) return <LoadingComponent content={t(\"Loading app...\")} />;\n  return (\n    <>\n      <ModalContainer />\n      <ToastContainer position='top-right' />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <Switch>\n                <PrivateRoute\n                  exact\n                  path='/activities'\n                  component={ActivityDashboard}\n                />\n                <PrivateRoute\n                  path='/activities/:id'\n                  component={ActivityDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createDiary\", \"/manage/:id\"]}\n                  component={ActivityForm}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\n                    \"/createDiaryEntry/:activityId\",\n                    \"/manageDiaryEntry/:id/:activityId\",\n                  ]}\n                  component={DiaryEntryForm}\n                />\n\n                <PrivateRoute\n                  exact\n                  path='/gallery'\n                  component={GalleryDashboard}\n                />\n                <PrivateRoute path='/gallery/:id' component={GaleryDetails} />\n                <PrivateRoute\n                  path={[\"/galleryForm\", \"/manageGallery/:id\"]}\n                  key={location.key}\n                  component={GalleryForm}\n                />\n                <PrivateRoute exact path='/forum' component={ForumDashboard} />\n                <PrivateRoute\n                  exact\n                  path='/forum/:id'\n                  component={ForumDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/forumform\", \"/manageForum/:id\"]}\n                  component={ForumForm}\n                />\n                <PrivateRoute\n                  exact\n                  path='/mechanics'\n                  component={MechanicDashboard}\n                />\n                <PrivateRoute\n                  path='/mechanics/:id'\n                  component={MechanicDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/mechanicForm\", \"/manageMechanic/:id\"]}\n                  component={MechanicForm}\n                />\n\n                <PrivateRoute exact path='/shop' component={ProductDashboard} />\n                <PrivateRoute path='/product/:id' component={ProductDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/productForm\", \"/manageProduct/:id\"]}\n                  component={ProductForm}\n                />\n                <PrivateRoute\n                  exact\n                  path='/privateMessages'\n                  component={PrivateMessagesDashboard}\n                />\n\n                <PrivateRoute exact path='/feed' component={FeedDashboard} />\n                <PrivateRoute\n                  exact\n                  path='/people'\n                  component={PeopleDashboard}\n                />\n\n                <PrivateRoute\n                  path='/profile/:username'\n                  component={ProfilePage}\n                />\n                <Route\n                  path='/user/registerSuccess'\n                  component={RegisterSuccess}\n                />\n                <Route path='/user/verifyEmail' component={VerifyEmail} />\n                <Route path='/login' component={LoginForm} />\n                <Route path='/confirmDelete' component={ConfirmDelete} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </>\n  );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { withRouter } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\n\n const ScrollToTop = ({children, location: {pathname}}: any) => {\n     useEffect(()=> {\n         window.scrollTo(0, 0);\n     }, [pathname]);\n\n     return children;\n };\n \n export default withRouter(ScrollToTop);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    backend: {\n      // translation file path\n      loadPath: \"/assets/i18n/{{ns}}/{{lng}}.json\",\n    },\n    fallbackLng: \"en\",\n    // disable for prod\n    debug: false,\n    ns: [\"home\", \"navbar\", \"diaries\", \"gallery\", \"widget\", \"forum\", \"comments\", \"modals\", \"mechanics\", \"shop\", \"social\"], \n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n      formatSeparator: \",\",\n    },\n    react: {\n      // wait: true,\n      useSuspense: true,\n    },\n  });\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"./app/layout/styles.css\";\nimport App from \"./app/layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\nimport dateFnsLocalizer from \"react-widgets-date-fns\";\nimport \"./i18.n\";\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <Suspense fallback={null}>\n        <App />\n      </Suspense>\n    </ScrollToTop>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}